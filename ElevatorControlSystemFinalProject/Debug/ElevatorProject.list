
ElevatorProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e98  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000894  08004fa8  08004fa8  00005fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800583c  0800583c  0000706c  2**0
                  CONTENTS
  4 .ARM          00000008  0800583c  0800583c  0000683c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005844  08005844  0000706c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005844  08005844  00006844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005848  08005848  00006848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800584c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011c0  2000006c  080058b8  0000706c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000122c  080058b8  0000722c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000706c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011ee2  00000000  00000000  00007095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002db9  00000000  00000000  00018f77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001198  00000000  00000000  0001bd30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000daf  00000000  00000000  0001cec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019cc4  00000000  00000000  0001dc77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013f90  00000000  00000000  0003793b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000935e4  00000000  00000000  0004b8cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000deeaf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ea4  00000000  00000000  000deef4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  000e3d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000006c 	.word	0x2000006c
 800012c:	00000000 	.word	0x00000000
 8000130:	08004f90 	.word	0x08004f90

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000070 	.word	0x20000070
 800014c:	08004f90 	.word	0x08004f90

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <InitializeElevatorSystem>:
void EmergencyButtonPollingTask(void const * argument);
const char* get_elevator_state_description(ElevatorState state);

/* Initialize Elevator System */
void InitializeElevatorSystem(UART_HandleTypeDef *huart2)
{
 8000174:	b5b0      	push	{r4, r5, r7, lr}
 8000176:	b098      	sub	sp, #96	@ 0x60
 8000178:	af00      	add	r7, sp, #0
 800017a:	6078      	str	r0, [r7, #4]
    /* Create the floor queue */
    floorQueue = xQueueCreate(10, sizeof(int));
 800017c:	2200      	movs	r2, #0
 800017e:	2104      	movs	r1, #4
 8000180:	200a      	movs	r0, #10
 8000182:	f002 fc03 	bl	800298c <xQueueGenericCreate>
 8000186:	4603      	mov	r3, r0
 8000188:	4a23      	ldr	r2, [pc, #140]	@ (8000218 <InitializeElevatorSystem+0xa4>)
 800018a:	6013      	str	r3, [r2, #0]
    if (floorQueue == NULL) {
 800018c:	4b22      	ldr	r3, [pc, #136]	@ (8000218 <InitializeElevatorSystem+0xa4>)
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	2b00      	cmp	r3, #0
 8000192:	d101      	bne.n	8000198 <InitializeElevatorSystem+0x24>
        Error_Handler();
 8000194:	f000 fcd8 	bl	8000b48 <Error_Handler>
    }

    /* Create FreeRTOS tasks */
    osThreadDef(FloorSelectionTaskDef, FloorSelectionTask, osPriorityNormal, 0, 128);
 8000198:	4b20      	ldr	r3, [pc, #128]	@ (800021c <InitializeElevatorSystem+0xa8>)
 800019a:	f107 0444 	add.w	r4, r7, #68	@ 0x44
 800019e:	461d      	mov	r5, r3
 80001a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001a4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    FloorSelectionTaskHandle = osThreadCreate(osThread(FloorSelectionTaskDef), NULL);
 80001ac:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80001b0:	2100      	movs	r1, #0
 80001b2:	4618      	mov	r0, r3
 80001b4:	f002 fa70 	bl	8002698 <osThreadCreate>
 80001b8:	4603      	mov	r3, r0
 80001ba:	4a19      	ldr	r2, [pc, #100]	@ (8000220 <InitializeElevatorSystem+0xac>)
 80001bc:	6013      	str	r3, [r2, #0]

    osThreadDef(ElevatorMovementTaskDef, ElevatorMovementTask, osPriorityAboveNormal, 0, 256);
 80001be:	4b19      	ldr	r3, [pc, #100]	@ (8000224 <InitializeElevatorSystem+0xb0>)
 80001c0:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 80001c4:	461d      	mov	r5, r3
 80001c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001ca:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    ElevatorMovementTaskHandle = osThreadCreate(osThread(ElevatorMovementTaskDef), NULL);
 80001d2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80001d6:	2100      	movs	r1, #0
 80001d8:	4618      	mov	r0, r3
 80001da:	f002 fa5d 	bl	8002698 <osThreadCreate>
 80001de:	4603      	mov	r3, r0
 80001e0:	4a11      	ldr	r2, [pc, #68]	@ (8000228 <InitializeElevatorSystem+0xb4>)
 80001e2:	6013      	str	r3, [r2, #0]

    osThreadDef(ButtonPollingTaskDef, EmergencyButtonPollingTask, osPriorityNormal, 0, 128);
 80001e4:	4b11      	ldr	r3, [pc, #68]	@ (800022c <InitializeElevatorSystem+0xb8>)
 80001e6:	f107 040c 	add.w	r4, r7, #12
 80001ea:	461d      	mov	r5, r3
 80001ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    ButtonPollingTaskHandle = osThreadCreate(osThread(ButtonPollingTaskDef), NULL);
 80001f8:	f107 030c 	add.w	r3, r7, #12
 80001fc:	2100      	movs	r1, #0
 80001fe:	4618      	mov	r0, r3
 8000200:	f002 fa4a 	bl	8002698 <osThreadCreate>
 8000204:	4603      	mov	r3, r0
 8000206:	4a0a      	ldr	r2, [pc, #40]	@ (8000230 <InitializeElevatorSystem+0xbc>)
 8000208:	6013      	str	r3, [r2, #0]



    update_cli_display();
 800020a:	f000 f86f 	bl	80002ec <update_cli_display>
}
 800020e:	bf00      	nop
 8000210:	3760      	adds	r7, #96	@ 0x60
 8000212:	46bd      	mov	sp, r7
 8000214:	bdb0      	pop	{r4, r5, r7, pc}
 8000216:	bf00      	nop
 8000218:	20000094 	.word	0x20000094
 800021c:	08004fc0 	.word	0x08004fc0
 8000220:	20000088 	.word	0x20000088
 8000224:	08004ff4 	.word	0x08004ff4
 8000228:	2000008c 	.word	0x2000008c
 800022c:	08005028 	.word	0x08005028
 8000230:	20000090 	.word	0x20000090

08000234 <CLI_Transmit>:

/* UART CLI Transmit Function */
void CLI_Transmit(const char *message)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 800023c:	6878      	ldr	r0, [r7, #4]
 800023e:	f7ff ff91 	bl	8000164 <strlen>
 8000242:	4603      	mov	r3, r0
 8000244:	b29a      	uxth	r2, r3
 8000246:	f04f 33ff 	mov.w	r3, #4294967295
 800024a:	6879      	ldr	r1, [r7, #4]
 800024c:	4803      	ldr	r0, [pc, #12]	@ (800025c <CLI_Transmit+0x28>)
 800024e:	f001 ff99 	bl	8002184 <HAL_UART_Transmit>
}
 8000252:	bf00      	nop
 8000254:	3708      	adds	r7, #8
 8000256:	46bd      	mov	sp, r7
 8000258:	bd80      	pop	{r7, pc}
 800025a:	bf00      	nop
 800025c:	20000340 	.word	0x20000340

08000260 <CLI_Receive>:

/* UART CLI Receive Function */
int CLI_Receive(char *buffer, uint16_t buffer_size)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b084      	sub	sp, #16
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]
 8000268:	460b      	mov	r3, r1
 800026a:	807b      	strh	r3, [r7, #2]
    uint16_t index = 0;
 800026c:	2300      	movs	r3, #0
 800026e:	81fb      	strh	r3, [r7, #14]
    uint8_t rx_char;

    while (index < buffer_size - 1) {
 8000270:	e02a      	b.n	80002c8 <CLI_Receive+0x68>
        if (HAL_UART_Receive(&huart2, &rx_char, 1, HAL_MAX_DELAY) == HAL_OK) {
 8000272:	f107 010d 	add.w	r1, r7, #13
 8000276:	f04f 33ff 	mov.w	r3, #4294967295
 800027a:	2201      	movs	r2, #1
 800027c:	481a      	ldr	r0, [pc, #104]	@ (80002e8 <CLI_Receive+0x88>)
 800027e:	f002 f80c 	bl	800229a <HAL_UART_Receive>
 8000282:	4603      	mov	r3, r0
 8000284:	2b00      	cmp	r3, #0
 8000286:	d11d      	bne.n	80002c4 <CLI_Receive+0x64>
            if (rx_char == '\r' || rx_char == '\n') {
 8000288:	7b7b      	ldrb	r3, [r7, #13]
 800028a:	2b0d      	cmp	r3, #13
 800028c:	d002      	beq.n	8000294 <CLI_Receive+0x34>
 800028e:	7b7b      	ldrb	r3, [r7, #13]
 8000290:	2b0a      	cmp	r3, #10
 8000292:	d106      	bne.n	80002a2 <CLI_Receive+0x42>
                buffer[index] = '\0'; // Null-terminate the string
 8000294:	89fb      	ldrh	r3, [r7, #14]
 8000296:	687a      	ldr	r2, [r7, #4]
 8000298:	4413      	add	r3, r2
 800029a:	2200      	movs	r2, #0
 800029c:	701a      	strb	r2, [r3, #0]
                return 1;
 800029e:	2301      	movs	r3, #1
 80002a0:	e01d      	b.n	80002de <CLI_Receive+0x7e>
            } else {
                buffer[index++] = rx_char;
 80002a2:	89fb      	ldrh	r3, [r7, #14]
 80002a4:	1c5a      	adds	r2, r3, #1
 80002a6:	81fa      	strh	r2, [r7, #14]
 80002a8:	461a      	mov	r2, r3
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	4413      	add	r3, r2
 80002ae:	7b7a      	ldrb	r2, [r7, #13]
 80002b0:	701a      	strb	r2, [r3, #0]
                HAL_UART_Transmit(&huart2, &rx_char, 1, HAL_MAX_DELAY); // Echo input
 80002b2:	f107 010d 	add.w	r1, r7, #13
 80002b6:	f04f 33ff 	mov.w	r3, #4294967295
 80002ba:	2201      	movs	r2, #1
 80002bc:	480a      	ldr	r0, [pc, #40]	@ (80002e8 <CLI_Receive+0x88>)
 80002be:	f001 ff61 	bl	8002184 <HAL_UART_Transmit>
 80002c2:	e001      	b.n	80002c8 <CLI_Receive+0x68>
            }
        } else {
            return 0; // Error or timeout
 80002c4:	2300      	movs	r3, #0
 80002c6:	e00a      	b.n	80002de <CLI_Receive+0x7e>
    while (index < buffer_size - 1) {
 80002c8:	89fa      	ldrh	r2, [r7, #14]
 80002ca:	887b      	ldrh	r3, [r7, #2]
 80002cc:	3b01      	subs	r3, #1
 80002ce:	429a      	cmp	r2, r3
 80002d0:	dbcf      	blt.n	8000272 <CLI_Receive+0x12>
        }
    }

    buffer[index] = '\0'; // Null-terminate the string
 80002d2:	89fb      	ldrh	r3, [r7, #14]
 80002d4:	687a      	ldr	r2, [r7, #4]
 80002d6:	4413      	add	r3, r2
 80002d8:	2200      	movs	r2, #0
 80002da:	701a      	strb	r2, [r3, #0]
    return 1;
 80002dc:	2301      	movs	r3, #1
}
 80002de:	4618      	mov	r0, r3
 80002e0:	3710      	adds	r7, #16
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	20000340 	.word	0x20000340

080002ec <update_cli_display>:

/* Update CLI Display */
void update_cli_display(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 80002f2:	af02      	add	r7, sp, #8
    char status_message[512];
    sprintf(status_message,
 80002f4:	4b18      	ldr	r3, [pc, #96]	@ (8000358 <update_cli_display+0x6c>)
 80002f6:	681a      	ldr	r2, [r3, #0]
        "\r\n\033[1;33m Current Floor: \033[0m%d\n"
        "\r\n\033[1;33m Door Status: \033[0m%s\n"
        "\r\n\033[1;33m Elevator State: \033[0m%s\n"
        "\r\n Commands: Please enter open to open the door\n\r To call the elevator to different floor Please enter the floor number \n\r Please enter M for maintenance\n",
        currentFloor,
        (doorOpen ? "\033[1;32mOpen\033[0m" : "\033[1;31mClosed\033[0m"),
 80002f8:	4b18      	ldr	r3, [pc, #96]	@ (800035c <update_cli_display+0x70>)
 80002fa:	681b      	ldr	r3, [r3, #0]
    sprintf(status_message,
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d001      	beq.n	8000304 <update_cli_display+0x18>
 8000300:	4917      	ldr	r1, [pc, #92]	@ (8000360 <update_cli_display+0x74>)
 8000302:	e000      	b.n	8000306 <update_cli_display+0x1a>
 8000304:	4917      	ldr	r1, [pc, #92]	@ (8000364 <update_cli_display+0x78>)
        emergencyActivated ? "\033[1;31mEmergency Stop\033[0m"
 8000306:	4b18      	ldr	r3, [pc, #96]	@ (8000368 <update_cli_display+0x7c>)
 8000308:	681b      	ldr	r3, [r3, #0]
    sprintf(status_message,
 800030a:	2b00      	cmp	r3, #0
 800030c:	d113      	bne.n	8000336 <update_cli_display+0x4a>
                           : (elevatorState == ELEVATOR_MAINTENANCE
 800030e:	4b17      	ldr	r3, [pc, #92]	@ (800036c <update_cli_display+0x80>)
 8000310:	781b      	ldrb	r3, [r3, #0]
                              ? "\033[1;31mOut of Order (Maintenance)\033[0m"
                              : (elevatorIdle ? "\033[1;32mIdle\033[0m"
 8000312:	2b01      	cmp	r3, #1
 8000314:	d00d      	beq.n	8000332 <update_cli_display+0x46>
 8000316:	4b16      	ldr	r3, [pc, #88]	@ (8000370 <update_cli_display+0x84>)
 8000318:	681b      	ldr	r3, [r3, #0]
                              : (elevatorMoving == 1 ? "\033[1;32mMoving Up\033[0m" : "\033[1;31mMoving Down\033[0m")))
 800031a:	2b00      	cmp	r3, #0
 800031c:	d107      	bne.n	800032e <update_cli_display+0x42>
 800031e:	4b15      	ldr	r3, [pc, #84]	@ (8000374 <update_cli_display+0x88>)
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	2b01      	cmp	r3, #1
 8000324:	d101      	bne.n	800032a <update_cli_display+0x3e>
 8000326:	4b14      	ldr	r3, [pc, #80]	@ (8000378 <update_cli_display+0x8c>)
 8000328:	e006      	b.n	8000338 <update_cli_display+0x4c>
 800032a:	4b14      	ldr	r3, [pc, #80]	@ (800037c <update_cli_display+0x90>)
 800032c:	e004      	b.n	8000338 <update_cli_display+0x4c>
 800032e:	4b14      	ldr	r3, [pc, #80]	@ (8000380 <update_cli_display+0x94>)
 8000330:	e002      	b.n	8000338 <update_cli_display+0x4c>
                              : (elevatorIdle ? "\033[1;32mIdle\033[0m"
 8000332:	4b14      	ldr	r3, [pc, #80]	@ (8000384 <update_cli_display+0x98>)
 8000334:	e000      	b.n	8000338 <update_cli_display+0x4c>
    sprintf(status_message,
 8000336:	4b14      	ldr	r3, [pc, #80]	@ (8000388 <update_cli_display+0x9c>)
 8000338:	4638      	mov	r0, r7
 800033a:	9300      	str	r3, [sp, #0]
 800033c:	460b      	mov	r3, r1
 800033e:	4913      	ldr	r1, [pc, #76]	@ (800038c <update_cli_display+0xa0>)
 8000340:	f004 f976 	bl	8004630 <siprintf>
    );

    CLI_Transmit(status_message);
 8000344:	463b      	mov	r3, r7
 8000346:	4618      	mov	r0, r3
 8000348:	f7ff ff74 	bl	8000234 <CLI_Transmit>
}
 800034c:	bf00      	nop
 800034e:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	20000000 	.word	0x20000000
 800035c:	2000009c 	.word	0x2000009c
 8000360:	08005044 	.word	0x08005044
 8000364:	08005054 	.word	0x08005054
 8000368:	200000a0 	.word	0x200000a0
 800036c:	20000098 	.word	0x20000098
 8000370:	20000004 	.word	0x20000004
 8000374:	20000008 	.word	0x20000008
 8000378:	08005068 	.word	0x08005068
 800037c:	08005080 	.word	0x08005080
 8000380:	08005098 	.word	0x08005098
 8000384:	080050a8 	.word	0x080050a8
 8000388:	080050d0 	.word	0x080050d0
 800038c:	080050ec 	.word	0x080050ec

08000390 <update_cli_display1>:

void update_cli_display1(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b0c0      	sub	sp, #256	@ 0x100
 8000394:	af00      	add	r7, sp, #0
    char status_message[256];

    CLI_Transmit("\033[2J\033[H"); // Clear screen and reset cursor
 8000396:	481d      	ldr	r0, [pc, #116]	@ (800040c <update_cli_display1+0x7c>)
 8000398:	f7ff ff4c 	bl	8000234 <CLI_Transmit>
    CLI_Transmit("\r\n\033[1;34m Elevator Status:\033[0m\n");
 800039c:	481c      	ldr	r0, [pc, #112]	@ (8000410 <update_cli_display1+0x80>)
 800039e:	f7ff ff49 	bl	8000234 <CLI_Transmit>

    sprintf(status_message, "\r\n\033[1;33m Current Floor: \033[0m%d\n", currentFloor);
 80003a2:	4b1c      	ldr	r3, [pc, #112]	@ (8000414 <update_cli_display1+0x84>)
 80003a4:	681a      	ldr	r2, [r3, #0]
 80003a6:	463b      	mov	r3, r7
 80003a8:	491b      	ldr	r1, [pc, #108]	@ (8000418 <update_cli_display1+0x88>)
 80003aa:	4618      	mov	r0, r3
 80003ac:	f004 f940 	bl	8004630 <siprintf>
    CLI_Transmit(status_message);
 80003b0:	463b      	mov	r3, r7
 80003b2:	4618      	mov	r0, r3
 80003b4:	f7ff ff3e 	bl	8000234 <CLI_Transmit>

    CLI_Transmit("\r\n\033[1;33m Door Status: \033[0m");
 80003b8:	4818      	ldr	r0, [pc, #96]	@ (800041c <update_cli_display1+0x8c>)
 80003ba:	f7ff ff3b 	bl	8000234 <CLI_Transmit>
    CLI_Transmit(doorOpen ? "\033[1;32mOpen\033[0m\n" : "\033[1;31mClosed\033[0m\n");
 80003be:	4b18      	ldr	r3, [pc, #96]	@ (8000420 <update_cli_display1+0x90>)
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d001      	beq.n	80003ca <update_cli_display1+0x3a>
 80003c6:	4b17      	ldr	r3, [pc, #92]	@ (8000424 <update_cli_display1+0x94>)
 80003c8:	e000      	b.n	80003cc <update_cli_display1+0x3c>
 80003ca:	4b17      	ldr	r3, [pc, #92]	@ (8000428 <update_cli_display1+0x98>)
 80003cc:	4618      	mov	r0, r3
 80003ce:	f7ff ff31 	bl	8000234 <CLI_Transmit>

    CLI_Transmit("\r\n\033[1;33m Elevator State: \033[0m");
 80003d2:	4816      	ldr	r0, [pc, #88]	@ (800042c <update_cli_display1+0x9c>)
 80003d4:	f7ff ff2e 	bl	8000234 <CLI_Transmit>
    CLI_Transmit(get_elevator_state_description(elevatorState));
 80003d8:	4b15      	ldr	r3, [pc, #84]	@ (8000430 <update_cli_display1+0xa0>)
 80003da:	781b      	ldrb	r3, [r3, #0]
 80003dc:	4618      	mov	r0, r3
 80003de:	f000 f831 	bl	8000444 <get_elevator_state_description>
 80003e2:	4603      	mov	r3, r0
 80003e4:	4618      	mov	r0, r3
 80003e6:	f7ff ff25 	bl	8000234 <CLI_Transmit>
    CLI_Transmit("\n");
 80003ea:	4812      	ldr	r0, [pc, #72]	@ (8000434 <update_cli_display1+0xa4>)
 80003ec:	f7ff ff22 	bl	8000234 <CLI_Transmit>

    CLI_Transmit("\r\n Commands: Please enter open to open the door\n");
 80003f0:	4811      	ldr	r0, [pc, #68]	@ (8000438 <update_cli_display1+0xa8>)
 80003f2:	f7ff ff1f 	bl	8000234 <CLI_Transmit>
    CLI_Transmit("\r To call the elevator to different floor Please enter the floor number\n");
 80003f6:	4811      	ldr	r0, [pc, #68]	@ (800043c <update_cli_display1+0xac>)
 80003f8:	f7ff ff1c 	bl	8000234 <CLI_Transmit>
    CLI_Transmit("\r Please enter M for maintenance\n");
 80003fc:	4810      	ldr	r0, [pc, #64]	@ (8000440 <update_cli_display1+0xb0>)
 80003fe:	f7ff ff19 	bl	8000234 <CLI_Transmit>
}
 8000402:	bf00      	nop
 8000404:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8000408:	46bd      	mov	sp, r7
 800040a:	bd80      	pop	{r7, pc}
 800040c:	0800520c 	.word	0x0800520c
 8000410:	08005214 	.word	0x08005214
 8000414:	20000000 	.word	0x20000000
 8000418:	08005234 	.word	0x08005234
 800041c:	08005258 	.word	0x08005258
 8000420:	2000009c 	.word	0x2000009c
 8000424:	08005274 	.word	0x08005274
 8000428:	08005288 	.word	0x08005288
 800042c:	0800529c 	.word	0x0800529c
 8000430:	20000098 	.word	0x20000098
 8000434:	080052bc 	.word	0x080052bc
 8000438:	080052c0 	.word	0x080052c0
 800043c:	080052f4 	.word	0x080052f4
 8000440:	08005340 	.word	0x08005340

08000444 <get_elevator_state_description>:

/* Elevator State Description Helper */
const char* get_elevator_state_description(ElevatorState state)
{
 8000444:	b480      	push	{r7}
 8000446:	b083      	sub	sp, #12
 8000448:	af00      	add	r7, sp, #0
 800044a:	4603      	mov	r3, r0
 800044c:	71fb      	strb	r3, [r7, #7]
    switch (state) {
 800044e:	79fb      	ldrb	r3, [r7, #7]
 8000450:	2b04      	cmp	r3, #4
 8000452:	d817      	bhi.n	8000484 <get_elevator_state_description+0x40>
 8000454:	a201      	add	r2, pc, #4	@ (adr r2, 800045c <get_elevator_state_description+0x18>)
 8000456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800045a:	bf00      	nop
 800045c:	08000471 	.word	0x08000471
 8000460:	08000475 	.word	0x08000475
 8000464:	08000479 	.word	0x08000479
 8000468:	0800047d 	.word	0x0800047d
 800046c:	08000481 	.word	0x08000481
        case ELEVATOR_IDLE:
            return "\033[1;32mIdle\033[0m";
 8000470:	4b07      	ldr	r3, [pc, #28]	@ (8000490 <get_elevator_state_description+0x4c>)
 8000472:	e008      	b.n	8000486 <get_elevator_state_description+0x42>
        case ELEVATOR_MAINTENANCE:
            return "\033[1;31mOut of Order (Maintenance)\033[0m";
 8000474:	4b07      	ldr	r3, [pc, #28]	@ (8000494 <get_elevator_state_description+0x50>)
 8000476:	e006      	b.n	8000486 <get_elevator_state_description+0x42>
        case ELEVATOR_MOVING_UP:
            return "\033[1;32mMoving Up\033[0m";
 8000478:	4b07      	ldr	r3, [pc, #28]	@ (8000498 <get_elevator_state_description+0x54>)
 800047a:	e004      	b.n	8000486 <get_elevator_state_description+0x42>
        case ELEVATOR_MOVING_DOWN:
            return "\033[1;31mMoving Down\033[0m";
 800047c:	4b07      	ldr	r3, [pc, #28]	@ (800049c <get_elevator_state_description+0x58>)
 800047e:	e002      	b.n	8000486 <get_elevator_state_description+0x42>
        case ELEVATOR_EMERGENCY:
            return "\033[1;31mEmergency Stop\033[0m";
 8000480:	4b07      	ldr	r3, [pc, #28]	@ (80004a0 <get_elevator_state_description+0x5c>)
 8000482:	e000      	b.n	8000486 <get_elevator_state_description+0x42>
        default:
            return "\033[1;33mUnknown State\033[0m";
 8000484:	4b07      	ldr	r3, [pc, #28]	@ (80004a4 <get_elevator_state_description+0x60>)
    }
}
 8000486:	4618      	mov	r0, r3
 8000488:	370c      	adds	r7, #12
 800048a:	46bd      	mov	sp, r7
 800048c:	bc80      	pop	{r7}
 800048e:	4770      	bx	lr
 8000490:	08005098 	.word	0x08005098
 8000494:	080050a8 	.word	0x080050a8
 8000498:	08005068 	.word	0x08005068
 800049c:	08005080 	.word	0x08005080
 80004a0:	080050d0 	.word	0x080050d0
 80004a4:	08005364 	.word	0x08005364

080004a8 <PromptFloorInput>:

/* Prompt Floor Input */
void PromptFloorInput(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b09c      	sub	sp, #112	@ 0x70
 80004ac:	af00      	add	r7, sp, #0
    char command_buffer[100];
    int targetFloor;
    int isValid = 0;
 80004ae:	2300      	movs	r3, #0
 80004b0:	66fb      	str	r3, [r7, #108]	@ 0x6c

    while (!isValid) {
 80004b2:	e035      	b.n	8000520 <PromptFloorInput+0x78>
        CLI_Transmit("\r\n Please enter the floor (1-5): ");
 80004b4:	481e      	ldr	r0, [pc, #120]	@ (8000530 <PromptFloorInput+0x88>)
 80004b6:	f7ff febd 	bl	8000234 <CLI_Transmit>

        if (CLI_Receive(command_buffer, sizeof(command_buffer))) {
 80004ba:	f107 0308 	add.w	r3, r7, #8
 80004be:	2164      	movs	r1, #100	@ 0x64
 80004c0:	4618      	mov	r0, r3
 80004c2:	f7ff fecd 	bl	8000260 <CLI_Receive>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d029      	beq.n	8000520 <PromptFloorInput+0x78>
            char *endPtr;
            targetFloor = strtol(command_buffer, &endPtr, 10);
 80004cc:	4639      	mov	r1, r7
 80004ce:	f107 0308 	add.w	r3, r7, #8
 80004d2:	220a      	movs	r2, #10
 80004d4:	4618      	mov	r0, r3
 80004d6:	f004 f8a1 	bl	800461c <strtol>
 80004da:	4603      	mov	r3, r0
 80004dc:	607b      	str	r3, [r7, #4]

            if (*endPtr != '\0') {
 80004de:	683b      	ldr	r3, [r7, #0]
 80004e0:	781b      	ldrb	r3, [r3, #0]
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d003      	beq.n	80004ee <PromptFloorInput+0x46>
                CLI_Transmit("\r\n Please enter the floor as a number: 1, 2, 3, 4, or 5.\r\n");
 80004e6:	4813      	ldr	r0, [pc, #76]	@ (8000534 <PromptFloorInput+0x8c>)
 80004e8:	f7ff fea4 	bl	8000234 <CLI_Transmit>
 80004ec:	e018      	b.n	8000520 <PromptFloorInput+0x78>
            } else if (targetFloor < 1 || targetFloor > 5) {
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	dd02      	ble.n	80004fa <PromptFloorInput+0x52>
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	2b05      	cmp	r3, #5
 80004f8:	dd03      	ble.n	8000502 <PromptFloorInput+0x5a>
                CLI_Transmit("\r\n Invalid floor. There are only 5 floors in this building.\r\n");
 80004fa:	480f      	ldr	r0, [pc, #60]	@ (8000538 <PromptFloorInput+0x90>)
 80004fc:	f7ff fe9a 	bl	8000234 <CLI_Transmit>
 8000500:	e00e      	b.n	8000520 <PromptFloorInput+0x78>
            } else {
                if (xQueueSend(floorQueue, &targetFloor, pdMS_TO_TICKS(100)) != pdPASS) {
 8000502:	4b0e      	ldr	r3, [pc, #56]	@ (800053c <PromptFloorInput+0x94>)
 8000504:	6818      	ldr	r0, [r3, #0]
 8000506:	1d39      	adds	r1, r7, #4
 8000508:	2300      	movs	r3, #0
 800050a:	2264      	movs	r2, #100	@ 0x64
 800050c:	f002 fa98 	bl	8002a40 <xQueueGenericSend>
 8000510:	4603      	mov	r3, r0
 8000512:	2b01      	cmp	r3, #1
 8000514:	d104      	bne.n	8000520 <PromptFloorInput+0x78>
                    //CLI_Transmit("\r\n Failed to queue floor request.\r\n");
                } else {
                    CLI_Transmit("\r\n Floor request queued.\r\n");
 8000516:	480a      	ldr	r0, [pc, #40]	@ (8000540 <PromptFloorInput+0x98>)
 8000518:	f7ff fe8c 	bl	8000234 <CLI_Transmit>
                    isValid = 1;
 800051c:	2301      	movs	r3, #1
 800051e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    while (!isValid) {
 8000520:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000522:	2b00      	cmp	r3, #0
 8000524:	d0c6      	beq.n	80004b4 <PromptFloorInput+0xc>
                }
            }
        }
    }
}
 8000526:	bf00      	nop
 8000528:	bf00      	nop
 800052a:	3770      	adds	r7, #112	@ 0x70
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}
 8000530:	08005380 	.word	0x08005380
 8000534:	080053a4 	.word	0x080053a4
 8000538:	080053e0 	.word	0x080053e0
 800053c:	20000094 	.word	0x20000094
 8000540:	08005420 	.word	0x08005420

08000544 <EmergencyButtonPollingTask>:



/* Emergency Button Polling Task */
void EmergencyButtonPollingTask(void const * argument)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b084      	sub	sp, #16
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
    int lastButtonState = 1; // Assume button starts unpressed (pulled up)
 800054c:	2301      	movs	r3, #1
 800054e:	60fb      	str	r3, [r7, #12]

    for (;;) {
        int currentButtonState = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0);
 8000550:	2101      	movs	r1, #1
 8000552:	4814      	ldr	r0, [pc, #80]	@ (80005a4 <EmergencyButtonPollingTask+0x60>)
 8000554:	f000 feec 	bl	8001330 <HAL_GPIO_ReadPin>
 8000558:	4603      	mov	r3, r0
 800055a:	60bb      	str	r3, [r7, #8]

        // Detect button press (falling edge)
        if (lastButtonState == 1 && currentButtonState == 0) {
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	2b01      	cmp	r3, #1
 8000560:	d119      	bne.n	8000596 <EmergencyButtonPollingTask+0x52>
 8000562:	68bb      	ldr	r3, [r7, #8]
 8000564:	2b00      	cmp	r3, #0
 8000566:	d116      	bne.n	8000596 <EmergencyButtonPollingTask+0x52>
            emergencyActivated = !emergencyActivated; // Toggle emergency state
 8000568:	4b0f      	ldr	r3, [pc, #60]	@ (80005a8 <EmergencyButtonPollingTask+0x64>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	2b00      	cmp	r3, #0
 800056e:	bf0c      	ite	eq
 8000570:	2301      	moveq	r3, #1
 8000572:	2300      	movne	r3, #0
 8000574:	b2db      	uxtb	r3, r3
 8000576:	461a      	mov	r2, r3
 8000578:	4b0b      	ldr	r3, [pc, #44]	@ (80005a8 <EmergencyButtonPollingTask+0x64>)
 800057a:	601a      	str	r2, [r3, #0]

            if (emergencyActivated) {
 800057c:	4b0a      	ldr	r3, [pc, #40]	@ (80005a8 <EmergencyButtonPollingTask+0x64>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	2b00      	cmp	r3, #0
 8000582:	d003      	beq.n	800058c <EmergencyButtonPollingTask+0x48>
                CLI_Transmit("\r\n Emergency Stop Activated! Elevator halted.\r\n");
 8000584:	4809      	ldr	r0, [pc, #36]	@ (80005ac <EmergencyButtonPollingTask+0x68>)
 8000586:	f7ff fe55 	bl	8000234 <CLI_Transmit>
 800058a:	e002      	b.n	8000592 <EmergencyButtonPollingTask+0x4e>
            } else {
                CLI_Transmit("\r\n Emergency Stop Deactivated. Elevator is now idle.\r\n");
 800058c:	4808      	ldr	r0, [pc, #32]	@ (80005b0 <EmergencyButtonPollingTask+0x6c>)
 800058e:	f7ff fe51 	bl	8000234 <CLI_Transmit>
            }

            update_cli_display(); // Update the CLI display
 8000592:	f7ff feab 	bl	80002ec <update_cli_display>
        }

        lastButtonState = currentButtonState;
 8000596:	68bb      	ldr	r3, [r7, #8]
 8000598:	60fb      	str	r3, [r7, #12]

        osDelay(100); // Poll every 100ms
 800059a:	2064      	movs	r0, #100	@ 0x64
 800059c:	f002 f8c8 	bl	8002730 <osDelay>
    for (;;) {
 80005a0:	e7d6      	b.n	8000550 <EmergencyButtonPollingTask+0xc>
 80005a2:	bf00      	nop
 80005a4:	40010c00 	.word	0x40010c00
 80005a8:	200000a0 	.word	0x200000a0
 80005ac:	0800543c 	.word	0x0800543c
 80005b0:	0800546c 	.word	0x0800546c

080005b4 <FloorSelectionTask>:



/* Floor Selection Task */
void FloorSelectionTask(void const * argument)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b0a0      	sub	sp, #128	@ 0x80
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
    char command_buffer[100];

    for (;;) {
    	CLI_Transmit("\r\n Enter a command: ");
 80005bc:	4858      	ldr	r0, [pc, #352]	@ (8000720 <FloorSelectionTask+0x16c>)
 80005be:	f7ff fe39 	bl	8000234 <CLI_Transmit>

    	        if (CLI_Receive(command_buffer, sizeof(command_buffer))) {
 80005c2:	f107 031c 	add.w	r3, r7, #28
 80005c6:	2164      	movs	r1, #100	@ 0x64
 80005c8:	4618      	mov	r0, r3
 80005ca:	f7ff fe49 	bl	8000260 <CLI_Receive>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d0f3      	beq.n	80005bc <FloorSelectionTask+0x8>
    	            char *endPtr;
    	            int floor = strtol(command_buffer, &endPtr, 10);
 80005d4:	f107 0118 	add.w	r1, r7, #24
 80005d8:	f107 031c 	add.w	r3, r7, #28
 80005dc:	220a      	movs	r2, #10
 80005de:	4618      	mov	r0, r3
 80005e0:	f004 f81c 	bl	800461c <strtol>
 80005e4:	4603      	mov	r3, r0
 80005e6:	617b      	str	r3, [r7, #20]

    	            if (*endPtr == '\0' && floor >= 1 && floor <= 5) {
 80005e8:	69bb      	ldr	r3, [r7, #24]
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d124      	bne.n	800063a <FloorSelectionTask+0x86>
 80005f0:	697b      	ldr	r3, [r7, #20]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	dd21      	ble.n	800063a <FloorSelectionTask+0x86>
 80005f6:	697b      	ldr	r3, [r7, #20]
 80005f8:	2b05      	cmp	r3, #5
 80005fa:	dc1e      	bgt.n	800063a <FloorSelectionTask+0x86>
    	                /* User entered a valid floor number */
    	                if (xQueueSend(floorQueue, &floor, pdMS_TO_TICKS(100)) != pdPASS) {
 80005fc:	4b49      	ldr	r3, [pc, #292]	@ (8000724 <FloorSelectionTask+0x170>)
 80005fe:	6818      	ldr	r0, [r3, #0]
 8000600:	f107 0114 	add.w	r1, r7, #20
 8000604:	2300      	movs	r3, #0
 8000606:	2264      	movs	r2, #100	@ 0x64
 8000608:	f002 fa1a 	bl	8002a40 <xQueueGenericSend>
 800060c:	4603      	mov	r3, r0
 800060e:	2b01      	cmp	r3, #1
 8000610:	d003      	beq.n	800061a <FloorSelectionTask+0x66>
    	                    CLI_Transmit("\r\n Failed to queue call request.\r\n");
 8000612:	4845      	ldr	r0, [pc, #276]	@ (8000728 <FloorSelectionTask+0x174>)
 8000614:	f7ff fe0e 	bl	8000234 <CLI_Transmit>
    	                if (xQueueSend(floorQueue, &floor, pdMS_TO_TICKS(100)) != pdPASS) {
 8000618:	e081      	b.n	800071e <FloorSelectionTask+0x16a>
    	                } else {
    	                    CLI_Transmit("\r\n Elevator called to floor ");
 800061a:	4844      	ldr	r0, [pc, #272]	@ (800072c <FloorSelectionTask+0x178>)
 800061c:	f7ff fe0a 	bl	8000234 <CLI_Transmit>
    	                    char floor_message[10];
    	                    sprintf(floor_message, "%d.\r\n", floor);
 8000620:	697a      	ldr	r2, [r7, #20]
 8000622:	f107 0308 	add.w	r3, r7, #8
 8000626:	4942      	ldr	r1, [pc, #264]	@ (8000730 <FloorSelectionTask+0x17c>)
 8000628:	4618      	mov	r0, r3
 800062a:	f004 f801 	bl	8004630 <siprintf>
    	                    CLI_Transmit(floor_message);
 800062e:	f107 0308 	add.w	r3, r7, #8
 8000632:	4618      	mov	r0, r3
 8000634:	f7ff fdfe 	bl	8000234 <CLI_Transmit>
    	                if (xQueueSend(floorQueue, &floor, pdMS_TO_TICKS(100)) != pdPASS) {
 8000638:	e071      	b.n	800071e <FloorSelectionTask+0x16a>
    	                }
    	            } else if (strcmp(command_buffer, "open") == 0) {
 800063a:	f107 031c 	add.w	r3, r7, #28
 800063e:	493d      	ldr	r1, [pc, #244]	@ (8000734 <FloorSelectionTask+0x180>)
 8000640:	4618      	mov	r0, r3
 8000642:	f7ff fd85 	bl	8000150 <strcmp>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d11a      	bne.n	8000682 <FloorSelectionTask+0xce>
    	                if (doorOpen) {
 800064c:	4b3a      	ldr	r3, [pc, #232]	@ (8000738 <FloorSelectionTask+0x184>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d003      	beq.n	800065c <FloorSelectionTask+0xa8>
    	                    CLI_Transmit("\r\n The door is already open.\r\n");
 8000654:	4839      	ldr	r0, [pc, #228]	@ (800073c <FloorSelectionTask+0x188>)
 8000656:	f7ff fded 	bl	8000234 <CLI_Transmit>
 800065a:	e7af      	b.n	80005bc <FloorSelectionTask+0x8>
    	                } else {
    	                    doorOpen = 1;
 800065c:	4b36      	ldr	r3, [pc, #216]	@ (8000738 <FloorSelectionTask+0x184>)
 800065e:	2201      	movs	r2, #1
 8000660:	601a      	str	r2, [r3, #0]
    	                    CLI_Transmit("\r\n The door is now open.\r\n");
 8000662:	4837      	ldr	r0, [pc, #220]	@ (8000740 <FloorSelectionTask+0x18c>)
 8000664:	f7ff fde6 	bl	8000234 <CLI_Transmit>
    	                    osDelay(3000); // Wait before auto-closing
 8000668:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800066c:	f002 f860 	bl	8002730 <osDelay>
    	                    doorOpen = 0;
 8000670:	4b31      	ldr	r3, [pc, #196]	@ (8000738 <FloorSelectionTask+0x184>)
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
    	                    CLI_Transmit("\r\n The door has closed automatically.\r\n");
 8000676:	4833      	ldr	r0, [pc, #204]	@ (8000744 <FloorSelectionTask+0x190>)
 8000678:	f7ff fddc 	bl	8000234 <CLI_Transmit>
    	                    PromptFloorInput();
 800067c:	f7ff ff14 	bl	80004a8 <PromptFloorInput>
 8000680:	e79c      	b.n	80005bc <FloorSelectionTask+0x8>
    	                }
    	            } else if (strcmp(command_buffer, "close") == 0) {
 8000682:	f107 031c 	add.w	r3, r7, #28
 8000686:	4930      	ldr	r1, [pc, #192]	@ (8000748 <FloorSelectionTask+0x194>)
 8000688:	4618      	mov	r0, r3
 800068a:	f7ff fd61 	bl	8000150 <strcmp>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d110      	bne.n	80006b6 <FloorSelectionTask+0x102>
    	                if (!doorOpen) {
 8000694:	4b28      	ldr	r3, [pc, #160]	@ (8000738 <FloorSelectionTask+0x184>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d103      	bne.n	80006a4 <FloorSelectionTask+0xf0>
    	                    CLI_Transmit("\r\n The door is already closed.\r\n");
 800069c:	482b      	ldr	r0, [pc, #172]	@ (800074c <FloorSelectionTask+0x198>)
 800069e:	f7ff fdc9 	bl	8000234 <CLI_Transmit>
 80006a2:	e78b      	b.n	80005bc <FloorSelectionTask+0x8>
    	                } else {
    	                    doorOpen = 0;
 80006a4:	4b24      	ldr	r3, [pc, #144]	@ (8000738 <FloorSelectionTask+0x184>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]
    	                    CLI_Transmit("\r\n The door is now closed.\r\n");
 80006aa:	4829      	ldr	r0, [pc, #164]	@ (8000750 <FloorSelectionTask+0x19c>)
 80006ac:	f7ff fdc2 	bl	8000234 <CLI_Transmit>
    	                    PromptFloorInput();
 80006b0:	f7ff fefa 	bl	80004a8 <PromptFloorInput>
 80006b4:	e782      	b.n	80005bc <FloorSelectionTask+0x8>
    	                }
    	            } else if (strcmp(command_buffer, "M") == 0) {
 80006b6:	f107 031c 	add.w	r3, r7, #28
 80006ba:	4926      	ldr	r1, [pc, #152]	@ (8000754 <FloorSelectionTask+0x1a0>)
 80006bc:	4618      	mov	r0, r3
 80006be:	f7ff fd47 	bl	8000150 <strcmp>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d127      	bne.n	8000718 <FloorSelectionTask+0x164>
    	                elevatorState = ELEVATOR_MAINTENANCE;
 80006c8:	4b23      	ldr	r3, [pc, #140]	@ (8000758 <FloorSelectionTask+0x1a4>)
 80006ca:	2201      	movs	r2, #1
 80006cc:	701a      	strb	r2, [r3, #0]
    	                update_cli_display1();
 80006ce:	f7ff fe5f 	bl	8000390 <update_cli_display1>

    	                CLI_Transmit("\r\n enter 'exit' when done with the maintenance : ");
 80006d2:	4822      	ldr	r0, [pc, #136]	@ (800075c <FloorSelectionTask+0x1a8>)
 80006d4:	f7ff fdae 	bl	8000234 <CLI_Transmit>

    	                    if (CLI_Receive(command_buffer, sizeof(command_buffer))) {
 80006d8:	f107 031c 	add.w	r3, r7, #28
 80006dc:	2164      	movs	r1, #100	@ 0x64
 80006de:	4618      	mov	r0, r3
 80006e0:	f7ff fdbe 	bl	8000260 <CLI_Receive>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	f43f af68 	beq.w	80005bc <FloorSelectionTask+0x8>
    	                        if (strcmp(command_buffer, "exit") == 0) {
 80006ec:	f107 031c 	add.w	r3, r7, #28
 80006f0:	491b      	ldr	r1, [pc, #108]	@ (8000760 <FloorSelectionTask+0x1ac>)
 80006f2:	4618      	mov	r0, r3
 80006f4:	f7ff fd2c 	bl	8000150 <strcmp>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d108      	bne.n	8000710 <FloorSelectionTask+0x15c>
    	                            CLI_Transmit("\r\n Exiting maintenance mode. Returning to normal operation.\r\n");
 80006fe:	4819      	ldr	r0, [pc, #100]	@ (8000764 <FloorSelectionTask+0x1b0>)
 8000700:	f7ff fd98 	bl	8000234 <CLI_Transmit>
    	                            elevatorState = ELEVATOR_IDLE;
 8000704:	4b14      	ldr	r3, [pc, #80]	@ (8000758 <FloorSelectionTask+0x1a4>)
 8000706:	2200      	movs	r2, #0
 8000708:	701a      	strb	r2, [r3, #0]
    	                            update_cli_display1();
 800070a:	f7ff fe41 	bl	8000390 <update_cli_display1>
 800070e:	e755      	b.n	80005bc <FloorSelectionTask+0x8>
    	                        } else {
    	                            CLI_Transmit("\r\n Invalid maintenance command.\r\n");
 8000710:	4815      	ldr	r0, [pc, #84]	@ (8000768 <FloorSelectionTask+0x1b4>)
 8000712:	f7ff fd8f 	bl	8000234 <CLI_Transmit>
 8000716:	e751      	b.n	80005bc <FloorSelectionTask+0x8>
    	                        }
    	                    }

    	            }else {
    	                CLI_Transmit("\r\n Invalid command.\r\n");
 8000718:	4814      	ldr	r0, [pc, #80]	@ (800076c <FloorSelectionTask+0x1b8>)
 800071a:	f7ff fd8b 	bl	8000234 <CLI_Transmit>
    	CLI_Transmit("\r\n Enter a command: ");
 800071e:	e74d      	b.n	80005bc <FloorSelectionTask+0x8>
 8000720:	080054a4 	.word	0x080054a4
 8000724:	20000094 	.word	0x20000094
 8000728:	080054bc 	.word	0x080054bc
 800072c:	080054e0 	.word	0x080054e0
 8000730:	08005500 	.word	0x08005500
 8000734:	08005508 	.word	0x08005508
 8000738:	2000009c 	.word	0x2000009c
 800073c:	08005510 	.word	0x08005510
 8000740:	08005530 	.word	0x08005530
 8000744:	0800554c 	.word	0x0800554c
 8000748:	08005574 	.word	0x08005574
 800074c:	0800557c 	.word	0x0800557c
 8000750:	080055a0 	.word	0x080055a0
 8000754:	080055c0 	.word	0x080055c0
 8000758:	20000098 	.word	0x20000098
 800075c:	080055c4 	.word	0x080055c4
 8000760:	080055f8 	.word	0x080055f8
 8000764:	08005600 	.word	0x08005600
 8000768:	08005640 	.word	0x08005640
 800076c:	08005664 	.word	0x08005664

08000770 <ElevatorMovementTask>:



/* Elevator Movement Task */
void ElevatorMovementTask(void const * argument)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b086      	sub	sp, #24
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
    int targetFloor;

    for (;;) {
        // Wait for a floor request
        if (xQueueReceive(floorQueue, &targetFloor, portMAX_DELAY) == pdPASS) {
 8000778:	4b3e      	ldr	r3, [pc, #248]	@ (8000874 <ElevatorMovementTask+0x104>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	f107 0114 	add.w	r1, r7, #20
 8000780:	f04f 32ff 	mov.w	r2, #4294967295
 8000784:	4618      	mov	r0, r3
 8000786:	f002 fa5d 	bl	8002c44 <xQueueReceive>
 800078a:	4603      	mov	r3, r0
 800078c:	2b01      	cmp	r3, #1
 800078e:	d1f3      	bne.n	8000778 <ElevatorMovementTask+0x8>
            elevatorIdle = 0;
 8000790:	4b39      	ldr	r3, [pc, #228]	@ (8000878 <ElevatorMovementTask+0x108>)
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
            elevatorMoving = (currentFloor < targetFloor) ? 1 : 0;
 8000796:	4b39      	ldr	r3, [pc, #228]	@ (800087c <ElevatorMovementTask+0x10c>)
 8000798:	681a      	ldr	r2, [r3, #0]
 800079a:	697b      	ldr	r3, [r7, #20]
 800079c:	429a      	cmp	r2, r3
 800079e:	bfb4      	ite	lt
 80007a0:	2301      	movlt	r3, #1
 80007a2:	2300      	movge	r3, #0
 80007a4:	b2db      	uxtb	r3, r3
 80007a6:	461a      	mov	r2, r3
 80007a8:	4b35      	ldr	r3, [pc, #212]	@ (8000880 <ElevatorMovementTask+0x110>)
 80007aa:	601a      	str	r2, [r3, #0]

            while (currentFloor != targetFloor) {
 80007ac:	e02d      	b.n	800080a <ElevatorMovementTask+0x9a>
                // Check if emergency is activated
                if (emergencyActivated == 1 ) {
 80007ae:	4b35      	ldr	r3, [pc, #212]	@ (8000884 <ElevatorMovementTask+0x114>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	2b01      	cmp	r3, #1
 80007b4:	d115      	bne.n	80007e2 <ElevatorMovementTask+0x72>

                    // Stop movement
                    elevatorMoving = -1; // Stop movement
 80007b6:	4b32      	ldr	r3, [pc, #200]	@ (8000880 <ElevatorMovementTask+0x110>)
 80007b8:	f04f 32ff 	mov.w	r2, #4294967295
 80007bc:	601a      	str	r2, [r3, #0]
                    elevatorIdle = 0;
 80007be:	4b2e      	ldr	r3, [pc, #184]	@ (8000878 <ElevatorMovementTask+0x108>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]


                    // Update display and wait for emergency to be deactivated

                    while (emergencyActivated==1) {
 80007c4:	e003      	b.n	80007ce <ElevatorMovementTask+0x5e>
                        osDelay(500);
 80007c6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80007ca:	f001 ffb1 	bl	8002730 <osDelay>
                    while (emergencyActivated==1) {
 80007ce:	4b2d      	ldr	r3, [pc, #180]	@ (8000884 <ElevatorMovementTask+0x114>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	2b01      	cmp	r3, #1
 80007d4:	d0f7      	beq.n	80007c6 <ElevatorMovementTask+0x56>
                    }

                    elevatorIdle = 1;
 80007d6:	4b28      	ldr	r3, [pc, #160]	@ (8000878 <ElevatorMovementTask+0x108>)
 80007d8:	2201      	movs	r2, #1
 80007da:	601a      	str	r2, [r3, #0]
                    update_cli_display();
 80007dc:	f7ff fd86 	bl	80002ec <update_cli_display>
                    break; // Exit the movement loop
 80007e0:	e018      	b.n	8000814 <ElevatorMovementTask+0xa4>


                }

                // Normal movement logic
				osDelay(1000);
 80007e2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80007e6:	f001 ffa3 	bl	8002730 <osDelay>
				currentFloor += (currentFloor < targetFloor) ? 1 : -1;
 80007ea:	4b24      	ldr	r3, [pc, #144]	@ (800087c <ElevatorMovementTask+0x10c>)
 80007ec:	681a      	ldr	r2, [r3, #0]
 80007ee:	697b      	ldr	r3, [r7, #20]
 80007f0:	429a      	cmp	r2, r3
 80007f2:	da01      	bge.n	80007f8 <ElevatorMovementTask+0x88>
 80007f4:	2201      	movs	r2, #1
 80007f6:	e001      	b.n	80007fc <ElevatorMovementTask+0x8c>
 80007f8:	f04f 32ff 	mov.w	r2, #4294967295
 80007fc:	4b1f      	ldr	r3, [pc, #124]	@ (800087c <ElevatorMovementTask+0x10c>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4413      	add	r3, r2
 8000802:	4a1e      	ldr	r2, [pc, #120]	@ (800087c <ElevatorMovementTask+0x10c>)
 8000804:	6013      	str	r3, [r2, #0]
				update_cli_display();
 8000806:	f7ff fd71 	bl	80002ec <update_cli_display>
            while (currentFloor != targetFloor) {
 800080a:	4b1c      	ldr	r3, [pc, #112]	@ (800087c <ElevatorMovementTask+0x10c>)
 800080c:	681a      	ldr	r2, [r3, #0]
 800080e:	697b      	ldr	r3, [r7, #20]
 8000810:	429a      	cmp	r2, r3
 8000812:	d1cc      	bne.n	80007ae <ElevatorMovementTask+0x3e>
            }

            // Open the door at the target floor if no emergency is activated
            if (emergencyActivated == 0) {
 8000814:	4b1b      	ldr	r3, [pc, #108]	@ (8000884 <ElevatorMovementTask+0x114>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d1ad      	bne.n	8000778 <ElevatorMovementTask+0x8>
            	//xQueueReset(floorQueue); // Clear all pending requests
                elevatorIdle = 1;
 800081c:	4b16      	ldr	r3, [pc, #88]	@ (8000878 <ElevatorMovementTask+0x108>)
 800081e:	2201      	movs	r2, #1
 8000820:	601a      	str	r2, [r3, #0]
                doorOpen = 1;
 8000822:	4b19      	ldr	r3, [pc, #100]	@ (8000888 <ElevatorMovementTask+0x118>)
 8000824:	2201      	movs	r2, #1
 8000826:	601a      	str	r2, [r3, #0]
                update_cli_display();
 8000828:	f7ff fd60 	bl	80002ec <update_cli_display>
                CLI_Transmit("\r\n Arrived at floor ");
 800082c:	4817      	ldr	r0, [pc, #92]	@ (800088c <ElevatorMovementTask+0x11c>)
 800082e:	f7ff fd01 	bl	8000234 <CLI_Transmit>
                char floor_message[10];
                sprintf(floor_message, "%d.\r\n", currentFloor);
 8000832:	4b12      	ldr	r3, [pc, #72]	@ (800087c <ElevatorMovementTask+0x10c>)
 8000834:	681a      	ldr	r2, [r3, #0]
 8000836:	f107 0308 	add.w	r3, r7, #8
 800083a:	4915      	ldr	r1, [pc, #84]	@ (8000890 <ElevatorMovementTask+0x120>)
 800083c:	4618      	mov	r0, r3
 800083e:	f003 fef7 	bl	8004630 <siprintf>
                CLI_Transmit(floor_message);
 8000842:	f107 0308 	add.w	r3, r7, #8
 8000846:	4618      	mov	r0, r3
 8000848:	f7ff fcf4 	bl	8000234 <CLI_Transmit>
                osDelay(3000); // Keep the door open for 3 seconds
 800084c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000850:	f001 ff6e 	bl	8002730 <osDelay>

                // Close the door
                doorOpen = 0;
 8000854:	4b0c      	ldr	r3, [pc, #48]	@ (8000888 <ElevatorMovementTask+0x118>)
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
                update_cli_display();
 800085a:	f7ff fd47 	bl	80002ec <update_cli_display>
                CLI_Transmit("\r\n Door is closing...\r\n");
 800085e:	480d      	ldr	r0, [pc, #52]	@ (8000894 <ElevatorMovementTask+0x124>)
 8000860:	f7ff fce8 	bl	8000234 <CLI_Transmit>
                osDelay(3000);
 8000864:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000868:	f001 ff62 	bl	8002730 <osDelay>

                // Re-prompt the user to enter a command
                CLI_Transmit("\r\n Enter a command (open/close/E/M): ");
 800086c:	480a      	ldr	r0, [pc, #40]	@ (8000898 <ElevatorMovementTask+0x128>)
 800086e:	f7ff fce1 	bl	8000234 <CLI_Transmit>
        if (xQueueReceive(floorQueue, &targetFloor, portMAX_DELAY) == pdPASS) {
 8000872:	e781      	b.n	8000778 <ElevatorMovementTask+0x8>
 8000874:	20000094 	.word	0x20000094
 8000878:	20000004 	.word	0x20000004
 800087c:	20000000 	.word	0x20000000
 8000880:	20000008 	.word	0x20000008
 8000884:	200000a0 	.word	0x200000a0
 8000888:	2000009c 	.word	0x2000009c
 800088c:	0800567c 	.word	0x0800567c
 8000890:	08005500 	.word	0x08005500
 8000894:	08005694 	.word	0x08005694
 8000898:	080056ac 	.word	0x080056ac

0800089c <MX_FREERTOS_Init>:
/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

extern UART_HandleTypeDef huart2;

void MX_FREERTOS_Init(void) {
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
    InitializeElevatorSystem(&huart2);
 80008a0:	4802      	ldr	r0, [pc, #8]	@ (80008ac <MX_FREERTOS_Init+0x10>)
 80008a2:	f7ff fc67 	bl	8000174 <InitializeElevatorSystem>
}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	20000340 	.word	0x20000340

080008b0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80008b0:	b480      	push	{r7}
 80008b2:	b085      	sub	sp, #20
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	60f8      	str	r0, [r7, #12]
 80008b8:	60b9      	str	r1, [r7, #8]
 80008ba:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	4a06      	ldr	r2, [pc, #24]	@ (80008d8 <vApplicationGetIdleTaskMemory+0x28>)
 80008c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80008c2:	68bb      	ldr	r3, [r7, #8]
 80008c4:	4a05      	ldr	r2, [pc, #20]	@ (80008dc <vApplicationGetIdleTaskMemory+0x2c>)
 80008c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	2280      	movs	r2, #128	@ 0x80
 80008cc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80008ce:	bf00      	nop
 80008d0:	3714      	adds	r7, #20
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bc80      	pop	{r7}
 80008d6:	4770      	bx	lr
 80008d8:	200000a4 	.word	0x200000a4
 80008dc:	200000f8 	.word	0x200000f8

080008e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008e4:	f000 fa5a 	bl	8000d9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008e8:	f000 f80e 	bl	8000908 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008ec:	f000 f8c6 	bl	8000a7c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80008f0:	f000 f89a 	bl	8000a28 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80008f4:	f000 f84a 	bl	800098c <MX_TIM2_Init>


  // Call FreeRTOS Initialization
  MX_FREERTOS_Init();
 80008f8:	f7ff ffd0 	bl	800089c <MX_FREERTOS_Init>

  // Start FreeRTOS scheduler
  osKernelStart();
 80008fc:	f001 fec5 	bl	800268a <osKernelStart>
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000900:	f001 fec3 	bl	800268a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000904:	bf00      	nop
 8000906:	e7fd      	b.n	8000904 <main+0x24>

08000908 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b090      	sub	sp, #64	@ 0x40
 800090c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800090e:	f107 0318 	add.w	r3, r7, #24
 8000912:	2228      	movs	r2, #40	@ 0x28
 8000914:	2100      	movs	r1, #0
 8000916:	4618      	mov	r0, r3
 8000918:	f003 feaa 	bl	8004670 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800091c:	1d3b      	adds	r3, r7, #4
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	605a      	str	r2, [r3, #4]
 8000924:	609a      	str	r2, [r3, #8]
 8000926:	60da      	str	r2, [r3, #12]
 8000928:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800092a:	2302      	movs	r3, #2
 800092c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800092e:	2301      	movs	r3, #1
 8000930:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000932:	2310      	movs	r3, #16
 8000934:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000936:	2302      	movs	r3, #2
 8000938:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800093a:	2300      	movs	r3, #0
 800093c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800093e:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000942:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000944:	f107 0318 	add.w	r3, r7, #24
 8000948:	4618      	mov	r0, r3
 800094a:	f000 fd43 	bl	80013d4 <HAL_RCC_OscConfig>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000954:	f000 f8f8 	bl	8000b48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000958:	230f      	movs	r3, #15
 800095a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800095c:	2302      	movs	r3, #2
 800095e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000960:	2300      	movs	r3, #0
 8000962:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000964:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000968:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800096a:	2300      	movs	r3, #0
 800096c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800096e:	1d3b      	adds	r3, r7, #4
 8000970:	2102      	movs	r1, #2
 8000972:	4618      	mov	r0, r3
 8000974:	f000 ffb0 	bl	80018d8 <HAL_RCC_ClockConfig>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800097e:	f000 f8e3 	bl	8000b48 <Error_Handler>
  }
}
 8000982:	bf00      	nop
 8000984:	3740      	adds	r7, #64	@ 0x40
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
	...

0800098c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b086      	sub	sp, #24
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000992:	f107 0308 	add.w	r3, r7, #8
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	605a      	str	r2, [r3, #4]
 800099c:	609a      	str	r2, [r3, #8]
 800099e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009a0:	463b      	mov	r3, r7
 80009a2:	2200      	movs	r2, #0
 80009a4:	601a      	str	r2, [r3, #0]
 80009a6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009a8:	4b1e      	ldr	r3, [pc, #120]	@ (8000a24 <MX_TIM2_Init+0x98>)
 80009aa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80009ae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7199;
 80009b0:	4b1c      	ldr	r3, [pc, #112]	@ (8000a24 <MX_TIM2_Init+0x98>)
 80009b2:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 80009b6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009b8:	4b1a      	ldr	r3, [pc, #104]	@ (8000a24 <MX_TIM2_Init+0x98>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000;
 80009be:	4b19      	ldr	r3, [pc, #100]	@ (8000a24 <MX_TIM2_Init+0x98>)
 80009c0:	f242 7210 	movw	r2, #10000	@ 0x2710
 80009c4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009c6:	4b17      	ldr	r3, [pc, #92]	@ (8000a24 <MX_TIM2_Init+0x98>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009cc:	4b15      	ldr	r3, [pc, #84]	@ (8000a24 <MX_TIM2_Init+0x98>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009d2:	4814      	ldr	r0, [pc, #80]	@ (8000a24 <MX_TIM2_Init+0x98>)
 80009d4:	f001 f90e 	bl	8001bf4 <HAL_TIM_Base_Init>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80009de:	f000 f8b3 	bl	8000b48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009e6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009e8:	f107 0308 	add.w	r3, r7, #8
 80009ec:	4619      	mov	r1, r3
 80009ee:	480d      	ldr	r0, [pc, #52]	@ (8000a24 <MX_TIM2_Init+0x98>)
 80009f0:	f001 f94f 	bl	8001c92 <HAL_TIM_ConfigClockSource>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80009fa:	f000 f8a5 	bl	8000b48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009fe:	2300      	movs	r3, #0
 8000a00:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a02:	2300      	movs	r3, #0
 8000a04:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a06:	463b      	mov	r3, r7
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4806      	ldr	r0, [pc, #24]	@ (8000a24 <MX_TIM2_Init+0x98>)
 8000a0c:	f001 fb0c 	bl	8002028 <HAL_TIMEx_MasterConfigSynchronization>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000a16:	f000 f897 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a1a:	bf00      	nop
 8000a1c:	3718      	adds	r7, #24
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	200002f8 	.word	0x200002f8

08000a28 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a2c:	4b11      	ldr	r3, [pc, #68]	@ (8000a74 <MX_USART2_UART_Init+0x4c>)
 8000a2e:	4a12      	ldr	r2, [pc, #72]	@ (8000a78 <MX_USART2_UART_Init+0x50>)
 8000a30:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a32:	4b10      	ldr	r3, [pc, #64]	@ (8000a74 <MX_USART2_UART_Init+0x4c>)
 8000a34:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a38:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000a74 <MX_USART2_UART_Init+0x4c>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a40:	4b0c      	ldr	r3, [pc, #48]	@ (8000a74 <MX_USART2_UART_Init+0x4c>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a46:	4b0b      	ldr	r3, [pc, #44]	@ (8000a74 <MX_USART2_UART_Init+0x4c>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a4c:	4b09      	ldr	r3, [pc, #36]	@ (8000a74 <MX_USART2_UART_Init+0x4c>)
 8000a4e:	220c      	movs	r2, #12
 8000a50:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a52:	4b08      	ldr	r3, [pc, #32]	@ (8000a74 <MX_USART2_UART_Init+0x4c>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a58:	4b06      	ldr	r3, [pc, #24]	@ (8000a74 <MX_USART2_UART_Init+0x4c>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a5e:	4805      	ldr	r0, [pc, #20]	@ (8000a74 <MX_USART2_UART_Init+0x4c>)
 8000a60:	f001 fb40 	bl	80020e4 <HAL_UART_Init>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a6a:	f000 f86d 	bl	8000b48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	20000340 	.word	0x20000340
 8000a78:	40004400 	.word	0x40004400

08000a7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b088      	sub	sp, #32
 8000a80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a82:	f107 0310 	add.w	r3, r7, #16
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	605a      	str	r2, [r3, #4]
 8000a8c:	609a      	str	r2, [r3, #8]
 8000a8e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a90:	4b28      	ldr	r3, [pc, #160]	@ (8000b34 <MX_GPIO_Init+0xb8>)
 8000a92:	699b      	ldr	r3, [r3, #24]
 8000a94:	4a27      	ldr	r2, [pc, #156]	@ (8000b34 <MX_GPIO_Init+0xb8>)
 8000a96:	f043 0310 	orr.w	r3, r3, #16
 8000a9a:	6193      	str	r3, [r2, #24]
 8000a9c:	4b25      	ldr	r3, [pc, #148]	@ (8000b34 <MX_GPIO_Init+0xb8>)
 8000a9e:	699b      	ldr	r3, [r3, #24]
 8000aa0:	f003 0310 	and.w	r3, r3, #16
 8000aa4:	60fb      	str	r3, [r7, #12]
 8000aa6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000aa8:	4b22      	ldr	r3, [pc, #136]	@ (8000b34 <MX_GPIO_Init+0xb8>)
 8000aaa:	699b      	ldr	r3, [r3, #24]
 8000aac:	4a21      	ldr	r2, [pc, #132]	@ (8000b34 <MX_GPIO_Init+0xb8>)
 8000aae:	f043 0320 	orr.w	r3, r3, #32
 8000ab2:	6193      	str	r3, [r2, #24]
 8000ab4:	4b1f      	ldr	r3, [pc, #124]	@ (8000b34 <MX_GPIO_Init+0xb8>)
 8000ab6:	699b      	ldr	r3, [r3, #24]
 8000ab8:	f003 0320 	and.w	r3, r3, #32
 8000abc:	60bb      	str	r3, [r7, #8]
 8000abe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac0:	4b1c      	ldr	r3, [pc, #112]	@ (8000b34 <MX_GPIO_Init+0xb8>)
 8000ac2:	699b      	ldr	r3, [r3, #24]
 8000ac4:	4a1b      	ldr	r2, [pc, #108]	@ (8000b34 <MX_GPIO_Init+0xb8>)
 8000ac6:	f043 0304 	orr.w	r3, r3, #4
 8000aca:	6193      	str	r3, [r2, #24]
 8000acc:	4b19      	ldr	r3, [pc, #100]	@ (8000b34 <MX_GPIO_Init+0xb8>)
 8000ace:	699b      	ldr	r3, [r3, #24]
 8000ad0:	f003 0304 	and.w	r3, r3, #4
 8000ad4:	607b      	str	r3, [r7, #4]
 8000ad6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad8:	4b16      	ldr	r3, [pc, #88]	@ (8000b34 <MX_GPIO_Init+0xb8>)
 8000ada:	699b      	ldr	r3, [r3, #24]
 8000adc:	4a15      	ldr	r2, [pc, #84]	@ (8000b34 <MX_GPIO_Init+0xb8>)
 8000ade:	f043 0308 	orr.w	r3, r3, #8
 8000ae2:	6193      	str	r3, [r2, #24]
 8000ae4:	4b13      	ldr	r3, [pc, #76]	@ (8000b34 <MX_GPIO_Init+0xb8>)
 8000ae6:	699b      	ldr	r3, [r3, #24]
 8000ae8:	f003 0308 	and.w	r3, r3, #8
 8000aec:	603b      	str	r3, [r7, #0]
 8000aee:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000af0:	2200      	movs	r2, #0
 8000af2:	2120      	movs	r1, #32
 8000af4:	4810      	ldr	r0, [pc, #64]	@ (8000b38 <MX_GPIO_Init+0xbc>)
 8000af6:	f000 fc32 	bl	800135e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000afa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000afe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b00:	4b0e      	ldr	r3, [pc, #56]	@ (8000b3c <MX_GPIO_Init+0xc0>)
 8000b02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b08:	f107 0310 	add.w	r3, r7, #16
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	480c      	ldr	r0, [pc, #48]	@ (8000b40 <MX_GPIO_Init+0xc4>)
 8000b10:	f000 fa8a 	bl	8001028 <HAL_GPIO_Init>

  /* Configure GPIO pin for Emergency Button (PB0) */
 GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b14:	2301      	movs	r3, #1
 8000b16:	613b      	str	r3, [r7, #16]
 GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	617b      	str	r3, [r7, #20]
 GPIO_InitStruct.Pull = GPIO_PULLUP;  // Use a pull-up resistor
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	61bb      	str	r3, [r7, #24]
 HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b20:	f107 0310 	add.w	r3, r7, #16
 8000b24:	4619      	mov	r1, r3
 8000b26:	4807      	ldr	r0, [pc, #28]	@ (8000b44 <MX_GPIO_Init+0xc8>)
 8000b28:	f000 fa7e 	bl	8001028 <HAL_GPIO_Init>
}
 8000b2c:	bf00      	nop
 8000b2e:	3720      	adds	r7, #32
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	40021000 	.word	0x40021000
 8000b38:	40010800 	.word	0x40010800
 8000b3c:	10110000 	.word	0x10110000
 8000b40:	40011000 	.word	0x40011000
 8000b44:	40010c00 	.word	0x40010c00

08000b48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b4c:	b672      	cpsid	i
}
 8000b4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b50:	bf00      	nop
 8000b52:	e7fd      	b.n	8000b50 <Error_Handler+0x8>

08000b54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b5a:	4b18      	ldr	r3, [pc, #96]	@ (8000bbc <HAL_MspInit+0x68>)
 8000b5c:	699b      	ldr	r3, [r3, #24]
 8000b5e:	4a17      	ldr	r2, [pc, #92]	@ (8000bbc <HAL_MspInit+0x68>)
 8000b60:	f043 0301 	orr.w	r3, r3, #1
 8000b64:	6193      	str	r3, [r2, #24]
 8000b66:	4b15      	ldr	r3, [pc, #84]	@ (8000bbc <HAL_MspInit+0x68>)
 8000b68:	699b      	ldr	r3, [r3, #24]
 8000b6a:	f003 0301 	and.w	r3, r3, #1
 8000b6e:	60bb      	str	r3, [r7, #8]
 8000b70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b72:	4b12      	ldr	r3, [pc, #72]	@ (8000bbc <HAL_MspInit+0x68>)
 8000b74:	69db      	ldr	r3, [r3, #28]
 8000b76:	4a11      	ldr	r2, [pc, #68]	@ (8000bbc <HAL_MspInit+0x68>)
 8000b78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b7c:	61d3      	str	r3, [r2, #28]
 8000b7e:	4b0f      	ldr	r3, [pc, #60]	@ (8000bbc <HAL_MspInit+0x68>)
 8000b80:	69db      	ldr	r3, [r3, #28]
 8000b82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b86:	607b      	str	r3, [r7, #4]
 8000b88:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	210f      	movs	r1, #15
 8000b8e:	f06f 0001 	mvn.w	r0, #1
 8000b92:	f000 fa20 	bl	8000fd6 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b96:	4b0a      	ldr	r3, [pc, #40]	@ (8000bc0 <HAL_MspInit+0x6c>)
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000baa:	60fb      	str	r3, [r7, #12]
 8000bac:	4a04      	ldr	r2, [pc, #16]	@ (8000bc0 <HAL_MspInit+0x6c>)
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bb2:	bf00      	nop
 8000bb4:	3710      	adds	r7, #16
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40021000 	.word	0x40021000
 8000bc0:	40010000 	.word	0x40010000

08000bc4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b085      	sub	sp, #20
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000bd4:	d10b      	bne.n	8000bee <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bd6:	4b08      	ldr	r3, [pc, #32]	@ (8000bf8 <HAL_TIM_Base_MspInit+0x34>)
 8000bd8:	69db      	ldr	r3, [r3, #28]
 8000bda:	4a07      	ldr	r2, [pc, #28]	@ (8000bf8 <HAL_TIM_Base_MspInit+0x34>)
 8000bdc:	f043 0301 	orr.w	r3, r3, #1
 8000be0:	61d3      	str	r3, [r2, #28]
 8000be2:	4b05      	ldr	r3, [pc, #20]	@ (8000bf8 <HAL_TIM_Base_MspInit+0x34>)
 8000be4:	69db      	ldr	r3, [r3, #28]
 8000be6:	f003 0301 	and.w	r3, r3, #1
 8000bea:	60fb      	str	r3, [r7, #12]
 8000bec:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000bee:	bf00      	nop
 8000bf0:	3714      	adds	r7, #20
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bc80      	pop	{r7}
 8000bf6:	4770      	bx	lr
 8000bf8:	40021000 	.word	0x40021000

08000bfc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b088      	sub	sp, #32
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c04:	f107 0310 	add.w	r3, r7, #16
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4a15      	ldr	r2, [pc, #84]	@ (8000c6c <HAL_UART_MspInit+0x70>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d123      	bne.n	8000c64 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c1c:	4b14      	ldr	r3, [pc, #80]	@ (8000c70 <HAL_UART_MspInit+0x74>)
 8000c1e:	69db      	ldr	r3, [r3, #28]
 8000c20:	4a13      	ldr	r2, [pc, #76]	@ (8000c70 <HAL_UART_MspInit+0x74>)
 8000c22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c26:	61d3      	str	r3, [r2, #28]
 8000c28:	4b11      	ldr	r3, [pc, #68]	@ (8000c70 <HAL_UART_MspInit+0x74>)
 8000c2a:	69db      	ldr	r3, [r3, #28]
 8000c2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c30:	60fb      	str	r3, [r7, #12]
 8000c32:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c34:	4b0e      	ldr	r3, [pc, #56]	@ (8000c70 <HAL_UART_MspInit+0x74>)
 8000c36:	699b      	ldr	r3, [r3, #24]
 8000c38:	4a0d      	ldr	r2, [pc, #52]	@ (8000c70 <HAL_UART_MspInit+0x74>)
 8000c3a:	f043 0304 	orr.w	r3, r3, #4
 8000c3e:	6193      	str	r3, [r2, #24]
 8000c40:	4b0b      	ldr	r3, [pc, #44]	@ (8000c70 <HAL_UART_MspInit+0x74>)
 8000c42:	699b      	ldr	r3, [r3, #24]
 8000c44:	f003 0304 	and.w	r3, r3, #4
 8000c48:	60bb      	str	r3, [r7, #8]
 8000c4a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c4c:	230c      	movs	r3, #12
 8000c4e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c50:	2302      	movs	r3, #2
 8000c52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c54:	2302      	movs	r3, #2
 8000c56:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c58:	f107 0310 	add.w	r3, r7, #16
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4805      	ldr	r0, [pc, #20]	@ (8000c74 <HAL_UART_MspInit+0x78>)
 8000c60:	f000 f9e2 	bl	8001028 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000c64:	bf00      	nop
 8000c66:	3720      	adds	r7, #32
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	40004400 	.word	0x40004400
 8000c70:	40021000 	.word	0x40021000
 8000c74:	40010800 	.word	0x40010800

08000c78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c7c:	bf00      	nop
 8000c7e:	e7fd      	b.n	8000c7c <NMI_Handler+0x4>

08000c80 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c84:	bf00      	nop
 8000c86:	e7fd      	b.n	8000c84 <HardFault_Handler+0x4>

08000c88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c8c:	bf00      	nop
 8000c8e:	e7fd      	b.n	8000c8c <MemManage_Handler+0x4>

08000c90 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c94:	bf00      	nop
 8000c96:	e7fd      	b.n	8000c94 <BusFault_Handler+0x4>

08000c98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c9c:	bf00      	nop
 8000c9e:	e7fd      	b.n	8000c9c <UsageFault_Handler+0x4>

08000ca0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bc80      	pop	{r7}
 8000caa:	4770      	bx	lr

08000cac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cb0:	f000 f8ba 	bl	8000e28 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000cb4:	f002 ff90 	bl	8003bd8 <xTaskGetSchedulerState>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b01      	cmp	r3, #1
 8000cbc:	d001      	beq.n	8000cc2 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000cbe:	f003 fa03 	bl	80040c8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}

08000cc6 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000cca:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000cce:	f000 fb5f 	bl	8001390 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
	...

08000cd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b086      	sub	sp, #24
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ce0:	4a14      	ldr	r2, [pc, #80]	@ (8000d34 <_sbrk+0x5c>)
 8000ce2:	4b15      	ldr	r3, [pc, #84]	@ (8000d38 <_sbrk+0x60>)
 8000ce4:	1ad3      	subs	r3, r2, r3
 8000ce6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cec:	4b13      	ldr	r3, [pc, #76]	@ (8000d3c <_sbrk+0x64>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d102      	bne.n	8000cfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cf4:	4b11      	ldr	r3, [pc, #68]	@ (8000d3c <_sbrk+0x64>)
 8000cf6:	4a12      	ldr	r2, [pc, #72]	@ (8000d40 <_sbrk+0x68>)
 8000cf8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cfa:	4b10      	ldr	r3, [pc, #64]	@ (8000d3c <_sbrk+0x64>)
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	4413      	add	r3, r2
 8000d02:	693a      	ldr	r2, [r7, #16]
 8000d04:	429a      	cmp	r2, r3
 8000d06:	d207      	bcs.n	8000d18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d08:	f003 fcba 	bl	8004680 <__errno>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	220c      	movs	r2, #12
 8000d10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d12:	f04f 33ff 	mov.w	r3, #4294967295
 8000d16:	e009      	b.n	8000d2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d18:	4b08      	ldr	r3, [pc, #32]	@ (8000d3c <_sbrk+0x64>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d1e:	4b07      	ldr	r3, [pc, #28]	@ (8000d3c <_sbrk+0x64>)
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4413      	add	r3, r2
 8000d26:	4a05      	ldr	r2, [pc, #20]	@ (8000d3c <_sbrk+0x64>)
 8000d28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d2a:	68fb      	ldr	r3, [r7, #12]
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	3718      	adds	r7, #24
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	20005000 	.word	0x20005000
 8000d38:	00000400 	.word	0x00000400
 8000d3c:	20000388 	.word	0x20000388
 8000d40:	20001230 	.word	0x20001230

08000d44 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d48:	bf00      	nop
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bc80      	pop	{r7}
 8000d4e:	4770      	bx	lr

08000d50 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d50:	f7ff fff8 	bl	8000d44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d54:	480b      	ldr	r0, [pc, #44]	@ (8000d84 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d56:	490c      	ldr	r1, [pc, #48]	@ (8000d88 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d58:	4a0c      	ldr	r2, [pc, #48]	@ (8000d8c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d5c:	e002      	b.n	8000d64 <LoopCopyDataInit>

08000d5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d62:	3304      	adds	r3, #4

08000d64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d68:	d3f9      	bcc.n	8000d5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d6a:	4a09      	ldr	r2, [pc, #36]	@ (8000d90 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000d6c:	4c09      	ldr	r4, [pc, #36]	@ (8000d94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d70:	e001      	b.n	8000d76 <LoopFillZerobss>

08000d72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d74:	3204      	adds	r2, #4

08000d76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d78:	d3fb      	bcc.n	8000d72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d7a:	f003 fc87 	bl	800468c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d7e:	f7ff fdaf 	bl	80008e0 <main>
  bx lr
 8000d82:	4770      	bx	lr
  ldr r0, =_sdata
 8000d84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d88:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000d8c:	0800584c 	.word	0x0800584c
  ldr r2, =_sbss
 8000d90:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000d94:	2000122c 	.word	0x2000122c

08000d98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d98:	e7fe      	b.n	8000d98 <ADC1_2_IRQHandler>
	...

08000d9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000da0:	4b08      	ldr	r3, [pc, #32]	@ (8000dc4 <HAL_Init+0x28>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a07      	ldr	r2, [pc, #28]	@ (8000dc4 <HAL_Init+0x28>)
 8000da6:	f043 0310 	orr.w	r3, r3, #16
 8000daa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dac:	2003      	movs	r0, #3
 8000dae:	f000 f907 	bl	8000fc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000db2:	200f      	movs	r0, #15
 8000db4:	f000 f808 	bl	8000dc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000db8:	f7ff fecc 	bl	8000b54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dbc:	2300      	movs	r3, #0
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	40022000 	.word	0x40022000

08000dc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dd0:	4b12      	ldr	r3, [pc, #72]	@ (8000e1c <HAL_InitTick+0x54>)
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	4b12      	ldr	r3, [pc, #72]	@ (8000e20 <HAL_InitTick+0x58>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	4619      	mov	r1, r3
 8000dda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dde:	fbb3 f3f1 	udiv	r3, r3, r1
 8000de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000de6:	4618      	mov	r0, r3
 8000de8:	f000 f911 	bl	800100e <HAL_SYSTICK_Config>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
 8000df4:	e00e      	b.n	8000e14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2b0f      	cmp	r3, #15
 8000dfa:	d80a      	bhi.n	8000e12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	6879      	ldr	r1, [r7, #4]
 8000e00:	f04f 30ff 	mov.w	r0, #4294967295
 8000e04:	f000 f8e7 	bl	8000fd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e08:	4a06      	ldr	r2, [pc, #24]	@ (8000e24 <HAL_InitTick+0x5c>)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	e000      	b.n	8000e14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e12:	2301      	movs	r3, #1
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3708      	adds	r7, #8
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	2000000c 	.word	0x2000000c
 8000e20:	20000014 	.word	0x20000014
 8000e24:	20000010 	.word	0x20000010

08000e28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e2c:	4b05      	ldr	r3, [pc, #20]	@ (8000e44 <HAL_IncTick+0x1c>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	461a      	mov	r2, r3
 8000e32:	4b05      	ldr	r3, [pc, #20]	@ (8000e48 <HAL_IncTick+0x20>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4413      	add	r3, r2
 8000e38:	4a03      	ldr	r2, [pc, #12]	@ (8000e48 <HAL_IncTick+0x20>)
 8000e3a:	6013      	str	r3, [r2, #0]
}
 8000e3c:	bf00      	nop
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bc80      	pop	{r7}
 8000e42:	4770      	bx	lr
 8000e44:	20000014 	.word	0x20000014
 8000e48:	2000038c 	.word	0x2000038c

08000e4c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e50:	4b02      	ldr	r3, [pc, #8]	@ (8000e5c <HAL_GetTick+0x10>)
 8000e52:	681b      	ldr	r3, [r3, #0]
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bc80      	pop	{r7}
 8000e5a:	4770      	bx	lr
 8000e5c:	2000038c 	.word	0x2000038c

08000e60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b085      	sub	sp, #20
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	f003 0307 	and.w	r3, r3, #7
 8000e6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e70:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e76:	68ba      	ldr	r2, [r7, #8]
 8000e78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e92:	4a04      	ldr	r2, [pc, #16]	@ (8000ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	60d3      	str	r3, [r2, #12]
}
 8000e98:	bf00      	nop
 8000e9a:	3714      	adds	r7, #20
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bc80      	pop	{r7}
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	e000ed00 	.word	0xe000ed00

08000ea8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eac:	4b04      	ldr	r3, [pc, #16]	@ (8000ec0 <__NVIC_GetPriorityGrouping+0x18>)
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	0a1b      	lsrs	r3, r3, #8
 8000eb2:	f003 0307 	and.w	r3, r3, #7
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bc80      	pop	{r7}
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	e000ed00 	.word	0xe000ed00

08000ec4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	6039      	str	r1, [r7, #0]
 8000ece:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ed0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	db0a      	blt.n	8000eee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	b2da      	uxtb	r2, r3
 8000edc:	490c      	ldr	r1, [pc, #48]	@ (8000f10 <__NVIC_SetPriority+0x4c>)
 8000ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee2:	0112      	lsls	r2, r2, #4
 8000ee4:	b2d2      	uxtb	r2, r2
 8000ee6:	440b      	add	r3, r1
 8000ee8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000eec:	e00a      	b.n	8000f04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	b2da      	uxtb	r2, r3
 8000ef2:	4908      	ldr	r1, [pc, #32]	@ (8000f14 <__NVIC_SetPriority+0x50>)
 8000ef4:	79fb      	ldrb	r3, [r7, #7]
 8000ef6:	f003 030f 	and.w	r3, r3, #15
 8000efa:	3b04      	subs	r3, #4
 8000efc:	0112      	lsls	r2, r2, #4
 8000efe:	b2d2      	uxtb	r2, r2
 8000f00:	440b      	add	r3, r1
 8000f02:	761a      	strb	r2, [r3, #24]
}
 8000f04:	bf00      	nop
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bc80      	pop	{r7}
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	e000e100 	.word	0xe000e100
 8000f14:	e000ed00 	.word	0xe000ed00

08000f18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b089      	sub	sp, #36	@ 0x24
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	60f8      	str	r0, [r7, #12]
 8000f20:	60b9      	str	r1, [r7, #8]
 8000f22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	f003 0307 	and.w	r3, r3, #7
 8000f2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	f1c3 0307 	rsb	r3, r3, #7
 8000f32:	2b04      	cmp	r3, #4
 8000f34:	bf28      	it	cs
 8000f36:	2304      	movcs	r3, #4
 8000f38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	3304      	adds	r3, #4
 8000f3e:	2b06      	cmp	r3, #6
 8000f40:	d902      	bls.n	8000f48 <NVIC_EncodePriority+0x30>
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	3b03      	subs	r3, #3
 8000f46:	e000      	b.n	8000f4a <NVIC_EncodePriority+0x32>
 8000f48:	2300      	movs	r3, #0
 8000f4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f50:	69bb      	ldr	r3, [r7, #24]
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	43da      	mvns	r2, r3
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	401a      	ands	r2, r3
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f60:	f04f 31ff 	mov.w	r1, #4294967295
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	fa01 f303 	lsl.w	r3, r1, r3
 8000f6a:	43d9      	mvns	r1, r3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f70:	4313      	orrs	r3, r2
         );
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3724      	adds	r7, #36	@ 0x24
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bc80      	pop	{r7}
 8000f7a:	4770      	bx	lr

08000f7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	3b01      	subs	r3, #1
 8000f88:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f8c:	d301      	bcc.n	8000f92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e00f      	b.n	8000fb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f92:	4a0a      	ldr	r2, [pc, #40]	@ (8000fbc <SysTick_Config+0x40>)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	3b01      	subs	r3, #1
 8000f98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f9a:	210f      	movs	r1, #15
 8000f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa0:	f7ff ff90 	bl	8000ec4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fa4:	4b05      	ldr	r3, [pc, #20]	@ (8000fbc <SysTick_Config+0x40>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000faa:	4b04      	ldr	r3, [pc, #16]	@ (8000fbc <SysTick_Config+0x40>)
 8000fac:	2207      	movs	r2, #7
 8000fae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	e000e010 	.word	0xe000e010

08000fc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	f7ff ff49 	bl	8000e60 <__NVIC_SetPriorityGrouping>
}
 8000fce:	bf00      	nop
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b086      	sub	sp, #24
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	4603      	mov	r3, r0
 8000fde:	60b9      	str	r1, [r7, #8]
 8000fe0:	607a      	str	r2, [r7, #4]
 8000fe2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000fe8:	f7ff ff5e 	bl	8000ea8 <__NVIC_GetPriorityGrouping>
 8000fec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fee:	687a      	ldr	r2, [r7, #4]
 8000ff0:	68b9      	ldr	r1, [r7, #8]
 8000ff2:	6978      	ldr	r0, [r7, #20]
 8000ff4:	f7ff ff90 	bl	8000f18 <NVIC_EncodePriority>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ffe:	4611      	mov	r1, r2
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff ff5f 	bl	8000ec4 <__NVIC_SetPriority>
}
 8001006:	bf00      	nop
 8001008:	3718      	adds	r7, #24
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}

0800100e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800100e:	b580      	push	{r7, lr}
 8001010:	b082      	sub	sp, #8
 8001012:	af00      	add	r7, sp, #0
 8001014:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f7ff ffb0 	bl	8000f7c <SysTick_Config>
 800101c:	4603      	mov	r3, r0
}
 800101e:	4618      	mov	r0, r3
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
	...

08001028 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001028:	b480      	push	{r7}
 800102a:	b08b      	sub	sp, #44	@ 0x2c
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001032:	2300      	movs	r3, #0
 8001034:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001036:	2300      	movs	r3, #0
 8001038:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800103a:	e169      	b.n	8001310 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800103c:	2201      	movs	r2, #1
 800103e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	69fa      	ldr	r2, [r7, #28]
 800104c:	4013      	ands	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	429a      	cmp	r2, r3
 8001056:	f040 8158 	bne.w	800130a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	4a9a      	ldr	r2, [pc, #616]	@ (80012c8 <HAL_GPIO_Init+0x2a0>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d05e      	beq.n	8001122 <HAL_GPIO_Init+0xfa>
 8001064:	4a98      	ldr	r2, [pc, #608]	@ (80012c8 <HAL_GPIO_Init+0x2a0>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d875      	bhi.n	8001156 <HAL_GPIO_Init+0x12e>
 800106a:	4a98      	ldr	r2, [pc, #608]	@ (80012cc <HAL_GPIO_Init+0x2a4>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d058      	beq.n	8001122 <HAL_GPIO_Init+0xfa>
 8001070:	4a96      	ldr	r2, [pc, #600]	@ (80012cc <HAL_GPIO_Init+0x2a4>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d86f      	bhi.n	8001156 <HAL_GPIO_Init+0x12e>
 8001076:	4a96      	ldr	r2, [pc, #600]	@ (80012d0 <HAL_GPIO_Init+0x2a8>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d052      	beq.n	8001122 <HAL_GPIO_Init+0xfa>
 800107c:	4a94      	ldr	r2, [pc, #592]	@ (80012d0 <HAL_GPIO_Init+0x2a8>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d869      	bhi.n	8001156 <HAL_GPIO_Init+0x12e>
 8001082:	4a94      	ldr	r2, [pc, #592]	@ (80012d4 <HAL_GPIO_Init+0x2ac>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d04c      	beq.n	8001122 <HAL_GPIO_Init+0xfa>
 8001088:	4a92      	ldr	r2, [pc, #584]	@ (80012d4 <HAL_GPIO_Init+0x2ac>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d863      	bhi.n	8001156 <HAL_GPIO_Init+0x12e>
 800108e:	4a92      	ldr	r2, [pc, #584]	@ (80012d8 <HAL_GPIO_Init+0x2b0>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d046      	beq.n	8001122 <HAL_GPIO_Init+0xfa>
 8001094:	4a90      	ldr	r2, [pc, #576]	@ (80012d8 <HAL_GPIO_Init+0x2b0>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d85d      	bhi.n	8001156 <HAL_GPIO_Init+0x12e>
 800109a:	2b12      	cmp	r3, #18
 800109c:	d82a      	bhi.n	80010f4 <HAL_GPIO_Init+0xcc>
 800109e:	2b12      	cmp	r3, #18
 80010a0:	d859      	bhi.n	8001156 <HAL_GPIO_Init+0x12e>
 80010a2:	a201      	add	r2, pc, #4	@ (adr r2, 80010a8 <HAL_GPIO_Init+0x80>)
 80010a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010a8:	08001123 	.word	0x08001123
 80010ac:	080010fd 	.word	0x080010fd
 80010b0:	0800110f 	.word	0x0800110f
 80010b4:	08001151 	.word	0x08001151
 80010b8:	08001157 	.word	0x08001157
 80010bc:	08001157 	.word	0x08001157
 80010c0:	08001157 	.word	0x08001157
 80010c4:	08001157 	.word	0x08001157
 80010c8:	08001157 	.word	0x08001157
 80010cc:	08001157 	.word	0x08001157
 80010d0:	08001157 	.word	0x08001157
 80010d4:	08001157 	.word	0x08001157
 80010d8:	08001157 	.word	0x08001157
 80010dc:	08001157 	.word	0x08001157
 80010e0:	08001157 	.word	0x08001157
 80010e4:	08001157 	.word	0x08001157
 80010e8:	08001157 	.word	0x08001157
 80010ec:	08001105 	.word	0x08001105
 80010f0:	08001119 	.word	0x08001119
 80010f4:	4a79      	ldr	r2, [pc, #484]	@ (80012dc <HAL_GPIO_Init+0x2b4>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d013      	beq.n	8001122 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80010fa:	e02c      	b.n	8001156 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	623b      	str	r3, [r7, #32]
          break;
 8001102:	e029      	b.n	8001158 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	3304      	adds	r3, #4
 800110a:	623b      	str	r3, [r7, #32]
          break;
 800110c:	e024      	b.n	8001158 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	68db      	ldr	r3, [r3, #12]
 8001112:	3308      	adds	r3, #8
 8001114:	623b      	str	r3, [r7, #32]
          break;
 8001116:	e01f      	b.n	8001158 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	330c      	adds	r3, #12
 800111e:	623b      	str	r3, [r7, #32]
          break;
 8001120:	e01a      	b.n	8001158 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	689b      	ldr	r3, [r3, #8]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d102      	bne.n	8001130 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800112a:	2304      	movs	r3, #4
 800112c:	623b      	str	r3, [r7, #32]
          break;
 800112e:	e013      	b.n	8001158 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	2b01      	cmp	r3, #1
 8001136:	d105      	bne.n	8001144 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001138:	2308      	movs	r3, #8
 800113a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	69fa      	ldr	r2, [r7, #28]
 8001140:	611a      	str	r2, [r3, #16]
          break;
 8001142:	e009      	b.n	8001158 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001144:	2308      	movs	r3, #8
 8001146:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	69fa      	ldr	r2, [r7, #28]
 800114c:	615a      	str	r2, [r3, #20]
          break;
 800114e:	e003      	b.n	8001158 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001150:	2300      	movs	r3, #0
 8001152:	623b      	str	r3, [r7, #32]
          break;
 8001154:	e000      	b.n	8001158 <HAL_GPIO_Init+0x130>
          break;
 8001156:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001158:	69bb      	ldr	r3, [r7, #24]
 800115a:	2bff      	cmp	r3, #255	@ 0xff
 800115c:	d801      	bhi.n	8001162 <HAL_GPIO_Init+0x13a>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	e001      	b.n	8001166 <HAL_GPIO_Init+0x13e>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	3304      	adds	r3, #4
 8001166:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001168:	69bb      	ldr	r3, [r7, #24]
 800116a:	2bff      	cmp	r3, #255	@ 0xff
 800116c:	d802      	bhi.n	8001174 <HAL_GPIO_Init+0x14c>
 800116e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	e002      	b.n	800117a <HAL_GPIO_Init+0x152>
 8001174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001176:	3b08      	subs	r3, #8
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	210f      	movs	r1, #15
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	fa01 f303 	lsl.w	r3, r1, r3
 8001188:	43db      	mvns	r3, r3
 800118a:	401a      	ands	r2, r3
 800118c:	6a39      	ldr	r1, [r7, #32]
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	fa01 f303 	lsl.w	r3, r1, r3
 8001194:	431a      	orrs	r2, r3
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	f000 80b1 	beq.w	800130a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80011a8:	4b4d      	ldr	r3, [pc, #308]	@ (80012e0 <HAL_GPIO_Init+0x2b8>)
 80011aa:	699b      	ldr	r3, [r3, #24]
 80011ac:	4a4c      	ldr	r2, [pc, #304]	@ (80012e0 <HAL_GPIO_Init+0x2b8>)
 80011ae:	f043 0301 	orr.w	r3, r3, #1
 80011b2:	6193      	str	r3, [r2, #24]
 80011b4:	4b4a      	ldr	r3, [pc, #296]	@ (80012e0 <HAL_GPIO_Init+0x2b8>)
 80011b6:	699b      	ldr	r3, [r3, #24]
 80011b8:	f003 0301 	and.w	r3, r3, #1
 80011bc:	60bb      	str	r3, [r7, #8]
 80011be:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80011c0:	4a48      	ldr	r2, [pc, #288]	@ (80012e4 <HAL_GPIO_Init+0x2bc>)
 80011c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011c4:	089b      	lsrs	r3, r3, #2
 80011c6:	3302      	adds	r3, #2
 80011c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011cc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80011ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011d0:	f003 0303 	and.w	r3, r3, #3
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	220f      	movs	r2, #15
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	43db      	mvns	r3, r3
 80011de:	68fa      	ldr	r2, [r7, #12]
 80011e0:	4013      	ands	r3, r2
 80011e2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	4a40      	ldr	r2, [pc, #256]	@ (80012e8 <HAL_GPIO_Init+0x2c0>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d013      	beq.n	8001214 <HAL_GPIO_Init+0x1ec>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	4a3f      	ldr	r2, [pc, #252]	@ (80012ec <HAL_GPIO_Init+0x2c4>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d00d      	beq.n	8001210 <HAL_GPIO_Init+0x1e8>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	4a3e      	ldr	r2, [pc, #248]	@ (80012f0 <HAL_GPIO_Init+0x2c8>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d007      	beq.n	800120c <HAL_GPIO_Init+0x1e4>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	4a3d      	ldr	r2, [pc, #244]	@ (80012f4 <HAL_GPIO_Init+0x2cc>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d101      	bne.n	8001208 <HAL_GPIO_Init+0x1e0>
 8001204:	2303      	movs	r3, #3
 8001206:	e006      	b.n	8001216 <HAL_GPIO_Init+0x1ee>
 8001208:	2304      	movs	r3, #4
 800120a:	e004      	b.n	8001216 <HAL_GPIO_Init+0x1ee>
 800120c:	2302      	movs	r3, #2
 800120e:	e002      	b.n	8001216 <HAL_GPIO_Init+0x1ee>
 8001210:	2301      	movs	r3, #1
 8001212:	e000      	b.n	8001216 <HAL_GPIO_Init+0x1ee>
 8001214:	2300      	movs	r3, #0
 8001216:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001218:	f002 0203 	and.w	r2, r2, #3
 800121c:	0092      	lsls	r2, r2, #2
 800121e:	4093      	lsls	r3, r2
 8001220:	68fa      	ldr	r2, [r7, #12]
 8001222:	4313      	orrs	r3, r2
 8001224:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001226:	492f      	ldr	r1, [pc, #188]	@ (80012e4 <HAL_GPIO_Init+0x2bc>)
 8001228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800122a:	089b      	lsrs	r3, r3, #2
 800122c:	3302      	adds	r3, #2
 800122e:	68fa      	ldr	r2, [r7, #12]
 8001230:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800123c:	2b00      	cmp	r3, #0
 800123e:	d006      	beq.n	800124e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001240:	4b2d      	ldr	r3, [pc, #180]	@ (80012f8 <HAL_GPIO_Init+0x2d0>)
 8001242:	689a      	ldr	r2, [r3, #8]
 8001244:	492c      	ldr	r1, [pc, #176]	@ (80012f8 <HAL_GPIO_Init+0x2d0>)
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	4313      	orrs	r3, r2
 800124a:	608b      	str	r3, [r1, #8]
 800124c:	e006      	b.n	800125c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800124e:	4b2a      	ldr	r3, [pc, #168]	@ (80012f8 <HAL_GPIO_Init+0x2d0>)
 8001250:	689a      	ldr	r2, [r3, #8]
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	43db      	mvns	r3, r3
 8001256:	4928      	ldr	r1, [pc, #160]	@ (80012f8 <HAL_GPIO_Init+0x2d0>)
 8001258:	4013      	ands	r3, r2
 800125a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001264:	2b00      	cmp	r3, #0
 8001266:	d006      	beq.n	8001276 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001268:	4b23      	ldr	r3, [pc, #140]	@ (80012f8 <HAL_GPIO_Init+0x2d0>)
 800126a:	68da      	ldr	r2, [r3, #12]
 800126c:	4922      	ldr	r1, [pc, #136]	@ (80012f8 <HAL_GPIO_Init+0x2d0>)
 800126e:	69bb      	ldr	r3, [r7, #24]
 8001270:	4313      	orrs	r3, r2
 8001272:	60cb      	str	r3, [r1, #12]
 8001274:	e006      	b.n	8001284 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001276:	4b20      	ldr	r3, [pc, #128]	@ (80012f8 <HAL_GPIO_Init+0x2d0>)
 8001278:	68da      	ldr	r2, [r3, #12]
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	43db      	mvns	r3, r3
 800127e:	491e      	ldr	r1, [pc, #120]	@ (80012f8 <HAL_GPIO_Init+0x2d0>)
 8001280:	4013      	ands	r3, r2
 8001282:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800128c:	2b00      	cmp	r3, #0
 800128e:	d006      	beq.n	800129e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001290:	4b19      	ldr	r3, [pc, #100]	@ (80012f8 <HAL_GPIO_Init+0x2d0>)
 8001292:	685a      	ldr	r2, [r3, #4]
 8001294:	4918      	ldr	r1, [pc, #96]	@ (80012f8 <HAL_GPIO_Init+0x2d0>)
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	4313      	orrs	r3, r2
 800129a:	604b      	str	r3, [r1, #4]
 800129c:	e006      	b.n	80012ac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800129e:	4b16      	ldr	r3, [pc, #88]	@ (80012f8 <HAL_GPIO_Init+0x2d0>)
 80012a0:	685a      	ldr	r2, [r3, #4]
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	43db      	mvns	r3, r3
 80012a6:	4914      	ldr	r1, [pc, #80]	@ (80012f8 <HAL_GPIO_Init+0x2d0>)
 80012a8:	4013      	ands	r3, r2
 80012aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d021      	beq.n	80012fc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80012b8:	4b0f      	ldr	r3, [pc, #60]	@ (80012f8 <HAL_GPIO_Init+0x2d0>)
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	490e      	ldr	r1, [pc, #56]	@ (80012f8 <HAL_GPIO_Init+0x2d0>)
 80012be:	69bb      	ldr	r3, [r7, #24]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	600b      	str	r3, [r1, #0]
 80012c4:	e021      	b.n	800130a <HAL_GPIO_Init+0x2e2>
 80012c6:	bf00      	nop
 80012c8:	10320000 	.word	0x10320000
 80012cc:	10310000 	.word	0x10310000
 80012d0:	10220000 	.word	0x10220000
 80012d4:	10210000 	.word	0x10210000
 80012d8:	10120000 	.word	0x10120000
 80012dc:	10110000 	.word	0x10110000
 80012e0:	40021000 	.word	0x40021000
 80012e4:	40010000 	.word	0x40010000
 80012e8:	40010800 	.word	0x40010800
 80012ec:	40010c00 	.word	0x40010c00
 80012f0:	40011000 	.word	0x40011000
 80012f4:	40011400 	.word	0x40011400
 80012f8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80012fc:	4b0b      	ldr	r3, [pc, #44]	@ (800132c <HAL_GPIO_Init+0x304>)
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	69bb      	ldr	r3, [r7, #24]
 8001302:	43db      	mvns	r3, r3
 8001304:	4909      	ldr	r1, [pc, #36]	@ (800132c <HAL_GPIO_Init+0x304>)
 8001306:	4013      	ands	r3, r2
 8001308:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800130a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800130c:	3301      	adds	r3, #1
 800130e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001316:	fa22 f303 	lsr.w	r3, r2, r3
 800131a:	2b00      	cmp	r3, #0
 800131c:	f47f ae8e 	bne.w	800103c <HAL_GPIO_Init+0x14>
  }
}
 8001320:	bf00      	nop
 8001322:	bf00      	nop
 8001324:	372c      	adds	r7, #44	@ 0x2c
 8001326:	46bd      	mov	sp, r7
 8001328:	bc80      	pop	{r7}
 800132a:	4770      	bx	lr
 800132c:	40010400 	.word	0x40010400

08001330 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001330:	b480      	push	{r7}
 8001332:	b085      	sub	sp, #20
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	460b      	mov	r3, r1
 800133a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	689a      	ldr	r2, [r3, #8]
 8001340:	887b      	ldrh	r3, [r7, #2]
 8001342:	4013      	ands	r3, r2
 8001344:	2b00      	cmp	r3, #0
 8001346:	d002      	beq.n	800134e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001348:	2301      	movs	r3, #1
 800134a:	73fb      	strb	r3, [r7, #15]
 800134c:	e001      	b.n	8001352 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800134e:	2300      	movs	r3, #0
 8001350:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001352:	7bfb      	ldrb	r3, [r7, #15]
}
 8001354:	4618      	mov	r0, r3
 8001356:	3714      	adds	r7, #20
 8001358:	46bd      	mov	sp, r7
 800135a:	bc80      	pop	{r7}
 800135c:	4770      	bx	lr

0800135e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800135e:	b480      	push	{r7}
 8001360:	b083      	sub	sp, #12
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
 8001366:	460b      	mov	r3, r1
 8001368:	807b      	strh	r3, [r7, #2]
 800136a:	4613      	mov	r3, r2
 800136c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800136e:	787b      	ldrb	r3, [r7, #1]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d003      	beq.n	800137c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001374:	887a      	ldrh	r2, [r7, #2]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800137a:	e003      	b.n	8001384 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800137c:	887b      	ldrh	r3, [r7, #2]
 800137e:	041a      	lsls	r2, r3, #16
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	611a      	str	r2, [r3, #16]
}
 8001384:	bf00      	nop
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	bc80      	pop	{r7}
 800138c:	4770      	bx	lr
	...

08001390 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800139a:	4b08      	ldr	r3, [pc, #32]	@ (80013bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800139c:	695a      	ldr	r2, [r3, #20]
 800139e:	88fb      	ldrh	r3, [r7, #6]
 80013a0:	4013      	ands	r3, r2
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d006      	beq.n	80013b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80013a6:	4a05      	ldr	r2, [pc, #20]	@ (80013bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013a8:	88fb      	ldrh	r3, [r7, #6]
 80013aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80013ac:	88fb      	ldrh	r3, [r7, #6]
 80013ae:	4618      	mov	r0, r3
 80013b0:	f000 f806 	bl	80013c0 <HAL_GPIO_EXTI_Callback>
  }
}
 80013b4:	bf00      	nop
 80013b6:	3708      	adds	r7, #8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	40010400 	.word	0x40010400

080013c0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	4603      	mov	r3, r0
 80013c8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80013ca:	bf00      	nop
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bc80      	pop	{r7}
 80013d2:	4770      	bx	lr

080013d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b086      	sub	sp, #24
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d101      	bne.n	80013e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
 80013e4:	e272      	b.n	80018cc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 0301 	and.w	r3, r3, #1
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	f000 8087 	beq.w	8001502 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013f4:	4b92      	ldr	r3, [pc, #584]	@ (8001640 <HAL_RCC_OscConfig+0x26c>)
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f003 030c 	and.w	r3, r3, #12
 80013fc:	2b04      	cmp	r3, #4
 80013fe:	d00c      	beq.n	800141a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001400:	4b8f      	ldr	r3, [pc, #572]	@ (8001640 <HAL_RCC_OscConfig+0x26c>)
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f003 030c 	and.w	r3, r3, #12
 8001408:	2b08      	cmp	r3, #8
 800140a:	d112      	bne.n	8001432 <HAL_RCC_OscConfig+0x5e>
 800140c:	4b8c      	ldr	r3, [pc, #560]	@ (8001640 <HAL_RCC_OscConfig+0x26c>)
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001414:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001418:	d10b      	bne.n	8001432 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800141a:	4b89      	ldr	r3, [pc, #548]	@ (8001640 <HAL_RCC_OscConfig+0x26c>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d06c      	beq.n	8001500 <HAL_RCC_OscConfig+0x12c>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d168      	bne.n	8001500 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e24c      	b.n	80018cc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800143a:	d106      	bne.n	800144a <HAL_RCC_OscConfig+0x76>
 800143c:	4b80      	ldr	r3, [pc, #512]	@ (8001640 <HAL_RCC_OscConfig+0x26c>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a7f      	ldr	r2, [pc, #508]	@ (8001640 <HAL_RCC_OscConfig+0x26c>)
 8001442:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001446:	6013      	str	r3, [r2, #0]
 8001448:	e02e      	b.n	80014a8 <HAL_RCC_OscConfig+0xd4>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d10c      	bne.n	800146c <HAL_RCC_OscConfig+0x98>
 8001452:	4b7b      	ldr	r3, [pc, #492]	@ (8001640 <HAL_RCC_OscConfig+0x26c>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a7a      	ldr	r2, [pc, #488]	@ (8001640 <HAL_RCC_OscConfig+0x26c>)
 8001458:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800145c:	6013      	str	r3, [r2, #0]
 800145e:	4b78      	ldr	r3, [pc, #480]	@ (8001640 <HAL_RCC_OscConfig+0x26c>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a77      	ldr	r2, [pc, #476]	@ (8001640 <HAL_RCC_OscConfig+0x26c>)
 8001464:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001468:	6013      	str	r3, [r2, #0]
 800146a:	e01d      	b.n	80014a8 <HAL_RCC_OscConfig+0xd4>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001474:	d10c      	bne.n	8001490 <HAL_RCC_OscConfig+0xbc>
 8001476:	4b72      	ldr	r3, [pc, #456]	@ (8001640 <HAL_RCC_OscConfig+0x26c>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a71      	ldr	r2, [pc, #452]	@ (8001640 <HAL_RCC_OscConfig+0x26c>)
 800147c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001480:	6013      	str	r3, [r2, #0]
 8001482:	4b6f      	ldr	r3, [pc, #444]	@ (8001640 <HAL_RCC_OscConfig+0x26c>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a6e      	ldr	r2, [pc, #440]	@ (8001640 <HAL_RCC_OscConfig+0x26c>)
 8001488:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800148c:	6013      	str	r3, [r2, #0]
 800148e:	e00b      	b.n	80014a8 <HAL_RCC_OscConfig+0xd4>
 8001490:	4b6b      	ldr	r3, [pc, #428]	@ (8001640 <HAL_RCC_OscConfig+0x26c>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a6a      	ldr	r2, [pc, #424]	@ (8001640 <HAL_RCC_OscConfig+0x26c>)
 8001496:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800149a:	6013      	str	r3, [r2, #0]
 800149c:	4b68      	ldr	r3, [pc, #416]	@ (8001640 <HAL_RCC_OscConfig+0x26c>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a67      	ldr	r2, [pc, #412]	@ (8001640 <HAL_RCC_OscConfig+0x26c>)
 80014a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014a6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d013      	beq.n	80014d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b0:	f7ff fccc 	bl	8000e4c <HAL_GetTick>
 80014b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014b6:	e008      	b.n	80014ca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014b8:	f7ff fcc8 	bl	8000e4c <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	2b64      	cmp	r3, #100	@ 0x64
 80014c4:	d901      	bls.n	80014ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e200      	b.n	80018cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ca:	4b5d      	ldr	r3, [pc, #372]	@ (8001640 <HAL_RCC_OscConfig+0x26c>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d0f0      	beq.n	80014b8 <HAL_RCC_OscConfig+0xe4>
 80014d6:	e014      	b.n	8001502 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d8:	f7ff fcb8 	bl	8000e4c <HAL_GetTick>
 80014dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014de:	e008      	b.n	80014f2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014e0:	f7ff fcb4 	bl	8000e4c <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	2b64      	cmp	r3, #100	@ 0x64
 80014ec:	d901      	bls.n	80014f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e1ec      	b.n	80018cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014f2:	4b53      	ldr	r3, [pc, #332]	@ (8001640 <HAL_RCC_OscConfig+0x26c>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d1f0      	bne.n	80014e0 <HAL_RCC_OscConfig+0x10c>
 80014fe:	e000      	b.n	8001502 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001500:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 0302 	and.w	r3, r3, #2
 800150a:	2b00      	cmp	r3, #0
 800150c:	d063      	beq.n	80015d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800150e:	4b4c      	ldr	r3, [pc, #304]	@ (8001640 <HAL_RCC_OscConfig+0x26c>)
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f003 030c 	and.w	r3, r3, #12
 8001516:	2b00      	cmp	r3, #0
 8001518:	d00b      	beq.n	8001532 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800151a:	4b49      	ldr	r3, [pc, #292]	@ (8001640 <HAL_RCC_OscConfig+0x26c>)
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f003 030c 	and.w	r3, r3, #12
 8001522:	2b08      	cmp	r3, #8
 8001524:	d11c      	bne.n	8001560 <HAL_RCC_OscConfig+0x18c>
 8001526:	4b46      	ldr	r3, [pc, #280]	@ (8001640 <HAL_RCC_OscConfig+0x26c>)
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d116      	bne.n	8001560 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001532:	4b43      	ldr	r3, [pc, #268]	@ (8001640 <HAL_RCC_OscConfig+0x26c>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	2b00      	cmp	r3, #0
 800153c:	d005      	beq.n	800154a <HAL_RCC_OscConfig+0x176>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	691b      	ldr	r3, [r3, #16]
 8001542:	2b01      	cmp	r3, #1
 8001544:	d001      	beq.n	800154a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e1c0      	b.n	80018cc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800154a:	4b3d      	ldr	r3, [pc, #244]	@ (8001640 <HAL_RCC_OscConfig+0x26c>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	695b      	ldr	r3, [r3, #20]
 8001556:	00db      	lsls	r3, r3, #3
 8001558:	4939      	ldr	r1, [pc, #228]	@ (8001640 <HAL_RCC_OscConfig+0x26c>)
 800155a:	4313      	orrs	r3, r2
 800155c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800155e:	e03a      	b.n	80015d6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	691b      	ldr	r3, [r3, #16]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d020      	beq.n	80015aa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001568:	4b36      	ldr	r3, [pc, #216]	@ (8001644 <HAL_RCC_OscConfig+0x270>)
 800156a:	2201      	movs	r2, #1
 800156c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800156e:	f7ff fc6d 	bl	8000e4c <HAL_GetTick>
 8001572:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001574:	e008      	b.n	8001588 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001576:	f7ff fc69 	bl	8000e4c <HAL_GetTick>
 800157a:	4602      	mov	r2, r0
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	2b02      	cmp	r3, #2
 8001582:	d901      	bls.n	8001588 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001584:	2303      	movs	r3, #3
 8001586:	e1a1      	b.n	80018cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001588:	4b2d      	ldr	r3, [pc, #180]	@ (8001640 <HAL_RCC_OscConfig+0x26c>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 0302 	and.w	r3, r3, #2
 8001590:	2b00      	cmp	r3, #0
 8001592:	d0f0      	beq.n	8001576 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001594:	4b2a      	ldr	r3, [pc, #168]	@ (8001640 <HAL_RCC_OscConfig+0x26c>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	695b      	ldr	r3, [r3, #20]
 80015a0:	00db      	lsls	r3, r3, #3
 80015a2:	4927      	ldr	r1, [pc, #156]	@ (8001640 <HAL_RCC_OscConfig+0x26c>)
 80015a4:	4313      	orrs	r3, r2
 80015a6:	600b      	str	r3, [r1, #0]
 80015a8:	e015      	b.n	80015d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015aa:	4b26      	ldr	r3, [pc, #152]	@ (8001644 <HAL_RCC_OscConfig+0x270>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b0:	f7ff fc4c 	bl	8000e4c <HAL_GetTick>
 80015b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015b6:	e008      	b.n	80015ca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015b8:	f7ff fc48 	bl	8000e4c <HAL_GetTick>
 80015bc:	4602      	mov	r2, r0
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d901      	bls.n	80015ca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e180      	b.n	80018cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001640 <HAL_RCC_OscConfig+0x26c>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0302 	and.w	r3, r3, #2
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d1f0      	bne.n	80015b8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0308 	and.w	r3, r3, #8
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d03a      	beq.n	8001658 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	699b      	ldr	r3, [r3, #24]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d019      	beq.n	800161e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015ea:	4b17      	ldr	r3, [pc, #92]	@ (8001648 <HAL_RCC_OscConfig+0x274>)
 80015ec:	2201      	movs	r2, #1
 80015ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015f0:	f7ff fc2c 	bl	8000e4c <HAL_GetTick>
 80015f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015f6:	e008      	b.n	800160a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015f8:	f7ff fc28 	bl	8000e4c <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	693b      	ldr	r3, [r7, #16]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b02      	cmp	r3, #2
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e160      	b.n	80018cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800160a:	4b0d      	ldr	r3, [pc, #52]	@ (8001640 <HAL_RCC_OscConfig+0x26c>)
 800160c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	2b00      	cmp	r3, #0
 8001614:	d0f0      	beq.n	80015f8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001616:	2001      	movs	r0, #1
 8001618:	f000 face 	bl	8001bb8 <RCC_Delay>
 800161c:	e01c      	b.n	8001658 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800161e:	4b0a      	ldr	r3, [pc, #40]	@ (8001648 <HAL_RCC_OscConfig+0x274>)
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001624:	f7ff fc12 	bl	8000e4c <HAL_GetTick>
 8001628:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800162a:	e00f      	b.n	800164c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800162c:	f7ff fc0e 	bl	8000e4c <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	2b02      	cmp	r3, #2
 8001638:	d908      	bls.n	800164c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e146      	b.n	80018cc <HAL_RCC_OscConfig+0x4f8>
 800163e:	bf00      	nop
 8001640:	40021000 	.word	0x40021000
 8001644:	42420000 	.word	0x42420000
 8001648:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800164c:	4b92      	ldr	r3, [pc, #584]	@ (8001898 <HAL_RCC_OscConfig+0x4c4>)
 800164e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001650:	f003 0302 	and.w	r3, r3, #2
 8001654:	2b00      	cmp	r3, #0
 8001656:	d1e9      	bne.n	800162c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f003 0304 	and.w	r3, r3, #4
 8001660:	2b00      	cmp	r3, #0
 8001662:	f000 80a6 	beq.w	80017b2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001666:	2300      	movs	r3, #0
 8001668:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800166a:	4b8b      	ldr	r3, [pc, #556]	@ (8001898 <HAL_RCC_OscConfig+0x4c4>)
 800166c:	69db      	ldr	r3, [r3, #28]
 800166e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d10d      	bne.n	8001692 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001676:	4b88      	ldr	r3, [pc, #544]	@ (8001898 <HAL_RCC_OscConfig+0x4c4>)
 8001678:	69db      	ldr	r3, [r3, #28]
 800167a:	4a87      	ldr	r2, [pc, #540]	@ (8001898 <HAL_RCC_OscConfig+0x4c4>)
 800167c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001680:	61d3      	str	r3, [r2, #28]
 8001682:	4b85      	ldr	r3, [pc, #532]	@ (8001898 <HAL_RCC_OscConfig+0x4c4>)
 8001684:	69db      	ldr	r3, [r3, #28]
 8001686:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800168a:	60bb      	str	r3, [r7, #8]
 800168c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800168e:	2301      	movs	r3, #1
 8001690:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001692:	4b82      	ldr	r3, [pc, #520]	@ (800189c <HAL_RCC_OscConfig+0x4c8>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800169a:	2b00      	cmp	r3, #0
 800169c:	d118      	bne.n	80016d0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800169e:	4b7f      	ldr	r3, [pc, #508]	@ (800189c <HAL_RCC_OscConfig+0x4c8>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a7e      	ldr	r2, [pc, #504]	@ (800189c <HAL_RCC_OscConfig+0x4c8>)
 80016a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016aa:	f7ff fbcf 	bl	8000e4c <HAL_GetTick>
 80016ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016b0:	e008      	b.n	80016c4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016b2:	f7ff fbcb 	bl	8000e4c <HAL_GetTick>
 80016b6:	4602      	mov	r2, r0
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	2b64      	cmp	r3, #100	@ 0x64
 80016be:	d901      	bls.n	80016c4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80016c0:	2303      	movs	r3, #3
 80016c2:	e103      	b.n	80018cc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016c4:	4b75      	ldr	r3, [pc, #468]	@ (800189c <HAL_RCC_OscConfig+0x4c8>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d0f0      	beq.n	80016b2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d106      	bne.n	80016e6 <HAL_RCC_OscConfig+0x312>
 80016d8:	4b6f      	ldr	r3, [pc, #444]	@ (8001898 <HAL_RCC_OscConfig+0x4c4>)
 80016da:	6a1b      	ldr	r3, [r3, #32]
 80016dc:	4a6e      	ldr	r2, [pc, #440]	@ (8001898 <HAL_RCC_OscConfig+0x4c4>)
 80016de:	f043 0301 	orr.w	r3, r3, #1
 80016e2:	6213      	str	r3, [r2, #32]
 80016e4:	e02d      	b.n	8001742 <HAL_RCC_OscConfig+0x36e>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	68db      	ldr	r3, [r3, #12]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d10c      	bne.n	8001708 <HAL_RCC_OscConfig+0x334>
 80016ee:	4b6a      	ldr	r3, [pc, #424]	@ (8001898 <HAL_RCC_OscConfig+0x4c4>)
 80016f0:	6a1b      	ldr	r3, [r3, #32]
 80016f2:	4a69      	ldr	r2, [pc, #420]	@ (8001898 <HAL_RCC_OscConfig+0x4c4>)
 80016f4:	f023 0301 	bic.w	r3, r3, #1
 80016f8:	6213      	str	r3, [r2, #32]
 80016fa:	4b67      	ldr	r3, [pc, #412]	@ (8001898 <HAL_RCC_OscConfig+0x4c4>)
 80016fc:	6a1b      	ldr	r3, [r3, #32]
 80016fe:	4a66      	ldr	r2, [pc, #408]	@ (8001898 <HAL_RCC_OscConfig+0x4c4>)
 8001700:	f023 0304 	bic.w	r3, r3, #4
 8001704:	6213      	str	r3, [r2, #32]
 8001706:	e01c      	b.n	8001742 <HAL_RCC_OscConfig+0x36e>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	2b05      	cmp	r3, #5
 800170e:	d10c      	bne.n	800172a <HAL_RCC_OscConfig+0x356>
 8001710:	4b61      	ldr	r3, [pc, #388]	@ (8001898 <HAL_RCC_OscConfig+0x4c4>)
 8001712:	6a1b      	ldr	r3, [r3, #32]
 8001714:	4a60      	ldr	r2, [pc, #384]	@ (8001898 <HAL_RCC_OscConfig+0x4c4>)
 8001716:	f043 0304 	orr.w	r3, r3, #4
 800171a:	6213      	str	r3, [r2, #32]
 800171c:	4b5e      	ldr	r3, [pc, #376]	@ (8001898 <HAL_RCC_OscConfig+0x4c4>)
 800171e:	6a1b      	ldr	r3, [r3, #32]
 8001720:	4a5d      	ldr	r2, [pc, #372]	@ (8001898 <HAL_RCC_OscConfig+0x4c4>)
 8001722:	f043 0301 	orr.w	r3, r3, #1
 8001726:	6213      	str	r3, [r2, #32]
 8001728:	e00b      	b.n	8001742 <HAL_RCC_OscConfig+0x36e>
 800172a:	4b5b      	ldr	r3, [pc, #364]	@ (8001898 <HAL_RCC_OscConfig+0x4c4>)
 800172c:	6a1b      	ldr	r3, [r3, #32]
 800172e:	4a5a      	ldr	r2, [pc, #360]	@ (8001898 <HAL_RCC_OscConfig+0x4c4>)
 8001730:	f023 0301 	bic.w	r3, r3, #1
 8001734:	6213      	str	r3, [r2, #32]
 8001736:	4b58      	ldr	r3, [pc, #352]	@ (8001898 <HAL_RCC_OscConfig+0x4c4>)
 8001738:	6a1b      	ldr	r3, [r3, #32]
 800173a:	4a57      	ldr	r2, [pc, #348]	@ (8001898 <HAL_RCC_OscConfig+0x4c4>)
 800173c:	f023 0304 	bic.w	r3, r3, #4
 8001740:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	68db      	ldr	r3, [r3, #12]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d015      	beq.n	8001776 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800174a:	f7ff fb7f 	bl	8000e4c <HAL_GetTick>
 800174e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001750:	e00a      	b.n	8001768 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001752:	f7ff fb7b 	bl	8000e4c <HAL_GetTick>
 8001756:	4602      	mov	r2, r0
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001760:	4293      	cmp	r3, r2
 8001762:	d901      	bls.n	8001768 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001764:	2303      	movs	r3, #3
 8001766:	e0b1      	b.n	80018cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001768:	4b4b      	ldr	r3, [pc, #300]	@ (8001898 <HAL_RCC_OscConfig+0x4c4>)
 800176a:	6a1b      	ldr	r3, [r3, #32]
 800176c:	f003 0302 	and.w	r3, r3, #2
 8001770:	2b00      	cmp	r3, #0
 8001772:	d0ee      	beq.n	8001752 <HAL_RCC_OscConfig+0x37e>
 8001774:	e014      	b.n	80017a0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001776:	f7ff fb69 	bl	8000e4c <HAL_GetTick>
 800177a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800177c:	e00a      	b.n	8001794 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800177e:	f7ff fb65 	bl	8000e4c <HAL_GetTick>
 8001782:	4602      	mov	r2, r0
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	f241 3288 	movw	r2, #5000	@ 0x1388
 800178c:	4293      	cmp	r3, r2
 800178e:	d901      	bls.n	8001794 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001790:	2303      	movs	r3, #3
 8001792:	e09b      	b.n	80018cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001794:	4b40      	ldr	r3, [pc, #256]	@ (8001898 <HAL_RCC_OscConfig+0x4c4>)
 8001796:	6a1b      	ldr	r3, [r3, #32]
 8001798:	f003 0302 	and.w	r3, r3, #2
 800179c:	2b00      	cmp	r3, #0
 800179e:	d1ee      	bne.n	800177e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80017a0:	7dfb      	ldrb	r3, [r7, #23]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d105      	bne.n	80017b2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017a6:	4b3c      	ldr	r3, [pc, #240]	@ (8001898 <HAL_RCC_OscConfig+0x4c4>)
 80017a8:	69db      	ldr	r3, [r3, #28]
 80017aa:	4a3b      	ldr	r2, [pc, #236]	@ (8001898 <HAL_RCC_OscConfig+0x4c4>)
 80017ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017b0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	69db      	ldr	r3, [r3, #28]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	f000 8087 	beq.w	80018ca <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017bc:	4b36      	ldr	r3, [pc, #216]	@ (8001898 <HAL_RCC_OscConfig+0x4c4>)
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f003 030c 	and.w	r3, r3, #12
 80017c4:	2b08      	cmp	r3, #8
 80017c6:	d061      	beq.n	800188c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	69db      	ldr	r3, [r3, #28]
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d146      	bne.n	800185e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017d0:	4b33      	ldr	r3, [pc, #204]	@ (80018a0 <HAL_RCC_OscConfig+0x4cc>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d6:	f7ff fb39 	bl	8000e4c <HAL_GetTick>
 80017da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017dc:	e008      	b.n	80017f0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017de:	f7ff fb35 	bl	8000e4c <HAL_GetTick>
 80017e2:	4602      	mov	r2, r0
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	d901      	bls.n	80017f0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80017ec:	2303      	movs	r3, #3
 80017ee:	e06d      	b.n	80018cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017f0:	4b29      	ldr	r3, [pc, #164]	@ (8001898 <HAL_RCC_OscConfig+0x4c4>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d1f0      	bne.n	80017de <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6a1b      	ldr	r3, [r3, #32]
 8001800:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001804:	d108      	bne.n	8001818 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001806:	4b24      	ldr	r3, [pc, #144]	@ (8001898 <HAL_RCC_OscConfig+0x4c4>)
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	4921      	ldr	r1, [pc, #132]	@ (8001898 <HAL_RCC_OscConfig+0x4c4>)
 8001814:	4313      	orrs	r3, r2
 8001816:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001818:	4b1f      	ldr	r3, [pc, #124]	@ (8001898 <HAL_RCC_OscConfig+0x4c4>)
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6a19      	ldr	r1, [r3, #32]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001828:	430b      	orrs	r3, r1
 800182a:	491b      	ldr	r1, [pc, #108]	@ (8001898 <HAL_RCC_OscConfig+0x4c4>)
 800182c:	4313      	orrs	r3, r2
 800182e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001830:	4b1b      	ldr	r3, [pc, #108]	@ (80018a0 <HAL_RCC_OscConfig+0x4cc>)
 8001832:	2201      	movs	r2, #1
 8001834:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001836:	f7ff fb09 	bl	8000e4c <HAL_GetTick>
 800183a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800183c:	e008      	b.n	8001850 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800183e:	f7ff fb05 	bl	8000e4c <HAL_GetTick>
 8001842:	4602      	mov	r2, r0
 8001844:	693b      	ldr	r3, [r7, #16]
 8001846:	1ad3      	subs	r3, r2, r3
 8001848:	2b02      	cmp	r3, #2
 800184a:	d901      	bls.n	8001850 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800184c:	2303      	movs	r3, #3
 800184e:	e03d      	b.n	80018cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001850:	4b11      	ldr	r3, [pc, #68]	@ (8001898 <HAL_RCC_OscConfig+0x4c4>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d0f0      	beq.n	800183e <HAL_RCC_OscConfig+0x46a>
 800185c:	e035      	b.n	80018ca <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800185e:	4b10      	ldr	r3, [pc, #64]	@ (80018a0 <HAL_RCC_OscConfig+0x4cc>)
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001864:	f7ff faf2 	bl	8000e4c <HAL_GetTick>
 8001868:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800186a:	e008      	b.n	800187e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800186c:	f7ff faee 	bl	8000e4c <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	2b02      	cmp	r3, #2
 8001878:	d901      	bls.n	800187e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e026      	b.n	80018cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800187e:	4b06      	ldr	r3, [pc, #24]	@ (8001898 <HAL_RCC_OscConfig+0x4c4>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d1f0      	bne.n	800186c <HAL_RCC_OscConfig+0x498>
 800188a:	e01e      	b.n	80018ca <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	69db      	ldr	r3, [r3, #28]
 8001890:	2b01      	cmp	r3, #1
 8001892:	d107      	bne.n	80018a4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e019      	b.n	80018cc <HAL_RCC_OscConfig+0x4f8>
 8001898:	40021000 	.word	0x40021000
 800189c:	40007000 	.word	0x40007000
 80018a0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80018a4:	4b0b      	ldr	r3, [pc, #44]	@ (80018d4 <HAL_RCC_OscConfig+0x500>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6a1b      	ldr	r3, [r3, #32]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d106      	bne.n	80018c6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d001      	beq.n	80018ca <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e000      	b.n	80018cc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80018ca:	2300      	movs	r3, #0
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3718      	adds	r7, #24
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	40021000 	.word	0x40021000

080018d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d101      	bne.n	80018ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e0d0      	b.n	8001a8e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018ec:	4b6a      	ldr	r3, [pc, #424]	@ (8001a98 <HAL_RCC_ClockConfig+0x1c0>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0307 	and.w	r3, r3, #7
 80018f4:	683a      	ldr	r2, [r7, #0]
 80018f6:	429a      	cmp	r2, r3
 80018f8:	d910      	bls.n	800191c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018fa:	4b67      	ldr	r3, [pc, #412]	@ (8001a98 <HAL_RCC_ClockConfig+0x1c0>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f023 0207 	bic.w	r2, r3, #7
 8001902:	4965      	ldr	r1, [pc, #404]	@ (8001a98 <HAL_RCC_ClockConfig+0x1c0>)
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	4313      	orrs	r3, r2
 8001908:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800190a:	4b63      	ldr	r3, [pc, #396]	@ (8001a98 <HAL_RCC_ClockConfig+0x1c0>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0307 	and.w	r3, r3, #7
 8001912:	683a      	ldr	r2, [r7, #0]
 8001914:	429a      	cmp	r2, r3
 8001916:	d001      	beq.n	800191c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e0b8      	b.n	8001a8e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0302 	and.w	r3, r3, #2
 8001924:	2b00      	cmp	r3, #0
 8001926:	d020      	beq.n	800196a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0304 	and.w	r3, r3, #4
 8001930:	2b00      	cmp	r3, #0
 8001932:	d005      	beq.n	8001940 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001934:	4b59      	ldr	r3, [pc, #356]	@ (8001a9c <HAL_RCC_ClockConfig+0x1c4>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	4a58      	ldr	r2, [pc, #352]	@ (8001a9c <HAL_RCC_ClockConfig+0x1c4>)
 800193a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800193e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0308 	and.w	r3, r3, #8
 8001948:	2b00      	cmp	r3, #0
 800194a:	d005      	beq.n	8001958 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800194c:	4b53      	ldr	r3, [pc, #332]	@ (8001a9c <HAL_RCC_ClockConfig+0x1c4>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	4a52      	ldr	r2, [pc, #328]	@ (8001a9c <HAL_RCC_ClockConfig+0x1c4>)
 8001952:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001956:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001958:	4b50      	ldr	r3, [pc, #320]	@ (8001a9c <HAL_RCC_ClockConfig+0x1c4>)
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	494d      	ldr	r1, [pc, #308]	@ (8001a9c <HAL_RCC_ClockConfig+0x1c4>)
 8001966:	4313      	orrs	r3, r2
 8001968:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	2b00      	cmp	r3, #0
 8001974:	d040      	beq.n	80019f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	2b01      	cmp	r3, #1
 800197c:	d107      	bne.n	800198e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800197e:	4b47      	ldr	r3, [pc, #284]	@ (8001a9c <HAL_RCC_ClockConfig+0x1c4>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d115      	bne.n	80019b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e07f      	b.n	8001a8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	2b02      	cmp	r3, #2
 8001994:	d107      	bne.n	80019a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001996:	4b41      	ldr	r3, [pc, #260]	@ (8001a9c <HAL_RCC_ClockConfig+0x1c4>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d109      	bne.n	80019b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e073      	b.n	8001a8e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019a6:	4b3d      	ldr	r3, [pc, #244]	@ (8001a9c <HAL_RCC_ClockConfig+0x1c4>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0302 	and.w	r3, r3, #2
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d101      	bne.n	80019b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e06b      	b.n	8001a8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019b6:	4b39      	ldr	r3, [pc, #228]	@ (8001a9c <HAL_RCC_ClockConfig+0x1c4>)
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f023 0203 	bic.w	r2, r3, #3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	4936      	ldr	r1, [pc, #216]	@ (8001a9c <HAL_RCC_ClockConfig+0x1c4>)
 80019c4:	4313      	orrs	r3, r2
 80019c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019c8:	f7ff fa40 	bl	8000e4c <HAL_GetTick>
 80019cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ce:	e00a      	b.n	80019e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019d0:	f7ff fa3c 	bl	8000e4c <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019de:	4293      	cmp	r3, r2
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e053      	b.n	8001a8e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019e6:	4b2d      	ldr	r3, [pc, #180]	@ (8001a9c <HAL_RCC_ClockConfig+0x1c4>)
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f003 020c 	and.w	r2, r3, #12
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d1eb      	bne.n	80019d0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019f8:	4b27      	ldr	r3, [pc, #156]	@ (8001a98 <HAL_RCC_ClockConfig+0x1c0>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0307 	and.w	r3, r3, #7
 8001a00:	683a      	ldr	r2, [r7, #0]
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d210      	bcs.n	8001a28 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a06:	4b24      	ldr	r3, [pc, #144]	@ (8001a98 <HAL_RCC_ClockConfig+0x1c0>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f023 0207 	bic.w	r2, r3, #7
 8001a0e:	4922      	ldr	r1, [pc, #136]	@ (8001a98 <HAL_RCC_ClockConfig+0x1c0>)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a16:	4b20      	ldr	r3, [pc, #128]	@ (8001a98 <HAL_RCC_ClockConfig+0x1c0>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0307 	and.w	r3, r3, #7
 8001a1e:	683a      	ldr	r2, [r7, #0]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d001      	beq.n	8001a28 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e032      	b.n	8001a8e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 0304 	and.w	r3, r3, #4
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d008      	beq.n	8001a46 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a34:	4b19      	ldr	r3, [pc, #100]	@ (8001a9c <HAL_RCC_ClockConfig+0x1c4>)
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	4916      	ldr	r1, [pc, #88]	@ (8001a9c <HAL_RCC_ClockConfig+0x1c4>)
 8001a42:	4313      	orrs	r3, r2
 8001a44:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0308 	and.w	r3, r3, #8
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d009      	beq.n	8001a66 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a52:	4b12      	ldr	r3, [pc, #72]	@ (8001a9c <HAL_RCC_ClockConfig+0x1c4>)
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	691b      	ldr	r3, [r3, #16]
 8001a5e:	00db      	lsls	r3, r3, #3
 8001a60:	490e      	ldr	r1, [pc, #56]	@ (8001a9c <HAL_RCC_ClockConfig+0x1c4>)
 8001a62:	4313      	orrs	r3, r2
 8001a64:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a66:	f000 f821 	bl	8001aac <HAL_RCC_GetSysClockFreq>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a9c <HAL_RCC_ClockConfig+0x1c4>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	091b      	lsrs	r3, r3, #4
 8001a72:	f003 030f 	and.w	r3, r3, #15
 8001a76:	490a      	ldr	r1, [pc, #40]	@ (8001aa0 <HAL_RCC_ClockConfig+0x1c8>)
 8001a78:	5ccb      	ldrb	r3, [r1, r3]
 8001a7a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a7e:	4a09      	ldr	r2, [pc, #36]	@ (8001aa4 <HAL_RCC_ClockConfig+0x1cc>)
 8001a80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a82:	4b09      	ldr	r3, [pc, #36]	@ (8001aa8 <HAL_RCC_ClockConfig+0x1d0>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff f99e 	bl	8000dc8 <HAL_InitTick>

  return HAL_OK;
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3710      	adds	r7, #16
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}
 8001a96:	bf00      	nop
 8001a98:	40022000 	.word	0x40022000
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	080056dc 	.word	0x080056dc
 8001aa4:	2000000c 	.word	0x2000000c
 8001aa8:	20000010 	.word	0x20000010

08001aac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b087      	sub	sp, #28
 8001ab0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	60fb      	str	r3, [r7, #12]
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	60bb      	str	r3, [r7, #8]
 8001aba:	2300      	movs	r3, #0
 8001abc:	617b      	str	r3, [r7, #20]
 8001abe:	2300      	movs	r3, #0
 8001ac0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001ac6:	4b1e      	ldr	r3, [pc, #120]	@ (8001b40 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f003 030c 	and.w	r3, r3, #12
 8001ad2:	2b04      	cmp	r3, #4
 8001ad4:	d002      	beq.n	8001adc <HAL_RCC_GetSysClockFreq+0x30>
 8001ad6:	2b08      	cmp	r3, #8
 8001ad8:	d003      	beq.n	8001ae2 <HAL_RCC_GetSysClockFreq+0x36>
 8001ada:	e027      	b.n	8001b2c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001adc:	4b19      	ldr	r3, [pc, #100]	@ (8001b44 <HAL_RCC_GetSysClockFreq+0x98>)
 8001ade:	613b      	str	r3, [r7, #16]
      break;
 8001ae0:	e027      	b.n	8001b32 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	0c9b      	lsrs	r3, r3, #18
 8001ae6:	f003 030f 	and.w	r3, r3, #15
 8001aea:	4a17      	ldr	r2, [pc, #92]	@ (8001b48 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001aec:	5cd3      	ldrb	r3, [r2, r3]
 8001aee:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d010      	beq.n	8001b1c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001afa:	4b11      	ldr	r3, [pc, #68]	@ (8001b40 <HAL_RCC_GetSysClockFreq+0x94>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	0c5b      	lsrs	r3, r3, #17
 8001b00:	f003 0301 	and.w	r3, r3, #1
 8001b04:	4a11      	ldr	r2, [pc, #68]	@ (8001b4c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001b06:	5cd3      	ldrb	r3, [r2, r3]
 8001b08:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a0d      	ldr	r2, [pc, #52]	@ (8001b44 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b0e:	fb03 f202 	mul.w	r2, r3, r2
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b18:	617b      	str	r3, [r7, #20]
 8001b1a:	e004      	b.n	8001b26 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	4a0c      	ldr	r2, [pc, #48]	@ (8001b50 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001b20:	fb02 f303 	mul.w	r3, r2, r3
 8001b24:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	613b      	str	r3, [r7, #16]
      break;
 8001b2a:	e002      	b.n	8001b32 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b2c:	4b05      	ldr	r3, [pc, #20]	@ (8001b44 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b2e:	613b      	str	r3, [r7, #16]
      break;
 8001b30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b32:	693b      	ldr	r3, [r7, #16]
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	371c      	adds	r7, #28
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bc80      	pop	{r7}
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	40021000 	.word	0x40021000
 8001b44:	007a1200 	.word	0x007a1200
 8001b48:	080056f4 	.word	0x080056f4
 8001b4c:	08005704 	.word	0x08005704
 8001b50:	003d0900 	.word	0x003d0900

08001b54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b58:	4b02      	ldr	r3, [pc, #8]	@ (8001b64 <HAL_RCC_GetHCLKFreq+0x10>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bc80      	pop	{r7}
 8001b62:	4770      	bx	lr
 8001b64:	2000000c 	.word	0x2000000c

08001b68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b6c:	f7ff fff2 	bl	8001b54 <HAL_RCC_GetHCLKFreq>
 8001b70:	4602      	mov	r2, r0
 8001b72:	4b05      	ldr	r3, [pc, #20]	@ (8001b88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	0a1b      	lsrs	r3, r3, #8
 8001b78:	f003 0307 	and.w	r3, r3, #7
 8001b7c:	4903      	ldr	r1, [pc, #12]	@ (8001b8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b7e:	5ccb      	ldrb	r3, [r1, r3]
 8001b80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	40021000 	.word	0x40021000
 8001b8c:	080056ec 	.word	0x080056ec

08001b90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b94:	f7ff ffde 	bl	8001b54 <HAL_RCC_GetHCLKFreq>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	4b05      	ldr	r3, [pc, #20]	@ (8001bb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	0adb      	lsrs	r3, r3, #11
 8001ba0:	f003 0307 	and.w	r3, r3, #7
 8001ba4:	4903      	ldr	r1, [pc, #12]	@ (8001bb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ba6:	5ccb      	ldrb	r3, [r1, r3]
 8001ba8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	080056ec 	.word	0x080056ec

08001bb8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001bc0:	4b0a      	ldr	r3, [pc, #40]	@ (8001bec <RCC_Delay+0x34>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a0a      	ldr	r2, [pc, #40]	@ (8001bf0 <RCC_Delay+0x38>)
 8001bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bca:	0a5b      	lsrs	r3, r3, #9
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	fb02 f303 	mul.w	r3, r2, r3
 8001bd2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001bd4:	bf00      	nop
  }
  while (Delay --);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	1e5a      	subs	r2, r3, #1
 8001bda:	60fa      	str	r2, [r7, #12]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d1f9      	bne.n	8001bd4 <RCC_Delay+0x1c>
}
 8001be0:	bf00      	nop
 8001be2:	bf00      	nop
 8001be4:	3714      	adds	r7, #20
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bc80      	pop	{r7}
 8001bea:	4770      	bx	lr
 8001bec:	2000000c 	.word	0x2000000c
 8001bf0:	10624dd3 	.word	0x10624dd3

08001bf4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d101      	bne.n	8001c06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e041      	b.n	8001c8a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d106      	bne.n	8001c20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f7fe ffd2 	bl	8000bc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2202      	movs	r2, #2
 8001c24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	3304      	adds	r3, #4
 8001c30:	4619      	mov	r1, r3
 8001c32:	4610      	mov	r0, r2
 8001c34:	f000 f8f4 	bl	8001e20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2201      	movs	r2, #1
 8001c44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2201      	movs	r2, #1
 8001c54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2201      	movs	r2, #1
 8001c64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2201      	movs	r2, #1
 8001c74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2201      	movs	r2, #1
 8001c84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b084      	sub	sp, #16
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
 8001c9a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d101      	bne.n	8001cae <HAL_TIM_ConfigClockSource+0x1c>
 8001caa:	2302      	movs	r3, #2
 8001cac:	e0b4      	b.n	8001e18 <HAL_TIM_ConfigClockSource+0x186>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2202      	movs	r2, #2
 8001cba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8001ccc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001cd4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	68ba      	ldr	r2, [r7, #8]
 8001cdc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001ce6:	d03e      	beq.n	8001d66 <HAL_TIM_ConfigClockSource+0xd4>
 8001ce8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001cec:	f200 8087 	bhi.w	8001dfe <HAL_TIM_ConfigClockSource+0x16c>
 8001cf0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001cf4:	f000 8086 	beq.w	8001e04 <HAL_TIM_ConfigClockSource+0x172>
 8001cf8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001cfc:	d87f      	bhi.n	8001dfe <HAL_TIM_ConfigClockSource+0x16c>
 8001cfe:	2b70      	cmp	r3, #112	@ 0x70
 8001d00:	d01a      	beq.n	8001d38 <HAL_TIM_ConfigClockSource+0xa6>
 8001d02:	2b70      	cmp	r3, #112	@ 0x70
 8001d04:	d87b      	bhi.n	8001dfe <HAL_TIM_ConfigClockSource+0x16c>
 8001d06:	2b60      	cmp	r3, #96	@ 0x60
 8001d08:	d050      	beq.n	8001dac <HAL_TIM_ConfigClockSource+0x11a>
 8001d0a:	2b60      	cmp	r3, #96	@ 0x60
 8001d0c:	d877      	bhi.n	8001dfe <HAL_TIM_ConfigClockSource+0x16c>
 8001d0e:	2b50      	cmp	r3, #80	@ 0x50
 8001d10:	d03c      	beq.n	8001d8c <HAL_TIM_ConfigClockSource+0xfa>
 8001d12:	2b50      	cmp	r3, #80	@ 0x50
 8001d14:	d873      	bhi.n	8001dfe <HAL_TIM_ConfigClockSource+0x16c>
 8001d16:	2b40      	cmp	r3, #64	@ 0x40
 8001d18:	d058      	beq.n	8001dcc <HAL_TIM_ConfigClockSource+0x13a>
 8001d1a:	2b40      	cmp	r3, #64	@ 0x40
 8001d1c:	d86f      	bhi.n	8001dfe <HAL_TIM_ConfigClockSource+0x16c>
 8001d1e:	2b30      	cmp	r3, #48	@ 0x30
 8001d20:	d064      	beq.n	8001dec <HAL_TIM_ConfigClockSource+0x15a>
 8001d22:	2b30      	cmp	r3, #48	@ 0x30
 8001d24:	d86b      	bhi.n	8001dfe <HAL_TIM_ConfigClockSource+0x16c>
 8001d26:	2b20      	cmp	r3, #32
 8001d28:	d060      	beq.n	8001dec <HAL_TIM_ConfigClockSource+0x15a>
 8001d2a:	2b20      	cmp	r3, #32
 8001d2c:	d867      	bhi.n	8001dfe <HAL_TIM_ConfigClockSource+0x16c>
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d05c      	beq.n	8001dec <HAL_TIM_ConfigClockSource+0x15a>
 8001d32:	2b10      	cmp	r3, #16
 8001d34:	d05a      	beq.n	8001dec <HAL_TIM_ConfigClockSource+0x15a>
 8001d36:	e062      	b.n	8001dfe <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001d48:	f000 f94f 	bl	8001fea <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8001d5a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	68ba      	ldr	r2, [r7, #8]
 8001d62:	609a      	str	r2, [r3, #8]
      break;
 8001d64:	e04f      	b.n	8001e06 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001d76:	f000 f938 	bl	8001fea <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	689a      	ldr	r2, [r3, #8]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001d88:	609a      	str	r2, [r3, #8]
      break;
 8001d8a:	e03c      	b.n	8001e06 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d98:	461a      	mov	r2, r3
 8001d9a:	f000 f8af 	bl	8001efc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	2150      	movs	r1, #80	@ 0x50
 8001da4:	4618      	mov	r0, r3
 8001da6:	f000 f906 	bl	8001fb6 <TIM_ITRx_SetConfig>
      break;
 8001daa:	e02c      	b.n	8001e06 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001db8:	461a      	mov	r2, r3
 8001dba:	f000 f8cd 	bl	8001f58 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	2160      	movs	r1, #96	@ 0x60
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f000 f8f6 	bl	8001fb6 <TIM_ITRx_SetConfig>
      break;
 8001dca:	e01c      	b.n	8001e06 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001dd8:	461a      	mov	r2, r3
 8001dda:	f000 f88f 	bl	8001efc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	2140      	movs	r1, #64	@ 0x40
 8001de4:	4618      	mov	r0, r3
 8001de6:	f000 f8e6 	bl	8001fb6 <TIM_ITRx_SetConfig>
      break;
 8001dea:	e00c      	b.n	8001e06 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4619      	mov	r1, r3
 8001df6:	4610      	mov	r0, r2
 8001df8:	f000 f8dd 	bl	8001fb6 <TIM_ITRx_SetConfig>
      break;
 8001dfc:	e003      	b.n	8001e06 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	73fb      	strb	r3, [r7, #15]
      break;
 8001e02:	e000      	b.n	8001e06 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001e04:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2200      	movs	r2, #0
 8001e12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3710      	adds	r7, #16
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	4a2f      	ldr	r2, [pc, #188]	@ (8001ef0 <TIM_Base_SetConfig+0xd0>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d00b      	beq.n	8001e50 <TIM_Base_SetConfig+0x30>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e3e:	d007      	beq.n	8001e50 <TIM_Base_SetConfig+0x30>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	4a2c      	ldr	r2, [pc, #176]	@ (8001ef4 <TIM_Base_SetConfig+0xd4>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d003      	beq.n	8001e50 <TIM_Base_SetConfig+0x30>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	4a2b      	ldr	r2, [pc, #172]	@ (8001ef8 <TIM_Base_SetConfig+0xd8>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d108      	bne.n	8001e62 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001e56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	68fa      	ldr	r2, [r7, #12]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a22      	ldr	r2, [pc, #136]	@ (8001ef0 <TIM_Base_SetConfig+0xd0>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d00b      	beq.n	8001e82 <TIM_Base_SetConfig+0x62>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e70:	d007      	beq.n	8001e82 <TIM_Base_SetConfig+0x62>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a1f      	ldr	r2, [pc, #124]	@ (8001ef4 <TIM_Base_SetConfig+0xd4>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d003      	beq.n	8001e82 <TIM_Base_SetConfig+0x62>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a1e      	ldr	r2, [pc, #120]	@ (8001ef8 <TIM_Base_SetConfig+0xd8>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d108      	bne.n	8001e94 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	68fa      	ldr	r2, [r7, #12]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	695b      	ldr	r3, [r3, #20]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	68fa      	ldr	r2, [r7, #12]
 8001ea6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	689a      	ldr	r2, [r3, #8]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	4a0d      	ldr	r2, [pc, #52]	@ (8001ef0 <TIM_Base_SetConfig+0xd0>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d103      	bne.n	8001ec8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	691a      	ldr	r2, [r3, #16]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2201      	movs	r2, #1
 8001ecc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	691b      	ldr	r3, [r3, #16]
 8001ed2:	f003 0301 	and.w	r3, r3, #1
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d005      	beq.n	8001ee6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	f023 0201 	bic.w	r2, r3, #1
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	611a      	str	r2, [r3, #16]
  }
}
 8001ee6:	bf00      	nop
 8001ee8:	3714      	adds	r7, #20
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bc80      	pop	{r7}
 8001eee:	4770      	bx	lr
 8001ef0:	40012c00 	.word	0x40012c00
 8001ef4:	40000400 	.word	0x40000400
 8001ef8:	40000800 	.word	0x40000800

08001efc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b087      	sub	sp, #28
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	6a1b      	ldr	r3, [r3, #32]
 8001f0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	6a1b      	ldr	r3, [r3, #32]
 8001f12:	f023 0201 	bic.w	r2, r3, #1
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	699b      	ldr	r3, [r3, #24]
 8001f1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001f26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	011b      	lsls	r3, r3, #4
 8001f2c:	693a      	ldr	r2, [r7, #16]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	f023 030a 	bic.w	r3, r3, #10
 8001f38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001f3a:	697a      	ldr	r2, [r7, #20]
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	693a      	ldr	r2, [r7, #16]
 8001f46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	697a      	ldr	r2, [r7, #20]
 8001f4c:	621a      	str	r2, [r3, #32]
}
 8001f4e:	bf00      	nop
 8001f50:	371c      	adds	r7, #28
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bc80      	pop	{r7}
 8001f56:	4770      	bx	lr

08001f58 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b087      	sub	sp, #28
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	60f8      	str	r0, [r7, #12]
 8001f60:	60b9      	str	r1, [r7, #8]
 8001f62:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	6a1b      	ldr	r3, [r3, #32]
 8001f68:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	6a1b      	ldr	r3, [r3, #32]
 8001f6e:	f023 0210 	bic.w	r2, r3, #16
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	699b      	ldr	r3, [r3, #24]
 8001f7a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8001f82:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	031b      	lsls	r3, r3, #12
 8001f88:	693a      	ldr	r2, [r7, #16]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8001f94:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	011b      	lsls	r3, r3, #4
 8001f9a:	697a      	ldr	r2, [r7, #20]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	693a      	ldr	r2, [r7, #16]
 8001fa4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	697a      	ldr	r2, [r7, #20]
 8001faa:	621a      	str	r2, [r3, #32]
}
 8001fac:	bf00      	nop
 8001fae:	371c      	adds	r7, #28
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bc80      	pop	{r7}
 8001fb4:	4770      	bx	lr

08001fb6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	b085      	sub	sp, #20
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
 8001fbe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001fcc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001fce:	683a      	ldr	r2, [r7, #0]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	f043 0307 	orr.w	r3, r3, #7
 8001fd8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	68fa      	ldr	r2, [r7, #12]
 8001fde:	609a      	str	r2, [r3, #8]
}
 8001fe0:	bf00      	nop
 8001fe2:	3714      	adds	r7, #20
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bc80      	pop	{r7}
 8001fe8:	4770      	bx	lr

08001fea <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001fea:	b480      	push	{r7}
 8001fec:	b087      	sub	sp, #28
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	60f8      	str	r0, [r7, #12]
 8001ff2:	60b9      	str	r1, [r7, #8]
 8001ff4:	607a      	str	r2, [r7, #4]
 8001ff6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002004:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	021a      	lsls	r2, r3, #8
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	431a      	orrs	r2, r3
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	4313      	orrs	r3, r2
 8002012:	697a      	ldr	r2, [r7, #20]
 8002014:	4313      	orrs	r3, r2
 8002016:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	697a      	ldr	r2, [r7, #20]
 800201c:	609a      	str	r2, [r3, #8]
}
 800201e:	bf00      	nop
 8002020:	371c      	adds	r7, #28
 8002022:	46bd      	mov	sp, r7
 8002024:	bc80      	pop	{r7}
 8002026:	4770      	bx	lr

08002028 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002028:	b480      	push	{r7}
 800202a:	b085      	sub	sp, #20
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002038:	2b01      	cmp	r3, #1
 800203a:	d101      	bne.n	8002040 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800203c:	2302      	movs	r3, #2
 800203e:	e046      	b.n	80020ce <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2201      	movs	r2, #1
 8002044:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2202      	movs	r2, #2
 800204c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002066:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	68fa      	ldr	r2, [r7, #12]
 800206e:	4313      	orrs	r3, r2
 8002070:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a16      	ldr	r2, [pc, #88]	@ (80020d8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d00e      	beq.n	80020a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800208c:	d009      	beq.n	80020a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a12      	ldr	r2, [pc, #72]	@ (80020dc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d004      	beq.n	80020a2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a10      	ldr	r2, [pc, #64]	@ (80020e0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d10c      	bne.n	80020bc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80020a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	68ba      	ldr	r2, [r7, #8]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	68ba      	ldr	r2, [r7, #8]
 80020ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2201      	movs	r2, #1
 80020c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3714      	adds	r7, #20
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bc80      	pop	{r7}
 80020d6:	4770      	bx	lr
 80020d8:	40012c00 	.word	0x40012c00
 80020dc:	40000400 	.word	0x40000400
 80020e0:	40000800 	.word	0x40000800

080020e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d101      	bne.n	80020f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e042      	b.n	800217c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d106      	bne.n	8002110 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f7fe fd76 	bl	8000bfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2224      	movs	r2, #36	@ 0x24
 8002114:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	68da      	ldr	r2, [r3, #12]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002126:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f000 fa09 	bl	8002540 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	691a      	ldr	r2, [r3, #16]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800213c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	695a      	ldr	r2, [r3, #20]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800214c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	68da      	ldr	r2, [r3, #12]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800215c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2220      	movs	r2, #32
 8002168:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2220      	movs	r2, #32
 8002170:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800217a:	2300      	movs	r3, #0
}
 800217c:	4618      	mov	r0, r3
 800217e:	3708      	adds	r7, #8
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b08a      	sub	sp, #40	@ 0x28
 8002188:	af02      	add	r7, sp, #8
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	60b9      	str	r1, [r7, #8]
 800218e:	603b      	str	r3, [r7, #0]
 8002190:	4613      	mov	r3, r2
 8002192:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002194:	2300      	movs	r3, #0
 8002196:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	2b20      	cmp	r3, #32
 80021a2:	d175      	bne.n	8002290 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d002      	beq.n	80021b0 <HAL_UART_Transmit+0x2c>
 80021aa:	88fb      	ldrh	r3, [r7, #6]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d101      	bne.n	80021b4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e06e      	b.n	8002292 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	2200      	movs	r2, #0
 80021b8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2221      	movs	r2, #33	@ 0x21
 80021be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80021c2:	f7fe fe43 	bl	8000e4c <HAL_GetTick>
 80021c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	88fa      	ldrh	r2, [r7, #6]
 80021cc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	88fa      	ldrh	r2, [r7, #6]
 80021d2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80021dc:	d108      	bne.n	80021f0 <HAL_UART_Transmit+0x6c>
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d104      	bne.n	80021f0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80021e6:	2300      	movs	r3, #0
 80021e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	61bb      	str	r3, [r7, #24]
 80021ee:	e003      	b.n	80021f8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80021f4:	2300      	movs	r3, #0
 80021f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80021f8:	e02e      	b.n	8002258 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	9300      	str	r3, [sp, #0]
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	2200      	movs	r2, #0
 8002202:	2180      	movs	r1, #128	@ 0x80
 8002204:	68f8      	ldr	r0, [r7, #12]
 8002206:	f000 f8df 	bl	80023c8 <UART_WaitOnFlagUntilTimeout>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d005      	beq.n	800221c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2220      	movs	r2, #32
 8002214:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002218:	2303      	movs	r3, #3
 800221a:	e03a      	b.n	8002292 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d10b      	bne.n	800223a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002222:	69bb      	ldr	r3, [r7, #24]
 8002224:	881b      	ldrh	r3, [r3, #0]
 8002226:	461a      	mov	r2, r3
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002230:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	3302      	adds	r3, #2
 8002236:	61bb      	str	r3, [r7, #24]
 8002238:	e007      	b.n	800224a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	781a      	ldrb	r2, [r3, #0]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	3301      	adds	r3, #1
 8002248:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800224e:	b29b      	uxth	r3, r3
 8002250:	3b01      	subs	r3, #1
 8002252:	b29a      	uxth	r2, r3
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800225c:	b29b      	uxth	r3, r3
 800225e:	2b00      	cmp	r3, #0
 8002260:	d1cb      	bne.n	80021fa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	9300      	str	r3, [sp, #0]
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	2200      	movs	r2, #0
 800226a:	2140      	movs	r1, #64	@ 0x40
 800226c:	68f8      	ldr	r0, [r7, #12]
 800226e:	f000 f8ab 	bl	80023c8 <UART_WaitOnFlagUntilTimeout>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d005      	beq.n	8002284 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2220      	movs	r2, #32
 800227c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002280:	2303      	movs	r3, #3
 8002282:	e006      	b.n	8002292 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2220      	movs	r2, #32
 8002288:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800228c:	2300      	movs	r3, #0
 800228e:	e000      	b.n	8002292 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002290:	2302      	movs	r3, #2
  }
}
 8002292:	4618      	mov	r0, r3
 8002294:	3720      	adds	r7, #32
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	b08a      	sub	sp, #40	@ 0x28
 800229e:	af02      	add	r7, sp, #8
 80022a0:	60f8      	str	r0, [r7, #12]
 80022a2:	60b9      	str	r1, [r7, #8]
 80022a4:	603b      	str	r3, [r7, #0]
 80022a6:	4613      	mov	r3, r2
 80022a8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80022aa:	2300      	movs	r3, #0
 80022ac:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80022b4:	b2db      	uxtb	r3, r3
 80022b6:	2b20      	cmp	r3, #32
 80022b8:	f040 8081 	bne.w	80023be <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d002      	beq.n	80022c8 <HAL_UART_Receive+0x2e>
 80022c2:	88fb      	ldrh	r3, [r7, #6]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d101      	bne.n	80022cc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e079      	b.n	80023c0 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2200      	movs	r2, #0
 80022d0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2222      	movs	r2, #34	@ 0x22
 80022d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2200      	movs	r2, #0
 80022de:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80022e0:	f7fe fdb4 	bl	8000e4c <HAL_GetTick>
 80022e4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	88fa      	ldrh	r2, [r7, #6]
 80022ea:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	88fa      	ldrh	r2, [r7, #6]
 80022f0:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80022fa:	d108      	bne.n	800230e <HAL_UART_Receive+0x74>
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	691b      	ldr	r3, [r3, #16]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d104      	bne.n	800230e <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8002304:	2300      	movs	r3, #0
 8002306:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	61bb      	str	r3, [r7, #24]
 800230c:	e003      	b.n	8002316 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002312:	2300      	movs	r3, #0
 8002314:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002316:	e047      	b.n	80023a8 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	9300      	str	r3, [sp, #0]
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	2200      	movs	r2, #0
 8002320:	2120      	movs	r1, #32
 8002322:	68f8      	ldr	r0, [r7, #12]
 8002324:	f000 f850 	bl	80023c8 <UART_WaitOnFlagUntilTimeout>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d005      	beq.n	800233a <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2220      	movs	r2, #32
 8002332:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e042      	b.n	80023c0 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d10c      	bne.n	800235a <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	b29b      	uxth	r3, r3
 8002348:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800234c:	b29a      	uxth	r2, r3
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	3302      	adds	r3, #2
 8002356:	61bb      	str	r3, [r7, #24]
 8002358:	e01f      	b.n	800239a <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002362:	d007      	beq.n	8002374 <HAL_UART_Receive+0xda>
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d10a      	bne.n	8002382 <HAL_UART_Receive+0xe8>
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	691b      	ldr	r3, [r3, #16]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d106      	bne.n	8002382 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	b2da      	uxtb	r2, r3
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	701a      	strb	r2, [r3, #0]
 8002380:	e008      	b.n	8002394 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	b2db      	uxtb	r3, r3
 800238a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800238e:	b2da      	uxtb	r2, r3
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	3301      	adds	r3, #1
 8002398:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800239e:	b29b      	uxth	r3, r3
 80023a0:	3b01      	subs	r3, #1
 80023a2:	b29a      	uxth	r2, r3
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d1b2      	bne.n	8002318 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2220      	movs	r2, #32
 80023b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80023ba:	2300      	movs	r3, #0
 80023bc:	e000      	b.n	80023c0 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80023be:	2302      	movs	r3, #2
  }
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3720      	adds	r7, #32
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b086      	sub	sp, #24
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	60b9      	str	r1, [r7, #8]
 80023d2:	603b      	str	r3, [r7, #0]
 80023d4:	4613      	mov	r3, r2
 80023d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023d8:	e03b      	b.n	8002452 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023da:	6a3b      	ldr	r3, [r7, #32]
 80023dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023e0:	d037      	beq.n	8002452 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023e2:	f7fe fd33 	bl	8000e4c <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	6a3a      	ldr	r2, [r7, #32]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d302      	bcc.n	80023f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80023f2:	6a3b      	ldr	r3, [r7, #32]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d101      	bne.n	80023fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e03a      	b.n	8002472 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	f003 0304 	and.w	r3, r3, #4
 8002406:	2b00      	cmp	r3, #0
 8002408:	d023      	beq.n	8002452 <UART_WaitOnFlagUntilTimeout+0x8a>
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	2b80      	cmp	r3, #128	@ 0x80
 800240e:	d020      	beq.n	8002452 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	2b40      	cmp	r3, #64	@ 0x40
 8002414:	d01d      	beq.n	8002452 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0308 	and.w	r3, r3, #8
 8002420:	2b08      	cmp	r3, #8
 8002422:	d116      	bne.n	8002452 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002424:	2300      	movs	r3, #0
 8002426:	617b      	str	r3, [r7, #20]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	617b      	str	r3, [r7, #20]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	617b      	str	r3, [r7, #20]
 8002438:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800243a:	68f8      	ldr	r0, [r7, #12]
 800243c:	f000 f81d 	bl	800247a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2208      	movs	r2, #8
 8002444:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2200      	movs	r2, #0
 800244a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e00f      	b.n	8002472 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	4013      	ands	r3, r2
 800245c:	68ba      	ldr	r2, [r7, #8]
 800245e:	429a      	cmp	r2, r3
 8002460:	bf0c      	ite	eq
 8002462:	2301      	moveq	r3, #1
 8002464:	2300      	movne	r3, #0
 8002466:	b2db      	uxtb	r3, r3
 8002468:	461a      	mov	r2, r3
 800246a:	79fb      	ldrb	r3, [r7, #7]
 800246c:	429a      	cmp	r2, r3
 800246e:	d0b4      	beq.n	80023da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	3718      	adds	r7, #24
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}

0800247a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800247a:	b480      	push	{r7}
 800247c:	b095      	sub	sp, #84	@ 0x54
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	330c      	adds	r3, #12
 8002488:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800248a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800248c:	e853 3f00 	ldrex	r3, [r3]
 8002490:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002494:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002498:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	330c      	adds	r3, #12
 80024a0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80024a2:	643a      	str	r2, [r7, #64]	@ 0x40
 80024a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024a6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80024a8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80024aa:	e841 2300 	strex	r3, r2, [r1]
 80024ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80024b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d1e5      	bne.n	8002482 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	3314      	adds	r3, #20
 80024bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024be:	6a3b      	ldr	r3, [r7, #32]
 80024c0:	e853 3f00 	ldrex	r3, [r3]
 80024c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	f023 0301 	bic.w	r3, r3, #1
 80024cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	3314      	adds	r3, #20
 80024d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80024d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80024d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80024dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80024de:	e841 2300 	strex	r3, r2, [r1]
 80024e2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80024e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d1e5      	bne.n	80024b6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d119      	bne.n	8002526 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	330c      	adds	r3, #12
 80024f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	e853 3f00 	ldrex	r3, [r3]
 8002500:	60bb      	str	r3, [r7, #8]
   return(result);
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	f023 0310 	bic.w	r3, r3, #16
 8002508:	647b      	str	r3, [r7, #68]	@ 0x44
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	330c      	adds	r3, #12
 8002510:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002512:	61ba      	str	r2, [r7, #24]
 8002514:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002516:	6979      	ldr	r1, [r7, #20]
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	e841 2300 	strex	r3, r2, [r1]
 800251e:	613b      	str	r3, [r7, #16]
   return(result);
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d1e5      	bne.n	80024f2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2220      	movs	r2, #32
 800252a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002534:	bf00      	nop
 8002536:	3754      	adds	r7, #84	@ 0x54
 8002538:	46bd      	mov	sp, r7
 800253a:	bc80      	pop	{r7}
 800253c:	4770      	bx	lr
	...

08002540 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	68da      	ldr	r2, [r3, #12]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	430a      	orrs	r2, r1
 800255c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	689a      	ldr	r2, [r3, #8]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	691b      	ldr	r3, [r3, #16]
 8002566:	431a      	orrs	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	695b      	ldr	r3, [r3, #20]
 800256c:	4313      	orrs	r3, r2
 800256e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800257a:	f023 030c 	bic.w	r3, r3, #12
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	6812      	ldr	r2, [r2, #0]
 8002582:	68b9      	ldr	r1, [r7, #8]
 8002584:	430b      	orrs	r3, r1
 8002586:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	695b      	ldr	r3, [r3, #20]
 800258e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	699a      	ldr	r2, [r3, #24]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	430a      	orrs	r2, r1
 800259c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a2c      	ldr	r2, [pc, #176]	@ (8002654 <UART_SetConfig+0x114>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d103      	bne.n	80025b0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80025a8:	f7ff faf2 	bl	8001b90 <HAL_RCC_GetPCLK2Freq>
 80025ac:	60f8      	str	r0, [r7, #12]
 80025ae:	e002      	b.n	80025b6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80025b0:	f7ff fada 	bl	8001b68 <HAL_RCC_GetPCLK1Freq>
 80025b4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80025b6:	68fa      	ldr	r2, [r7, #12]
 80025b8:	4613      	mov	r3, r2
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	4413      	add	r3, r2
 80025be:	009a      	lsls	r2, r3, #2
 80025c0:	441a      	add	r2, r3
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025cc:	4a22      	ldr	r2, [pc, #136]	@ (8002658 <UART_SetConfig+0x118>)
 80025ce:	fba2 2303 	umull	r2, r3, r2, r3
 80025d2:	095b      	lsrs	r3, r3, #5
 80025d4:	0119      	lsls	r1, r3, #4
 80025d6:	68fa      	ldr	r2, [r7, #12]
 80025d8:	4613      	mov	r3, r2
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	4413      	add	r3, r2
 80025de:	009a      	lsls	r2, r3, #2
 80025e0:	441a      	add	r2, r3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80025ec:	4b1a      	ldr	r3, [pc, #104]	@ (8002658 <UART_SetConfig+0x118>)
 80025ee:	fba3 0302 	umull	r0, r3, r3, r2
 80025f2:	095b      	lsrs	r3, r3, #5
 80025f4:	2064      	movs	r0, #100	@ 0x64
 80025f6:	fb00 f303 	mul.w	r3, r0, r3
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	011b      	lsls	r3, r3, #4
 80025fe:	3332      	adds	r3, #50	@ 0x32
 8002600:	4a15      	ldr	r2, [pc, #84]	@ (8002658 <UART_SetConfig+0x118>)
 8002602:	fba2 2303 	umull	r2, r3, r2, r3
 8002606:	095b      	lsrs	r3, r3, #5
 8002608:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800260c:	4419      	add	r1, r3
 800260e:	68fa      	ldr	r2, [r7, #12]
 8002610:	4613      	mov	r3, r2
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	4413      	add	r3, r2
 8002616:	009a      	lsls	r2, r3, #2
 8002618:	441a      	add	r2, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	fbb2 f2f3 	udiv	r2, r2, r3
 8002624:	4b0c      	ldr	r3, [pc, #48]	@ (8002658 <UART_SetConfig+0x118>)
 8002626:	fba3 0302 	umull	r0, r3, r3, r2
 800262a:	095b      	lsrs	r3, r3, #5
 800262c:	2064      	movs	r0, #100	@ 0x64
 800262e:	fb00 f303 	mul.w	r3, r0, r3
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	011b      	lsls	r3, r3, #4
 8002636:	3332      	adds	r3, #50	@ 0x32
 8002638:	4a07      	ldr	r2, [pc, #28]	@ (8002658 <UART_SetConfig+0x118>)
 800263a:	fba2 2303 	umull	r2, r3, r2, r3
 800263e:	095b      	lsrs	r3, r3, #5
 8002640:	f003 020f 	and.w	r2, r3, #15
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	440a      	add	r2, r1
 800264a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800264c:	bf00      	nop
 800264e:	3710      	adds	r7, #16
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	40013800 	.word	0x40013800
 8002658:	51eb851f 	.word	0x51eb851f

0800265c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800265c:	b480      	push	{r7}
 800265e:	b085      	sub	sp, #20
 8002660:	af00      	add	r7, sp, #0
 8002662:	4603      	mov	r3, r0
 8002664:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002666:	2300      	movs	r3, #0
 8002668:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800266a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800266e:	2b84      	cmp	r3, #132	@ 0x84
 8002670:	d005      	beq.n	800267e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002672:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	4413      	add	r3, r2
 800267a:	3303      	adds	r3, #3
 800267c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800267e:	68fb      	ldr	r3, [r7, #12]
}
 8002680:	4618      	mov	r0, r3
 8002682:	3714      	adds	r7, #20
 8002684:	46bd      	mov	sp, r7
 8002686:	bc80      	pop	{r7}
 8002688:	4770      	bx	lr

0800268a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800268a:	b580      	push	{r7, lr}
 800268c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800268e:	f000 fe99 	bl	80033c4 <vTaskStartScheduler>
  
  return osOK;
 8002692:	2300      	movs	r3, #0
}
 8002694:	4618      	mov	r0, r3
 8002696:	bd80      	pop	{r7, pc}

08002698 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002698:	b5f0      	push	{r4, r5, r6, r7, lr}
 800269a:	b089      	sub	sp, #36	@ 0x24
 800269c:	af04      	add	r7, sp, #16
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	695b      	ldr	r3, [r3, #20]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d020      	beq.n	80026ec <osThreadCreate+0x54>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	699b      	ldr	r3, [r3, #24]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d01c      	beq.n	80026ec <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	685c      	ldr	r4, [r3, #4]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	691e      	ldr	r6, [r3, #16]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7ff ffc9 	bl	800265c <makeFreeRtosPriority>
 80026ca:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	695b      	ldr	r3, [r3, #20]
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80026d4:	9202      	str	r2, [sp, #8]
 80026d6:	9301      	str	r3, [sp, #4]
 80026d8:	9100      	str	r1, [sp, #0]
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	4632      	mov	r2, r6
 80026de:	4629      	mov	r1, r5
 80026e0:	4620      	mov	r0, r4
 80026e2:	f000 fca1 	bl	8003028 <xTaskCreateStatic>
 80026e6:	4603      	mov	r3, r0
 80026e8:	60fb      	str	r3, [r7, #12]
 80026ea:	e01c      	b.n	8002726 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685c      	ldr	r4, [r3, #4]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80026f8:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002700:	4618      	mov	r0, r3
 8002702:	f7ff ffab 	bl	800265c <makeFreeRtosPriority>
 8002706:	4602      	mov	r2, r0
 8002708:	f107 030c 	add.w	r3, r7, #12
 800270c:	9301      	str	r3, [sp, #4]
 800270e:	9200      	str	r2, [sp, #0]
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	4632      	mov	r2, r6
 8002714:	4629      	mov	r1, r5
 8002716:	4620      	mov	r0, r4
 8002718:	f000 fce6 	bl	80030e8 <xTaskCreate>
 800271c:	4603      	mov	r3, r0
 800271e:	2b01      	cmp	r3, #1
 8002720:	d001      	beq.n	8002726 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002722:	2300      	movs	r3, #0
 8002724:	e000      	b.n	8002728 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002726:	68fb      	ldr	r3, [r7, #12]
}
 8002728:	4618      	mov	r0, r3
 800272a:	3714      	adds	r7, #20
 800272c:	46bd      	mov	sp, r7
 800272e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002730 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <osDelay+0x16>
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	e000      	b.n	8002748 <osDelay+0x18>
 8002746:	2301      	movs	r3, #1
 8002748:	4618      	mov	r0, r3
 800274a:	f000 fe05 	bl	8003358 <vTaskDelay>
  
  return osOK;
 800274e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002750:	4618      	mov	r0, r3
 8002752:	3710      	adds	r7, #16
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}

08002758 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f103 0208 	add.w	r2, r3, #8
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f04f 32ff 	mov.w	r2, #4294967295
 8002770:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f103 0208 	add.w	r2, r3, #8
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f103 0208 	add.w	r2, r3, #8
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800278c:	bf00      	nop
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	bc80      	pop	{r7}
 8002794:	4770      	bx	lr

08002796 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002796:	b480      	push	{r7}
 8002798:	b083      	sub	sp, #12
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80027a4:	bf00      	nop
 80027a6:	370c      	adds	r7, #12
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bc80      	pop	{r7}
 80027ac:	4770      	bx	lr

080027ae <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80027ae:	b480      	push	{r7}
 80027b0:	b085      	sub	sp, #20
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
 80027b6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	68fa      	ldr	r2, [r7, #12]
 80027c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	689a      	ldr	r2, [r3, #8]
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	689b      	ldr	r3, [r3, #8]
 80027d0:	683a      	ldr	r2, [r7, #0]
 80027d2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	683a      	ldr	r2, [r7, #0]
 80027d8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	1c5a      	adds	r2, r3, #1
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	601a      	str	r2, [r3, #0]
}
 80027ea:	bf00      	nop
 80027ec:	3714      	adds	r7, #20
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bc80      	pop	{r7}
 80027f2:	4770      	bx	lr

080027f4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80027f4:	b480      	push	{r7}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800280a:	d103      	bne.n	8002814 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	691b      	ldr	r3, [r3, #16]
 8002810:	60fb      	str	r3, [r7, #12]
 8002812:	e00c      	b.n	800282e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	3308      	adds	r3, #8
 8002818:	60fb      	str	r3, [r7, #12]
 800281a:	e002      	b.n	8002822 <vListInsert+0x2e>
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	60fb      	str	r3, [r7, #12]
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	68ba      	ldr	r2, [r7, #8]
 800282a:	429a      	cmp	r2, r3
 800282c:	d2f6      	bcs.n	800281c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	685a      	ldr	r2, [r3, #4]
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	683a      	ldr	r2, [r7, #0]
 800283c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	68fa      	ldr	r2, [r7, #12]
 8002842:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	683a      	ldr	r2, [r7, #0]
 8002848:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	1c5a      	adds	r2, r3, #1
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	601a      	str	r2, [r3, #0]
}
 800285a:	bf00      	nop
 800285c:	3714      	adds	r7, #20
 800285e:	46bd      	mov	sp, r7
 8002860:	bc80      	pop	{r7}
 8002862:	4770      	bx	lr

08002864 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002864:	b480      	push	{r7}
 8002866:	b085      	sub	sp, #20
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	691b      	ldr	r3, [r3, #16]
 8002870:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	6892      	ldr	r2, [r2, #8]
 800287a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	6852      	ldr	r2, [r2, #4]
 8002884:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	429a      	cmp	r2, r3
 800288e:	d103      	bne.n	8002898 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	689a      	ldr	r2, [r3, #8]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	1e5a      	subs	r2, r3, #1
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3714      	adds	r7, #20
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bc80      	pop	{r7}
 80028b4:	4770      	bx	lr
	...

080028b8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d10b      	bne.n	80028e4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80028cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028d0:	f383 8811 	msr	BASEPRI, r3
 80028d4:	f3bf 8f6f 	isb	sy
 80028d8:	f3bf 8f4f 	dsb	sy
 80028dc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80028de:	bf00      	nop
 80028e0:	bf00      	nop
 80028e2:	e7fd      	b.n	80028e0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80028e4:	f001 fb72 	bl	8003fcc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028f0:	68f9      	ldr	r1, [r7, #12]
 80028f2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80028f4:	fb01 f303 	mul.w	r3, r1, r3
 80028f8:	441a      	add	r2, r3
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2200      	movs	r2, #0
 8002902:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002914:	3b01      	subs	r3, #1
 8002916:	68f9      	ldr	r1, [r7, #12]
 8002918:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800291a:	fb01 f303 	mul.w	r3, r1, r3
 800291e:	441a      	add	r2, r3
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	22ff      	movs	r2, #255	@ 0xff
 8002928:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	22ff      	movs	r2, #255	@ 0xff
 8002930:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d114      	bne.n	8002964 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	691b      	ldr	r3, [r3, #16]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d01a      	beq.n	8002978 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	3310      	adds	r3, #16
 8002946:	4618      	mov	r0, r3
 8002948:	f000 ff86 	bl	8003858 <xTaskRemoveFromEventList>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d012      	beq.n	8002978 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002952:	4b0d      	ldr	r3, [pc, #52]	@ (8002988 <xQueueGenericReset+0xd0>)
 8002954:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002958:	601a      	str	r2, [r3, #0]
 800295a:	f3bf 8f4f 	dsb	sy
 800295e:	f3bf 8f6f 	isb	sy
 8002962:	e009      	b.n	8002978 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	3310      	adds	r3, #16
 8002968:	4618      	mov	r0, r3
 800296a:	f7ff fef5 	bl	8002758 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	3324      	adds	r3, #36	@ 0x24
 8002972:	4618      	mov	r0, r3
 8002974:	f7ff fef0 	bl	8002758 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002978:	f001 fb58 	bl	800402c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800297c:	2301      	movs	r3, #1
}
 800297e:	4618      	mov	r0, r3
 8002980:	3710      	adds	r7, #16
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	e000ed04 	.word	0xe000ed04

0800298c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800298c:	b580      	push	{r7, lr}
 800298e:	b08a      	sub	sp, #40	@ 0x28
 8002990:	af02      	add	r7, sp, #8
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	60b9      	str	r1, [r7, #8]
 8002996:	4613      	mov	r3, r2
 8002998:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d10b      	bne.n	80029b8 <xQueueGenericCreate+0x2c>
	__asm volatile
 80029a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029a4:	f383 8811 	msr	BASEPRI, r3
 80029a8:	f3bf 8f6f 	isb	sy
 80029ac:	f3bf 8f4f 	dsb	sy
 80029b0:	613b      	str	r3, [r7, #16]
}
 80029b2:	bf00      	nop
 80029b4:	bf00      	nop
 80029b6:	e7fd      	b.n	80029b4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	68ba      	ldr	r2, [r7, #8]
 80029bc:	fb02 f303 	mul.w	r3, r2, r3
 80029c0:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	3348      	adds	r3, #72	@ 0x48
 80029c6:	4618      	mov	r0, r3
 80029c8:	f001 fbc2 	bl	8004150 <pvPortMalloc>
 80029cc:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d011      	beq.n	80029f8 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	3348      	adds	r3, #72	@ 0x48
 80029dc:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	2200      	movs	r2, #0
 80029e2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80029e6:	79fa      	ldrb	r2, [r7, #7]
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	9300      	str	r3, [sp, #0]
 80029ec:	4613      	mov	r3, r2
 80029ee:	697a      	ldr	r2, [r7, #20]
 80029f0:	68b9      	ldr	r1, [r7, #8]
 80029f2:	68f8      	ldr	r0, [r7, #12]
 80029f4:	f000 f805 	bl	8002a02 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80029f8:	69bb      	ldr	r3, [r7, #24]
	}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3720      	adds	r7, #32
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b084      	sub	sp, #16
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	60f8      	str	r0, [r7, #12]
 8002a0a:	60b9      	str	r1, [r7, #8]
 8002a0c:	607a      	str	r2, [r7, #4]
 8002a0e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d103      	bne.n	8002a1e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002a16:	69bb      	ldr	r3, [r7, #24]
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	601a      	str	r2, [r3, #0]
 8002a1c:	e002      	b.n	8002a24 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	68fa      	ldr	r2, [r7, #12]
 8002a28:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	68ba      	ldr	r2, [r7, #8]
 8002a2e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002a30:	2101      	movs	r1, #1
 8002a32:	69b8      	ldr	r0, [r7, #24]
 8002a34:	f7ff ff40 	bl	80028b8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002a38:	bf00      	nop
 8002a3a:	3710      	adds	r7, #16
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b08e      	sub	sp, #56	@ 0x38
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	607a      	str	r2, [r7, #4]
 8002a4c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d10b      	bne.n	8002a74 <xQueueGenericSend+0x34>
	__asm volatile
 8002a5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a60:	f383 8811 	msr	BASEPRI, r3
 8002a64:	f3bf 8f6f 	isb	sy
 8002a68:	f3bf 8f4f 	dsb	sy
 8002a6c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002a6e:	bf00      	nop
 8002a70:	bf00      	nop
 8002a72:	e7fd      	b.n	8002a70 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d103      	bne.n	8002a82 <xQueueGenericSend+0x42>
 8002a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d101      	bne.n	8002a86 <xQueueGenericSend+0x46>
 8002a82:	2301      	movs	r3, #1
 8002a84:	e000      	b.n	8002a88 <xQueueGenericSend+0x48>
 8002a86:	2300      	movs	r3, #0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d10b      	bne.n	8002aa4 <xQueueGenericSend+0x64>
	__asm volatile
 8002a8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a90:	f383 8811 	msr	BASEPRI, r3
 8002a94:	f3bf 8f6f 	isb	sy
 8002a98:	f3bf 8f4f 	dsb	sy
 8002a9c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002a9e:	bf00      	nop
 8002aa0:	bf00      	nop
 8002aa2:	e7fd      	b.n	8002aa0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d103      	bne.n	8002ab2 <xQueueGenericSend+0x72>
 8002aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d101      	bne.n	8002ab6 <xQueueGenericSend+0x76>
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e000      	b.n	8002ab8 <xQueueGenericSend+0x78>
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d10b      	bne.n	8002ad4 <xQueueGenericSend+0x94>
	__asm volatile
 8002abc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ac0:	f383 8811 	msr	BASEPRI, r3
 8002ac4:	f3bf 8f6f 	isb	sy
 8002ac8:	f3bf 8f4f 	dsb	sy
 8002acc:	623b      	str	r3, [r7, #32]
}
 8002ace:	bf00      	nop
 8002ad0:	bf00      	nop
 8002ad2:	e7fd      	b.n	8002ad0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002ad4:	f001 f880 	bl	8003bd8 <xTaskGetSchedulerState>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d102      	bne.n	8002ae4 <xQueueGenericSend+0xa4>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d101      	bne.n	8002ae8 <xQueueGenericSend+0xa8>
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e000      	b.n	8002aea <xQueueGenericSend+0xaa>
 8002ae8:	2300      	movs	r3, #0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d10b      	bne.n	8002b06 <xQueueGenericSend+0xc6>
	__asm volatile
 8002aee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002af2:	f383 8811 	msr	BASEPRI, r3
 8002af6:	f3bf 8f6f 	isb	sy
 8002afa:	f3bf 8f4f 	dsb	sy
 8002afe:	61fb      	str	r3, [r7, #28]
}
 8002b00:	bf00      	nop
 8002b02:	bf00      	nop
 8002b04:	e7fd      	b.n	8002b02 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002b06:	f001 fa61 	bl	8003fcc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d302      	bcc.n	8002b1c <xQueueGenericSend+0xdc>
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d129      	bne.n	8002b70 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002b1c:	683a      	ldr	r2, [r7, #0]
 8002b1e:	68b9      	ldr	r1, [r7, #8]
 8002b20:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002b22:	f000 f971 	bl	8002e08 <prvCopyDataToQueue>
 8002b26:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d010      	beq.n	8002b52 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b32:	3324      	adds	r3, #36	@ 0x24
 8002b34:	4618      	mov	r0, r3
 8002b36:	f000 fe8f 	bl	8003858 <xTaskRemoveFromEventList>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d013      	beq.n	8002b68 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002b40:	4b3f      	ldr	r3, [pc, #252]	@ (8002c40 <xQueueGenericSend+0x200>)
 8002b42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b46:	601a      	str	r2, [r3, #0]
 8002b48:	f3bf 8f4f 	dsb	sy
 8002b4c:	f3bf 8f6f 	isb	sy
 8002b50:	e00a      	b.n	8002b68 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002b52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d007      	beq.n	8002b68 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002b58:	4b39      	ldr	r3, [pc, #228]	@ (8002c40 <xQueueGenericSend+0x200>)
 8002b5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b5e:	601a      	str	r2, [r3, #0]
 8002b60:	f3bf 8f4f 	dsb	sy
 8002b64:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002b68:	f001 fa60 	bl	800402c <vPortExitCritical>
				return pdPASS;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e063      	b.n	8002c38 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d103      	bne.n	8002b7e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002b76:	f001 fa59 	bl	800402c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	e05c      	b.n	8002c38 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002b7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d106      	bne.n	8002b92 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002b84:	f107 0314 	add.w	r3, r7, #20
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f000 fec9 	bl	8003920 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002b92:	f001 fa4b 	bl	800402c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002b96:	f000 fc77 	bl	8003488 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002b9a:	f001 fa17 	bl	8003fcc <vPortEnterCritical>
 8002b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ba0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002ba4:	b25b      	sxtb	r3, r3
 8002ba6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002baa:	d103      	bne.n	8002bb4 <xQueueGenericSend+0x174>
 8002bac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002bb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bb6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002bba:	b25b      	sxtb	r3, r3
 8002bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bc0:	d103      	bne.n	8002bca <xQueueGenericSend+0x18a>
 8002bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002bca:	f001 fa2f 	bl	800402c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002bce:	1d3a      	adds	r2, r7, #4
 8002bd0:	f107 0314 	add.w	r3, r7, #20
 8002bd4:	4611      	mov	r1, r2
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f000 feb8 	bl	800394c <xTaskCheckForTimeOut>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d124      	bne.n	8002c2c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002be2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002be4:	f000 fa08 	bl	8002ff8 <prvIsQueueFull>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d018      	beq.n	8002c20 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bf0:	3310      	adds	r3, #16
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	4611      	mov	r1, r2
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f000 fe08 	bl	800380c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002bfc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002bfe:	f000 f993 	bl	8002f28 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002c02:	f000 fc4f 	bl	80034a4 <xTaskResumeAll>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	f47f af7c 	bne.w	8002b06 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002c0e:	4b0c      	ldr	r3, [pc, #48]	@ (8002c40 <xQueueGenericSend+0x200>)
 8002c10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c14:	601a      	str	r2, [r3, #0]
 8002c16:	f3bf 8f4f 	dsb	sy
 8002c1a:	f3bf 8f6f 	isb	sy
 8002c1e:	e772      	b.n	8002b06 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002c20:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002c22:	f000 f981 	bl	8002f28 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002c26:	f000 fc3d 	bl	80034a4 <xTaskResumeAll>
 8002c2a:	e76c      	b.n	8002b06 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002c2c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002c2e:	f000 f97b 	bl	8002f28 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002c32:	f000 fc37 	bl	80034a4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002c36:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3738      	adds	r7, #56	@ 0x38
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	e000ed04 	.word	0xe000ed04

08002c44 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b08c      	sub	sp, #48	@ 0x30
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002c50:	2300      	movs	r3, #0
 8002c52:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002c58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d10b      	bne.n	8002c76 <xQueueReceive+0x32>
	__asm volatile
 8002c5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c62:	f383 8811 	msr	BASEPRI, r3
 8002c66:	f3bf 8f6f 	isb	sy
 8002c6a:	f3bf 8f4f 	dsb	sy
 8002c6e:	623b      	str	r3, [r7, #32]
}
 8002c70:	bf00      	nop
 8002c72:	bf00      	nop
 8002c74:	e7fd      	b.n	8002c72 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d103      	bne.n	8002c84 <xQueueReceive+0x40>
 8002c7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d101      	bne.n	8002c88 <xQueueReceive+0x44>
 8002c84:	2301      	movs	r3, #1
 8002c86:	e000      	b.n	8002c8a <xQueueReceive+0x46>
 8002c88:	2300      	movs	r3, #0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d10b      	bne.n	8002ca6 <xQueueReceive+0x62>
	__asm volatile
 8002c8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c92:	f383 8811 	msr	BASEPRI, r3
 8002c96:	f3bf 8f6f 	isb	sy
 8002c9a:	f3bf 8f4f 	dsb	sy
 8002c9e:	61fb      	str	r3, [r7, #28]
}
 8002ca0:	bf00      	nop
 8002ca2:	bf00      	nop
 8002ca4:	e7fd      	b.n	8002ca2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002ca6:	f000 ff97 	bl	8003bd8 <xTaskGetSchedulerState>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d102      	bne.n	8002cb6 <xQueueReceive+0x72>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d101      	bne.n	8002cba <xQueueReceive+0x76>
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e000      	b.n	8002cbc <xQueueReceive+0x78>
 8002cba:	2300      	movs	r3, #0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d10b      	bne.n	8002cd8 <xQueueReceive+0x94>
	__asm volatile
 8002cc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cc4:	f383 8811 	msr	BASEPRI, r3
 8002cc8:	f3bf 8f6f 	isb	sy
 8002ccc:	f3bf 8f4f 	dsb	sy
 8002cd0:	61bb      	str	r3, [r7, #24]
}
 8002cd2:	bf00      	nop
 8002cd4:	bf00      	nop
 8002cd6:	e7fd      	b.n	8002cd4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002cd8:	f001 f978 	bl	8003fcc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002cdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ce0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d01f      	beq.n	8002d28 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002ce8:	68b9      	ldr	r1, [r7, #8]
 8002cea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002cec:	f000 f8f6 	bl	8002edc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cf2:	1e5a      	subs	r2, r3, #1
 8002cf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cf6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002cf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cfa:	691b      	ldr	r3, [r3, #16]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d00f      	beq.n	8002d20 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d02:	3310      	adds	r3, #16
 8002d04:	4618      	mov	r0, r3
 8002d06:	f000 fda7 	bl	8003858 <xTaskRemoveFromEventList>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d007      	beq.n	8002d20 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002d10:	4b3c      	ldr	r3, [pc, #240]	@ (8002e04 <xQueueReceive+0x1c0>)
 8002d12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d16:	601a      	str	r2, [r3, #0]
 8002d18:	f3bf 8f4f 	dsb	sy
 8002d1c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002d20:	f001 f984 	bl	800402c <vPortExitCritical>
				return pdPASS;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e069      	b.n	8002dfc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d103      	bne.n	8002d36 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002d2e:	f001 f97d 	bl	800402c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002d32:	2300      	movs	r3, #0
 8002d34:	e062      	b.n	8002dfc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002d36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d106      	bne.n	8002d4a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002d3c:	f107 0310 	add.w	r3, r7, #16
 8002d40:	4618      	mov	r0, r3
 8002d42:	f000 fded 	bl	8003920 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002d46:	2301      	movs	r3, #1
 8002d48:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002d4a:	f001 f96f 	bl	800402c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002d4e:	f000 fb9b 	bl	8003488 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002d52:	f001 f93b 	bl	8003fcc <vPortEnterCritical>
 8002d56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d58:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002d5c:	b25b      	sxtb	r3, r3
 8002d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d62:	d103      	bne.n	8002d6c <xQueueReceive+0x128>
 8002d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d6e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002d72:	b25b      	sxtb	r3, r3
 8002d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d78:	d103      	bne.n	8002d82 <xQueueReceive+0x13e>
 8002d7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002d82:	f001 f953 	bl	800402c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002d86:	1d3a      	adds	r2, r7, #4
 8002d88:	f107 0310 	add.w	r3, r7, #16
 8002d8c:	4611      	mov	r1, r2
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f000 fddc 	bl	800394c <xTaskCheckForTimeOut>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d123      	bne.n	8002de2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002d9a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002d9c:	f000 f916 	bl	8002fcc <prvIsQueueEmpty>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d017      	beq.n	8002dd6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002da6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002da8:	3324      	adds	r3, #36	@ 0x24
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	4611      	mov	r1, r2
 8002dae:	4618      	mov	r0, r3
 8002db0:	f000 fd2c 	bl	800380c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002db4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002db6:	f000 f8b7 	bl	8002f28 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002dba:	f000 fb73 	bl	80034a4 <xTaskResumeAll>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d189      	bne.n	8002cd8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8002dc4:	4b0f      	ldr	r3, [pc, #60]	@ (8002e04 <xQueueReceive+0x1c0>)
 8002dc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002dca:	601a      	str	r2, [r3, #0]
 8002dcc:	f3bf 8f4f 	dsb	sy
 8002dd0:	f3bf 8f6f 	isb	sy
 8002dd4:	e780      	b.n	8002cd8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002dd6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002dd8:	f000 f8a6 	bl	8002f28 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002ddc:	f000 fb62 	bl	80034a4 <xTaskResumeAll>
 8002de0:	e77a      	b.n	8002cd8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002de2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002de4:	f000 f8a0 	bl	8002f28 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002de8:	f000 fb5c 	bl	80034a4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002dec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002dee:	f000 f8ed 	bl	8002fcc <prvIsQueueEmpty>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	f43f af6f 	beq.w	8002cd8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002dfa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3730      	adds	r7, #48	@ 0x30
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	e000ed04 	.word	0xe000ed04

08002e08 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b086      	sub	sp, #24
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	60b9      	str	r1, [r7, #8]
 8002e12:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002e14:	2300      	movs	r3, #0
 8002e16:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e1c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d10d      	bne.n	8002e42 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d14d      	bne.n	8002eca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f000 feee 	bl	8003c14 <xTaskPriorityDisinherit>
 8002e38:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	609a      	str	r2, [r3, #8]
 8002e40:	e043      	b.n	8002eca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d119      	bne.n	8002e7c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6858      	ldr	r0, [r3, #4]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e50:	461a      	mov	r2, r3
 8002e52:	68b9      	ldr	r1, [r7, #8]
 8002e54:	f001 fc40 	bl	80046d8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	685a      	ldr	r2, [r3, #4]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e60:	441a      	add	r2, r3
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	685a      	ldr	r2, [r3, #4]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d32b      	bcc.n	8002eca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	605a      	str	r2, [r3, #4]
 8002e7a:	e026      	b.n	8002eca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	68d8      	ldr	r0, [r3, #12]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e84:	461a      	mov	r2, r3
 8002e86:	68b9      	ldr	r1, [r7, #8]
 8002e88:	f001 fc26 	bl	80046d8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	68da      	ldr	r2, [r3, #12]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e94:	425b      	negs	r3, r3
 8002e96:	441a      	add	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	68da      	ldr	r2, [r3, #12]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d207      	bcs.n	8002eb8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	689a      	ldr	r2, [r3, #8]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb0:	425b      	negs	r3, r3
 8002eb2:	441a      	add	r2, r3
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d105      	bne.n	8002eca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d002      	beq.n	8002eca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	3b01      	subs	r3, #1
 8002ec8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	1c5a      	adds	r2, r3, #1
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8002ed2:	697b      	ldr	r3, [r7, #20]
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3718      	adds	r7, #24
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}

08002edc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d018      	beq.n	8002f20 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	68da      	ldr	r2, [r3, #12]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ef6:	441a      	add	r2, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	68da      	ldr	r2, [r3, #12]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d303      	bcc.n	8002f10 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	68d9      	ldr	r1, [r3, #12]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f18:	461a      	mov	r2, r3
 8002f1a:	6838      	ldr	r0, [r7, #0]
 8002f1c:	f001 fbdc 	bl	80046d8 <memcpy>
	}
}
 8002f20:	bf00      	nop
 8002f22:	3708      	adds	r7, #8
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002f30:	f001 f84c 	bl	8003fcc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002f3a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002f3c:	e011      	b.n	8002f62 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d012      	beq.n	8002f6c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	3324      	adds	r3, #36	@ 0x24
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f000 fc84 	bl	8003858 <xTaskRemoveFromEventList>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d001      	beq.n	8002f5a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002f56:	f000 fd5d 	bl	8003a14 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002f5a:	7bfb      	ldrb	r3, [r7, #15]
 8002f5c:	3b01      	subs	r3, #1
 8002f5e:	b2db      	uxtb	r3, r3
 8002f60:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002f62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	dce9      	bgt.n	8002f3e <prvUnlockQueue+0x16>
 8002f6a:	e000      	b.n	8002f6e <prvUnlockQueue+0x46>
					break;
 8002f6c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	22ff      	movs	r2, #255	@ 0xff
 8002f72:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8002f76:	f001 f859 	bl	800402c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002f7a:	f001 f827 	bl	8003fcc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002f84:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002f86:	e011      	b.n	8002fac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	691b      	ldr	r3, [r3, #16]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d012      	beq.n	8002fb6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	3310      	adds	r3, #16
 8002f94:	4618      	mov	r0, r3
 8002f96:	f000 fc5f 	bl	8003858 <xTaskRemoveFromEventList>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d001      	beq.n	8002fa4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002fa0:	f000 fd38 	bl	8003a14 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002fa4:	7bbb      	ldrb	r3, [r7, #14]
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002fac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	dce9      	bgt.n	8002f88 <prvUnlockQueue+0x60>
 8002fb4:	e000      	b.n	8002fb8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002fb6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	22ff      	movs	r2, #255	@ 0xff
 8002fbc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8002fc0:	f001 f834 	bl	800402c <vPortExitCritical>
}
 8002fc4:	bf00      	nop
 8002fc6:	3710      	adds	r7, #16
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b084      	sub	sp, #16
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002fd4:	f000 fffa 	bl	8003fcc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d102      	bne.n	8002fe6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	60fb      	str	r3, [r7, #12]
 8002fe4:	e001      	b.n	8002fea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002fea:	f001 f81f 	bl	800402c <vPortExitCritical>

	return xReturn;
 8002fee:	68fb      	ldr	r3, [r7, #12]
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3710      	adds	r7, #16
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003000:	f000 ffe4 	bl	8003fcc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800300c:	429a      	cmp	r2, r3
 800300e:	d102      	bne.n	8003016 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003010:	2301      	movs	r3, #1
 8003012:	60fb      	str	r3, [r7, #12]
 8003014:	e001      	b.n	800301a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003016:	2300      	movs	r3, #0
 8003018:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800301a:	f001 f807 	bl	800402c <vPortExitCritical>

	return xReturn;
 800301e:	68fb      	ldr	r3, [r7, #12]
}
 8003020:	4618      	mov	r0, r3
 8003022:	3710      	adds	r7, #16
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003028:	b580      	push	{r7, lr}
 800302a:	b08e      	sub	sp, #56	@ 0x38
 800302c:	af04      	add	r7, sp, #16
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	60b9      	str	r1, [r7, #8]
 8003032:	607a      	str	r2, [r7, #4]
 8003034:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003036:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003038:	2b00      	cmp	r3, #0
 800303a:	d10b      	bne.n	8003054 <xTaskCreateStatic+0x2c>
	__asm volatile
 800303c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003040:	f383 8811 	msr	BASEPRI, r3
 8003044:	f3bf 8f6f 	isb	sy
 8003048:	f3bf 8f4f 	dsb	sy
 800304c:	623b      	str	r3, [r7, #32]
}
 800304e:	bf00      	nop
 8003050:	bf00      	nop
 8003052:	e7fd      	b.n	8003050 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003054:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003056:	2b00      	cmp	r3, #0
 8003058:	d10b      	bne.n	8003072 <xTaskCreateStatic+0x4a>
	__asm volatile
 800305a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800305e:	f383 8811 	msr	BASEPRI, r3
 8003062:	f3bf 8f6f 	isb	sy
 8003066:	f3bf 8f4f 	dsb	sy
 800306a:	61fb      	str	r3, [r7, #28]
}
 800306c:	bf00      	nop
 800306e:	bf00      	nop
 8003070:	e7fd      	b.n	800306e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003072:	2354      	movs	r3, #84	@ 0x54
 8003074:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	2b54      	cmp	r3, #84	@ 0x54
 800307a:	d00b      	beq.n	8003094 <xTaskCreateStatic+0x6c>
	__asm volatile
 800307c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003080:	f383 8811 	msr	BASEPRI, r3
 8003084:	f3bf 8f6f 	isb	sy
 8003088:	f3bf 8f4f 	dsb	sy
 800308c:	61bb      	str	r3, [r7, #24]
}
 800308e:	bf00      	nop
 8003090:	bf00      	nop
 8003092:	e7fd      	b.n	8003090 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003094:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003098:	2b00      	cmp	r3, #0
 800309a:	d01e      	beq.n	80030da <xTaskCreateStatic+0xb2>
 800309c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d01b      	beq.n	80030da <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80030a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030a4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80030a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80030aa:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80030ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ae:	2202      	movs	r2, #2
 80030b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80030b4:	2300      	movs	r3, #0
 80030b6:	9303      	str	r3, [sp, #12]
 80030b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ba:	9302      	str	r3, [sp, #8]
 80030bc:	f107 0314 	add.w	r3, r7, #20
 80030c0:	9301      	str	r3, [sp, #4]
 80030c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030c4:	9300      	str	r3, [sp, #0]
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	68b9      	ldr	r1, [r7, #8]
 80030cc:	68f8      	ldr	r0, [r7, #12]
 80030ce:	f000 f850 	bl	8003172 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80030d2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80030d4:	f000 f8d6 	bl	8003284 <prvAddNewTaskToReadyList>
 80030d8:	e001      	b.n	80030de <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80030da:	2300      	movs	r3, #0
 80030dc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80030de:	697b      	ldr	r3, [r7, #20]
	}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3728      	adds	r7, #40	@ 0x28
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b08c      	sub	sp, #48	@ 0x30
 80030ec:	af04      	add	r7, sp, #16
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	603b      	str	r3, [r7, #0]
 80030f4:	4613      	mov	r3, r2
 80030f6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80030f8:	88fb      	ldrh	r3, [r7, #6]
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	4618      	mov	r0, r3
 80030fe:	f001 f827 	bl	8004150 <pvPortMalloc>
 8003102:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d00e      	beq.n	8003128 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800310a:	2054      	movs	r0, #84	@ 0x54
 800310c:	f001 f820 	bl	8004150 <pvPortMalloc>
 8003110:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d003      	beq.n	8003120 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	697a      	ldr	r2, [r7, #20]
 800311c:	631a      	str	r2, [r3, #48]	@ 0x30
 800311e:	e005      	b.n	800312c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003120:	6978      	ldr	r0, [r7, #20]
 8003122:	f001 f8e3 	bl	80042ec <vPortFree>
 8003126:	e001      	b.n	800312c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003128:	2300      	movs	r3, #0
 800312a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d017      	beq.n	8003162 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	2200      	movs	r2, #0
 8003136:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800313a:	88fa      	ldrh	r2, [r7, #6]
 800313c:	2300      	movs	r3, #0
 800313e:	9303      	str	r3, [sp, #12]
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	9302      	str	r3, [sp, #8]
 8003144:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003146:	9301      	str	r3, [sp, #4]
 8003148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800314a:	9300      	str	r3, [sp, #0]
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	68b9      	ldr	r1, [r7, #8]
 8003150:	68f8      	ldr	r0, [r7, #12]
 8003152:	f000 f80e 	bl	8003172 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003156:	69f8      	ldr	r0, [r7, #28]
 8003158:	f000 f894 	bl	8003284 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800315c:	2301      	movs	r3, #1
 800315e:	61bb      	str	r3, [r7, #24]
 8003160:	e002      	b.n	8003168 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003162:	f04f 33ff 	mov.w	r3, #4294967295
 8003166:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003168:	69bb      	ldr	r3, [r7, #24]
	}
 800316a:	4618      	mov	r0, r3
 800316c:	3720      	adds	r7, #32
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}

08003172 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003172:	b580      	push	{r7, lr}
 8003174:	b088      	sub	sp, #32
 8003176:	af00      	add	r7, sp, #0
 8003178:	60f8      	str	r0, [r7, #12]
 800317a:	60b9      	str	r1, [r7, #8]
 800317c:	607a      	str	r2, [r7, #4]
 800317e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003182:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800318a:	3b01      	subs	r3, #1
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	4413      	add	r3, r2
 8003190:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	f023 0307 	bic.w	r3, r3, #7
 8003198:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800319a:	69bb      	ldr	r3, [r7, #24]
 800319c:	f003 0307 	and.w	r3, r3, #7
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d00b      	beq.n	80031bc <prvInitialiseNewTask+0x4a>
	__asm volatile
 80031a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031a8:	f383 8811 	msr	BASEPRI, r3
 80031ac:	f3bf 8f6f 	isb	sy
 80031b0:	f3bf 8f4f 	dsb	sy
 80031b4:	617b      	str	r3, [r7, #20]
}
 80031b6:	bf00      	nop
 80031b8:	bf00      	nop
 80031ba:	e7fd      	b.n	80031b8 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d01f      	beq.n	8003202 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80031c2:	2300      	movs	r3, #0
 80031c4:	61fb      	str	r3, [r7, #28]
 80031c6:	e012      	b.n	80031ee <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80031c8:	68ba      	ldr	r2, [r7, #8]
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	4413      	add	r3, r2
 80031ce:	7819      	ldrb	r1, [r3, #0]
 80031d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	4413      	add	r3, r2
 80031d6:	3334      	adds	r3, #52	@ 0x34
 80031d8:	460a      	mov	r2, r1
 80031da:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80031dc:	68ba      	ldr	r2, [r7, #8]
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	4413      	add	r3, r2
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d006      	beq.n	80031f6 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	3301      	adds	r3, #1
 80031ec:	61fb      	str	r3, [r7, #28]
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	2b0f      	cmp	r3, #15
 80031f2:	d9e9      	bls.n	80031c8 <prvInitialiseNewTask+0x56>
 80031f4:	e000      	b.n	80031f8 <prvInitialiseNewTask+0x86>
			{
				break;
 80031f6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80031f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003200:	e003      	b.n	800320a <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003204:	2200      	movs	r2, #0
 8003206:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800320a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800320c:	2b06      	cmp	r3, #6
 800320e:	d901      	bls.n	8003214 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003210:	2306      	movs	r3, #6
 8003212:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003216:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003218:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800321a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800321c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800321e:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003222:	2200      	movs	r2, #0
 8003224:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003226:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003228:	3304      	adds	r3, #4
 800322a:	4618      	mov	r0, r3
 800322c:	f7ff fab3 	bl	8002796 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003232:	3318      	adds	r3, #24
 8003234:	4618      	mov	r0, r3
 8003236:	f7ff faae 	bl	8002796 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800323a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800323c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800323e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003240:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003242:	f1c3 0207 	rsb	r2, r3, #7
 8003246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003248:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800324a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800324c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800324e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003252:	2200      	movs	r2, #0
 8003254:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003258:	2200      	movs	r2, #0
 800325a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800325e:	683a      	ldr	r2, [r7, #0]
 8003260:	68f9      	ldr	r1, [r7, #12]
 8003262:	69b8      	ldr	r0, [r7, #24]
 8003264:	f000 fdc4 	bl	8003df0 <pxPortInitialiseStack>
 8003268:	4602      	mov	r2, r0
 800326a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800326c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800326e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003270:	2b00      	cmp	r3, #0
 8003272:	d002      	beq.n	800327a <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003274:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003276:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003278:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800327a:	bf00      	nop
 800327c:	3720      	adds	r7, #32
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
	...

08003284 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800328c:	f000 fe9e 	bl	8003fcc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003290:	4b2a      	ldr	r3, [pc, #168]	@ (800333c <prvAddNewTaskToReadyList+0xb8>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	3301      	adds	r3, #1
 8003296:	4a29      	ldr	r2, [pc, #164]	@ (800333c <prvAddNewTaskToReadyList+0xb8>)
 8003298:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800329a:	4b29      	ldr	r3, [pc, #164]	@ (8003340 <prvAddNewTaskToReadyList+0xbc>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d109      	bne.n	80032b6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80032a2:	4a27      	ldr	r2, [pc, #156]	@ (8003340 <prvAddNewTaskToReadyList+0xbc>)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80032a8:	4b24      	ldr	r3, [pc, #144]	@ (800333c <prvAddNewTaskToReadyList+0xb8>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d110      	bne.n	80032d2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80032b0:	f000 fbd4 	bl	8003a5c <prvInitialiseTaskLists>
 80032b4:	e00d      	b.n	80032d2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80032b6:	4b23      	ldr	r3, [pc, #140]	@ (8003344 <prvAddNewTaskToReadyList+0xc0>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d109      	bne.n	80032d2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80032be:	4b20      	ldr	r3, [pc, #128]	@ (8003340 <prvAddNewTaskToReadyList+0xbc>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d802      	bhi.n	80032d2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80032cc:	4a1c      	ldr	r2, [pc, #112]	@ (8003340 <prvAddNewTaskToReadyList+0xbc>)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80032d2:	4b1d      	ldr	r3, [pc, #116]	@ (8003348 <prvAddNewTaskToReadyList+0xc4>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	3301      	adds	r3, #1
 80032d8:	4a1b      	ldr	r2, [pc, #108]	@ (8003348 <prvAddNewTaskToReadyList+0xc4>)
 80032da:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032e0:	2201      	movs	r2, #1
 80032e2:	409a      	lsls	r2, r3
 80032e4:	4b19      	ldr	r3, [pc, #100]	@ (800334c <prvAddNewTaskToReadyList+0xc8>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	4a18      	ldr	r2, [pc, #96]	@ (800334c <prvAddNewTaskToReadyList+0xc8>)
 80032ec:	6013      	str	r3, [r2, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032f2:	4613      	mov	r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	4413      	add	r3, r2
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	4a15      	ldr	r2, [pc, #84]	@ (8003350 <prvAddNewTaskToReadyList+0xcc>)
 80032fc:	441a      	add	r2, r3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	3304      	adds	r3, #4
 8003302:	4619      	mov	r1, r3
 8003304:	4610      	mov	r0, r2
 8003306:	f7ff fa52 	bl	80027ae <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800330a:	f000 fe8f 	bl	800402c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800330e:	4b0d      	ldr	r3, [pc, #52]	@ (8003344 <prvAddNewTaskToReadyList+0xc0>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d00e      	beq.n	8003334 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003316:	4b0a      	ldr	r3, [pc, #40]	@ (8003340 <prvAddNewTaskToReadyList+0xbc>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003320:	429a      	cmp	r2, r3
 8003322:	d207      	bcs.n	8003334 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003324:	4b0b      	ldr	r3, [pc, #44]	@ (8003354 <prvAddNewTaskToReadyList+0xd0>)
 8003326:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800332a:	601a      	str	r2, [r3, #0]
 800332c:	f3bf 8f4f 	dsb	sy
 8003330:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003334:	bf00      	nop
 8003336:	3708      	adds	r7, #8
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	20000490 	.word	0x20000490
 8003340:	20000390 	.word	0x20000390
 8003344:	2000049c 	.word	0x2000049c
 8003348:	200004ac 	.word	0x200004ac
 800334c:	20000498 	.word	0x20000498
 8003350:	20000394 	.word	0x20000394
 8003354:	e000ed04 	.word	0xe000ed04

08003358 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003360:	2300      	movs	r3, #0
 8003362:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d018      	beq.n	800339c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800336a:	4b14      	ldr	r3, [pc, #80]	@ (80033bc <vTaskDelay+0x64>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d00b      	beq.n	800338a <vTaskDelay+0x32>
	__asm volatile
 8003372:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003376:	f383 8811 	msr	BASEPRI, r3
 800337a:	f3bf 8f6f 	isb	sy
 800337e:	f3bf 8f4f 	dsb	sy
 8003382:	60bb      	str	r3, [r7, #8]
}
 8003384:	bf00      	nop
 8003386:	bf00      	nop
 8003388:	e7fd      	b.n	8003386 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800338a:	f000 f87d 	bl	8003488 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800338e:	2100      	movs	r1, #0
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f000 fcc7 	bl	8003d24 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003396:	f000 f885 	bl	80034a4 <xTaskResumeAll>
 800339a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d107      	bne.n	80033b2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80033a2:	4b07      	ldr	r3, [pc, #28]	@ (80033c0 <vTaskDelay+0x68>)
 80033a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80033a8:	601a      	str	r2, [r3, #0]
 80033aa:	f3bf 8f4f 	dsb	sy
 80033ae:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80033b2:	bf00      	nop
 80033b4:	3710      	adds	r7, #16
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	200004b8 	.word	0x200004b8
 80033c0:	e000ed04 	.word	0xe000ed04

080033c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b08a      	sub	sp, #40	@ 0x28
 80033c8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80033ca:	2300      	movs	r3, #0
 80033cc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80033ce:	2300      	movs	r3, #0
 80033d0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80033d2:	463a      	mov	r2, r7
 80033d4:	1d39      	adds	r1, r7, #4
 80033d6:	f107 0308 	add.w	r3, r7, #8
 80033da:	4618      	mov	r0, r3
 80033dc:	f7fd fa68 	bl	80008b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80033e0:	6839      	ldr	r1, [r7, #0]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	68ba      	ldr	r2, [r7, #8]
 80033e6:	9202      	str	r2, [sp, #8]
 80033e8:	9301      	str	r3, [sp, #4]
 80033ea:	2300      	movs	r3, #0
 80033ec:	9300      	str	r3, [sp, #0]
 80033ee:	2300      	movs	r3, #0
 80033f0:	460a      	mov	r2, r1
 80033f2:	491f      	ldr	r1, [pc, #124]	@ (8003470 <vTaskStartScheduler+0xac>)
 80033f4:	481f      	ldr	r0, [pc, #124]	@ (8003474 <vTaskStartScheduler+0xb0>)
 80033f6:	f7ff fe17 	bl	8003028 <xTaskCreateStatic>
 80033fa:	4603      	mov	r3, r0
 80033fc:	4a1e      	ldr	r2, [pc, #120]	@ (8003478 <vTaskStartScheduler+0xb4>)
 80033fe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003400:	4b1d      	ldr	r3, [pc, #116]	@ (8003478 <vTaskStartScheduler+0xb4>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d002      	beq.n	800340e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003408:	2301      	movs	r3, #1
 800340a:	617b      	str	r3, [r7, #20]
 800340c:	e001      	b.n	8003412 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800340e:	2300      	movs	r3, #0
 8003410:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	2b01      	cmp	r3, #1
 8003416:	d116      	bne.n	8003446 <vTaskStartScheduler+0x82>
	__asm volatile
 8003418:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800341c:	f383 8811 	msr	BASEPRI, r3
 8003420:	f3bf 8f6f 	isb	sy
 8003424:	f3bf 8f4f 	dsb	sy
 8003428:	613b      	str	r3, [r7, #16]
}
 800342a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800342c:	4b13      	ldr	r3, [pc, #76]	@ (800347c <vTaskStartScheduler+0xb8>)
 800342e:	f04f 32ff 	mov.w	r2, #4294967295
 8003432:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003434:	4b12      	ldr	r3, [pc, #72]	@ (8003480 <vTaskStartScheduler+0xbc>)
 8003436:	2201      	movs	r2, #1
 8003438:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800343a:	4b12      	ldr	r3, [pc, #72]	@ (8003484 <vTaskStartScheduler+0xc0>)
 800343c:	2200      	movs	r2, #0
 800343e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003440:	f000 fd52 	bl	8003ee8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003444:	e00f      	b.n	8003466 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800344c:	d10b      	bne.n	8003466 <vTaskStartScheduler+0xa2>
	__asm volatile
 800344e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003452:	f383 8811 	msr	BASEPRI, r3
 8003456:	f3bf 8f6f 	isb	sy
 800345a:	f3bf 8f4f 	dsb	sy
 800345e:	60fb      	str	r3, [r7, #12]
}
 8003460:	bf00      	nop
 8003462:	bf00      	nop
 8003464:	e7fd      	b.n	8003462 <vTaskStartScheduler+0x9e>
}
 8003466:	bf00      	nop
 8003468:	3718      	adds	r7, #24
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	080056d4 	.word	0x080056d4
 8003474:	08003a2d 	.word	0x08003a2d
 8003478:	200004b4 	.word	0x200004b4
 800347c:	200004b0 	.word	0x200004b0
 8003480:	2000049c 	.word	0x2000049c
 8003484:	20000494 	.word	0x20000494

08003488 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003488:	b480      	push	{r7}
 800348a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800348c:	4b04      	ldr	r3, [pc, #16]	@ (80034a0 <vTaskSuspendAll+0x18>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	3301      	adds	r3, #1
 8003492:	4a03      	ldr	r2, [pc, #12]	@ (80034a0 <vTaskSuspendAll+0x18>)
 8003494:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003496:	bf00      	nop
 8003498:	46bd      	mov	sp, r7
 800349a:	bc80      	pop	{r7}
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop
 80034a0:	200004b8 	.word	0x200004b8

080034a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80034aa:	2300      	movs	r3, #0
 80034ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80034ae:	2300      	movs	r3, #0
 80034b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80034b2:	4b42      	ldr	r3, [pc, #264]	@ (80035bc <xTaskResumeAll+0x118>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d10b      	bne.n	80034d2 <xTaskResumeAll+0x2e>
	__asm volatile
 80034ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034be:	f383 8811 	msr	BASEPRI, r3
 80034c2:	f3bf 8f6f 	isb	sy
 80034c6:	f3bf 8f4f 	dsb	sy
 80034ca:	603b      	str	r3, [r7, #0]
}
 80034cc:	bf00      	nop
 80034ce:	bf00      	nop
 80034d0:	e7fd      	b.n	80034ce <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80034d2:	f000 fd7b 	bl	8003fcc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80034d6:	4b39      	ldr	r3, [pc, #228]	@ (80035bc <xTaskResumeAll+0x118>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	3b01      	subs	r3, #1
 80034dc:	4a37      	ldr	r2, [pc, #220]	@ (80035bc <xTaskResumeAll+0x118>)
 80034de:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034e0:	4b36      	ldr	r3, [pc, #216]	@ (80035bc <xTaskResumeAll+0x118>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d161      	bne.n	80035ac <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80034e8:	4b35      	ldr	r3, [pc, #212]	@ (80035c0 <xTaskResumeAll+0x11c>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d05d      	beq.n	80035ac <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80034f0:	e02e      	b.n	8003550 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034f2:	4b34      	ldr	r3, [pc, #208]	@ (80035c4 <xTaskResumeAll+0x120>)
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	3318      	adds	r3, #24
 80034fe:	4618      	mov	r0, r3
 8003500:	f7ff f9b0 	bl	8002864 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	3304      	adds	r3, #4
 8003508:	4618      	mov	r0, r3
 800350a:	f7ff f9ab 	bl	8002864 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003512:	2201      	movs	r2, #1
 8003514:	409a      	lsls	r2, r3
 8003516:	4b2c      	ldr	r3, [pc, #176]	@ (80035c8 <xTaskResumeAll+0x124>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	4313      	orrs	r3, r2
 800351c:	4a2a      	ldr	r2, [pc, #168]	@ (80035c8 <xTaskResumeAll+0x124>)
 800351e:	6013      	str	r3, [r2, #0]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003524:	4613      	mov	r3, r2
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	4413      	add	r3, r2
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	4a27      	ldr	r2, [pc, #156]	@ (80035cc <xTaskResumeAll+0x128>)
 800352e:	441a      	add	r2, r3
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	3304      	adds	r3, #4
 8003534:	4619      	mov	r1, r3
 8003536:	4610      	mov	r0, r2
 8003538:	f7ff f939 	bl	80027ae <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003540:	4b23      	ldr	r3, [pc, #140]	@ (80035d0 <xTaskResumeAll+0x12c>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003546:	429a      	cmp	r2, r3
 8003548:	d302      	bcc.n	8003550 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800354a:	4b22      	ldr	r3, [pc, #136]	@ (80035d4 <xTaskResumeAll+0x130>)
 800354c:	2201      	movs	r2, #1
 800354e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003550:	4b1c      	ldr	r3, [pc, #112]	@ (80035c4 <xTaskResumeAll+0x120>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d1cc      	bne.n	80034f2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d001      	beq.n	8003562 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800355e:	f000 fb1b 	bl	8003b98 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003562:	4b1d      	ldr	r3, [pc, #116]	@ (80035d8 <xTaskResumeAll+0x134>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d010      	beq.n	8003590 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800356e:	f000 f837 	bl	80035e0 <xTaskIncrementTick>
 8003572:	4603      	mov	r3, r0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d002      	beq.n	800357e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003578:	4b16      	ldr	r3, [pc, #88]	@ (80035d4 <xTaskResumeAll+0x130>)
 800357a:	2201      	movs	r2, #1
 800357c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	3b01      	subs	r3, #1
 8003582:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d1f1      	bne.n	800356e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800358a:	4b13      	ldr	r3, [pc, #76]	@ (80035d8 <xTaskResumeAll+0x134>)
 800358c:	2200      	movs	r2, #0
 800358e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003590:	4b10      	ldr	r3, [pc, #64]	@ (80035d4 <xTaskResumeAll+0x130>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d009      	beq.n	80035ac <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003598:	2301      	movs	r3, #1
 800359a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800359c:	4b0f      	ldr	r3, [pc, #60]	@ (80035dc <xTaskResumeAll+0x138>)
 800359e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80035a2:	601a      	str	r2, [r3, #0]
 80035a4:	f3bf 8f4f 	dsb	sy
 80035a8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80035ac:	f000 fd3e 	bl	800402c <vPortExitCritical>

	return xAlreadyYielded;
 80035b0:	68bb      	ldr	r3, [r7, #8]
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3710      	adds	r7, #16
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	200004b8 	.word	0x200004b8
 80035c0:	20000490 	.word	0x20000490
 80035c4:	20000450 	.word	0x20000450
 80035c8:	20000498 	.word	0x20000498
 80035cc:	20000394 	.word	0x20000394
 80035d0:	20000390 	.word	0x20000390
 80035d4:	200004a4 	.word	0x200004a4
 80035d8:	200004a0 	.word	0x200004a0
 80035dc:	e000ed04 	.word	0xe000ed04

080035e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b086      	sub	sp, #24
 80035e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80035e6:	2300      	movs	r3, #0
 80035e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035ea:	4b4f      	ldr	r3, [pc, #316]	@ (8003728 <xTaskIncrementTick+0x148>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	f040 808f 	bne.w	8003712 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80035f4:	4b4d      	ldr	r3, [pc, #308]	@ (800372c <xTaskIncrementTick+0x14c>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	3301      	adds	r3, #1
 80035fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80035fc:	4a4b      	ldr	r2, [pc, #300]	@ (800372c <xTaskIncrementTick+0x14c>)
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d121      	bne.n	800364c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003608:	4b49      	ldr	r3, [pc, #292]	@ (8003730 <xTaskIncrementTick+0x150>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00b      	beq.n	800362a <xTaskIncrementTick+0x4a>
	__asm volatile
 8003612:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003616:	f383 8811 	msr	BASEPRI, r3
 800361a:	f3bf 8f6f 	isb	sy
 800361e:	f3bf 8f4f 	dsb	sy
 8003622:	603b      	str	r3, [r7, #0]
}
 8003624:	bf00      	nop
 8003626:	bf00      	nop
 8003628:	e7fd      	b.n	8003626 <xTaskIncrementTick+0x46>
 800362a:	4b41      	ldr	r3, [pc, #260]	@ (8003730 <xTaskIncrementTick+0x150>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	60fb      	str	r3, [r7, #12]
 8003630:	4b40      	ldr	r3, [pc, #256]	@ (8003734 <xTaskIncrementTick+0x154>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a3e      	ldr	r2, [pc, #248]	@ (8003730 <xTaskIncrementTick+0x150>)
 8003636:	6013      	str	r3, [r2, #0]
 8003638:	4a3e      	ldr	r2, [pc, #248]	@ (8003734 <xTaskIncrementTick+0x154>)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6013      	str	r3, [r2, #0]
 800363e:	4b3e      	ldr	r3, [pc, #248]	@ (8003738 <xTaskIncrementTick+0x158>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	3301      	adds	r3, #1
 8003644:	4a3c      	ldr	r2, [pc, #240]	@ (8003738 <xTaskIncrementTick+0x158>)
 8003646:	6013      	str	r3, [r2, #0]
 8003648:	f000 faa6 	bl	8003b98 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800364c:	4b3b      	ldr	r3, [pc, #236]	@ (800373c <xTaskIncrementTick+0x15c>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	693a      	ldr	r2, [r7, #16]
 8003652:	429a      	cmp	r2, r3
 8003654:	d348      	bcc.n	80036e8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003656:	4b36      	ldr	r3, [pc, #216]	@ (8003730 <xTaskIncrementTick+0x150>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d104      	bne.n	800366a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003660:	4b36      	ldr	r3, [pc, #216]	@ (800373c <xTaskIncrementTick+0x15c>)
 8003662:	f04f 32ff 	mov.w	r2, #4294967295
 8003666:	601a      	str	r2, [r3, #0]
					break;
 8003668:	e03e      	b.n	80036e8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800366a:	4b31      	ldr	r3, [pc, #196]	@ (8003730 <xTaskIncrementTick+0x150>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800367a:	693a      	ldr	r2, [r7, #16]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	429a      	cmp	r2, r3
 8003680:	d203      	bcs.n	800368a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003682:	4a2e      	ldr	r2, [pc, #184]	@ (800373c <xTaskIncrementTick+0x15c>)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003688:	e02e      	b.n	80036e8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	3304      	adds	r3, #4
 800368e:	4618      	mov	r0, r3
 8003690:	f7ff f8e8 	bl	8002864 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003698:	2b00      	cmp	r3, #0
 800369a:	d004      	beq.n	80036a6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	3318      	adds	r3, #24
 80036a0:	4618      	mov	r0, r3
 80036a2:	f7ff f8df 	bl	8002864 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036aa:	2201      	movs	r2, #1
 80036ac:	409a      	lsls	r2, r3
 80036ae:	4b24      	ldr	r3, [pc, #144]	@ (8003740 <xTaskIncrementTick+0x160>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	4a22      	ldr	r2, [pc, #136]	@ (8003740 <xTaskIncrementTick+0x160>)
 80036b6:	6013      	str	r3, [r2, #0]
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036bc:	4613      	mov	r3, r2
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	4413      	add	r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	4a1f      	ldr	r2, [pc, #124]	@ (8003744 <xTaskIncrementTick+0x164>)
 80036c6:	441a      	add	r2, r3
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	3304      	adds	r3, #4
 80036cc:	4619      	mov	r1, r3
 80036ce:	4610      	mov	r0, r2
 80036d0:	f7ff f86d 	bl	80027ae <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036d8:	4b1b      	ldr	r3, [pc, #108]	@ (8003748 <xTaskIncrementTick+0x168>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036de:	429a      	cmp	r2, r3
 80036e0:	d3b9      	bcc.n	8003656 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80036e2:	2301      	movs	r3, #1
 80036e4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80036e6:	e7b6      	b.n	8003656 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80036e8:	4b17      	ldr	r3, [pc, #92]	@ (8003748 <xTaskIncrementTick+0x168>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036ee:	4915      	ldr	r1, [pc, #84]	@ (8003744 <xTaskIncrementTick+0x164>)
 80036f0:	4613      	mov	r3, r2
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	4413      	add	r3, r2
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	440b      	add	r3, r1
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d901      	bls.n	8003704 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003700:	2301      	movs	r3, #1
 8003702:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003704:	4b11      	ldr	r3, [pc, #68]	@ (800374c <xTaskIncrementTick+0x16c>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d007      	beq.n	800371c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800370c:	2301      	movs	r3, #1
 800370e:	617b      	str	r3, [r7, #20]
 8003710:	e004      	b.n	800371c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003712:	4b0f      	ldr	r3, [pc, #60]	@ (8003750 <xTaskIncrementTick+0x170>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	3301      	adds	r3, #1
 8003718:	4a0d      	ldr	r2, [pc, #52]	@ (8003750 <xTaskIncrementTick+0x170>)
 800371a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800371c:	697b      	ldr	r3, [r7, #20]
}
 800371e:	4618      	mov	r0, r3
 8003720:	3718      	adds	r7, #24
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	200004b8 	.word	0x200004b8
 800372c:	20000494 	.word	0x20000494
 8003730:	20000448 	.word	0x20000448
 8003734:	2000044c 	.word	0x2000044c
 8003738:	200004a8 	.word	0x200004a8
 800373c:	200004b0 	.word	0x200004b0
 8003740:	20000498 	.word	0x20000498
 8003744:	20000394 	.word	0x20000394
 8003748:	20000390 	.word	0x20000390
 800374c:	200004a4 	.word	0x200004a4
 8003750:	200004a0 	.word	0x200004a0

08003754 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003754:	b480      	push	{r7}
 8003756:	b087      	sub	sp, #28
 8003758:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800375a:	4b27      	ldr	r3, [pc, #156]	@ (80037f8 <vTaskSwitchContext+0xa4>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d003      	beq.n	800376a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003762:	4b26      	ldr	r3, [pc, #152]	@ (80037fc <vTaskSwitchContext+0xa8>)
 8003764:	2201      	movs	r2, #1
 8003766:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003768:	e040      	b.n	80037ec <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800376a:	4b24      	ldr	r3, [pc, #144]	@ (80037fc <vTaskSwitchContext+0xa8>)
 800376c:	2200      	movs	r2, #0
 800376e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003770:	4b23      	ldr	r3, [pc, #140]	@ (8003800 <vTaskSwitchContext+0xac>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	fab3 f383 	clz	r3, r3
 800377c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800377e:	7afb      	ldrb	r3, [r7, #11]
 8003780:	f1c3 031f 	rsb	r3, r3, #31
 8003784:	617b      	str	r3, [r7, #20]
 8003786:	491f      	ldr	r1, [pc, #124]	@ (8003804 <vTaskSwitchContext+0xb0>)
 8003788:	697a      	ldr	r2, [r7, #20]
 800378a:	4613      	mov	r3, r2
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	4413      	add	r3, r2
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	440b      	add	r3, r1
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d10b      	bne.n	80037b2 <vTaskSwitchContext+0x5e>
	__asm volatile
 800379a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800379e:	f383 8811 	msr	BASEPRI, r3
 80037a2:	f3bf 8f6f 	isb	sy
 80037a6:	f3bf 8f4f 	dsb	sy
 80037aa:	607b      	str	r3, [r7, #4]
}
 80037ac:	bf00      	nop
 80037ae:	bf00      	nop
 80037b0:	e7fd      	b.n	80037ae <vTaskSwitchContext+0x5a>
 80037b2:	697a      	ldr	r2, [r7, #20]
 80037b4:	4613      	mov	r3, r2
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	4413      	add	r3, r2
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	4a11      	ldr	r2, [pc, #68]	@ (8003804 <vTaskSwitchContext+0xb0>)
 80037be:	4413      	add	r3, r2
 80037c0:	613b      	str	r3, [r7, #16]
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	685a      	ldr	r2, [r3, #4]
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	605a      	str	r2, [r3, #4]
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	685a      	ldr	r2, [r3, #4]
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	3308      	adds	r3, #8
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d104      	bne.n	80037e2 <vTaskSwitchContext+0x8e>
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	685a      	ldr	r2, [r3, #4]
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	605a      	str	r2, [r3, #4]
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	4a07      	ldr	r2, [pc, #28]	@ (8003808 <vTaskSwitchContext+0xb4>)
 80037ea:	6013      	str	r3, [r2, #0]
}
 80037ec:	bf00      	nop
 80037ee:	371c      	adds	r7, #28
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bc80      	pop	{r7}
 80037f4:	4770      	bx	lr
 80037f6:	bf00      	nop
 80037f8:	200004b8 	.word	0x200004b8
 80037fc:	200004a4 	.word	0x200004a4
 8003800:	20000498 	.word	0x20000498
 8003804:	20000394 	.word	0x20000394
 8003808:	20000390 	.word	0x20000390

0800380c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d10b      	bne.n	8003834 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800381c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003820:	f383 8811 	msr	BASEPRI, r3
 8003824:	f3bf 8f6f 	isb	sy
 8003828:	f3bf 8f4f 	dsb	sy
 800382c:	60fb      	str	r3, [r7, #12]
}
 800382e:	bf00      	nop
 8003830:	bf00      	nop
 8003832:	e7fd      	b.n	8003830 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003834:	4b07      	ldr	r3, [pc, #28]	@ (8003854 <vTaskPlaceOnEventList+0x48>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	3318      	adds	r3, #24
 800383a:	4619      	mov	r1, r3
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f7fe ffd9 	bl	80027f4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003842:	2101      	movs	r1, #1
 8003844:	6838      	ldr	r0, [r7, #0]
 8003846:	f000 fa6d 	bl	8003d24 <prvAddCurrentTaskToDelayedList>
}
 800384a:	bf00      	nop
 800384c:	3710      	adds	r7, #16
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	20000390 	.word	0x20000390

08003858 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b086      	sub	sp, #24
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d10b      	bne.n	8003886 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800386e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003872:	f383 8811 	msr	BASEPRI, r3
 8003876:	f3bf 8f6f 	isb	sy
 800387a:	f3bf 8f4f 	dsb	sy
 800387e:	60fb      	str	r3, [r7, #12]
}
 8003880:	bf00      	nop
 8003882:	bf00      	nop
 8003884:	e7fd      	b.n	8003882 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	3318      	adds	r3, #24
 800388a:	4618      	mov	r0, r3
 800388c:	f7fe ffea 	bl	8002864 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003890:	4b1d      	ldr	r3, [pc, #116]	@ (8003908 <xTaskRemoveFromEventList+0xb0>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d11c      	bne.n	80038d2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	3304      	adds	r3, #4
 800389c:	4618      	mov	r0, r3
 800389e:	f7fe ffe1 	bl	8002864 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038a6:	2201      	movs	r2, #1
 80038a8:	409a      	lsls	r2, r3
 80038aa:	4b18      	ldr	r3, [pc, #96]	@ (800390c <xTaskRemoveFromEventList+0xb4>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	4a16      	ldr	r2, [pc, #88]	@ (800390c <xTaskRemoveFromEventList+0xb4>)
 80038b2:	6013      	str	r3, [r2, #0]
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038b8:	4613      	mov	r3, r2
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	4413      	add	r3, r2
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	4a13      	ldr	r2, [pc, #76]	@ (8003910 <xTaskRemoveFromEventList+0xb8>)
 80038c2:	441a      	add	r2, r3
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	3304      	adds	r3, #4
 80038c8:	4619      	mov	r1, r3
 80038ca:	4610      	mov	r0, r2
 80038cc:	f7fe ff6f 	bl	80027ae <vListInsertEnd>
 80038d0:	e005      	b.n	80038de <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	3318      	adds	r3, #24
 80038d6:	4619      	mov	r1, r3
 80038d8:	480e      	ldr	r0, [pc, #56]	@ (8003914 <xTaskRemoveFromEventList+0xbc>)
 80038da:	f7fe ff68 	bl	80027ae <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80038de:	693b      	ldr	r3, [r7, #16]
 80038e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038e2:	4b0d      	ldr	r3, [pc, #52]	@ (8003918 <xTaskRemoveFromEventList+0xc0>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d905      	bls.n	80038f8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80038ec:	2301      	movs	r3, #1
 80038ee:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80038f0:	4b0a      	ldr	r3, [pc, #40]	@ (800391c <xTaskRemoveFromEventList+0xc4>)
 80038f2:	2201      	movs	r2, #1
 80038f4:	601a      	str	r2, [r3, #0]
 80038f6:	e001      	b.n	80038fc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80038f8:	2300      	movs	r3, #0
 80038fa:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80038fc:	697b      	ldr	r3, [r7, #20]
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3718      	adds	r7, #24
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	200004b8 	.word	0x200004b8
 800390c:	20000498 	.word	0x20000498
 8003910:	20000394 	.word	0x20000394
 8003914:	20000450 	.word	0x20000450
 8003918:	20000390 	.word	0x20000390
 800391c:	200004a4 	.word	0x200004a4

08003920 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003928:	4b06      	ldr	r3, [pc, #24]	@ (8003944 <vTaskInternalSetTimeOutState+0x24>)
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003930:	4b05      	ldr	r3, [pc, #20]	@ (8003948 <vTaskInternalSetTimeOutState+0x28>)
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	605a      	str	r2, [r3, #4]
}
 8003938:	bf00      	nop
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	bc80      	pop	{r7}
 8003940:	4770      	bx	lr
 8003942:	bf00      	nop
 8003944:	200004a8 	.word	0x200004a8
 8003948:	20000494 	.word	0x20000494

0800394c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b088      	sub	sp, #32
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d10b      	bne.n	8003974 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800395c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003960:	f383 8811 	msr	BASEPRI, r3
 8003964:	f3bf 8f6f 	isb	sy
 8003968:	f3bf 8f4f 	dsb	sy
 800396c:	613b      	str	r3, [r7, #16]
}
 800396e:	bf00      	nop
 8003970:	bf00      	nop
 8003972:	e7fd      	b.n	8003970 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d10b      	bne.n	8003992 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800397a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800397e:	f383 8811 	msr	BASEPRI, r3
 8003982:	f3bf 8f6f 	isb	sy
 8003986:	f3bf 8f4f 	dsb	sy
 800398a:	60fb      	str	r3, [r7, #12]
}
 800398c:	bf00      	nop
 800398e:	bf00      	nop
 8003990:	e7fd      	b.n	800398e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8003992:	f000 fb1b 	bl	8003fcc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003996:	4b1d      	ldr	r3, [pc, #116]	@ (8003a0c <xTaskCheckForTimeOut+0xc0>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	69ba      	ldr	r2, [r7, #24]
 80039a2:	1ad3      	subs	r3, r2, r3
 80039a4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ae:	d102      	bne.n	80039b6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80039b0:	2300      	movs	r3, #0
 80039b2:	61fb      	str	r3, [r7, #28]
 80039b4:	e023      	b.n	80039fe <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	4b15      	ldr	r3, [pc, #84]	@ (8003a10 <xTaskCheckForTimeOut+0xc4>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	429a      	cmp	r2, r3
 80039c0:	d007      	beq.n	80039d2 <xTaskCheckForTimeOut+0x86>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	69ba      	ldr	r2, [r7, #24]
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d302      	bcc.n	80039d2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80039cc:	2301      	movs	r3, #1
 80039ce:	61fb      	str	r3, [r7, #28]
 80039d0:	e015      	b.n	80039fe <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	697a      	ldr	r2, [r7, #20]
 80039d8:	429a      	cmp	r2, r3
 80039da:	d20b      	bcs.n	80039f4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	1ad2      	subs	r2, r2, r3
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f7ff ff99 	bl	8003920 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80039ee:	2300      	movs	r3, #0
 80039f0:	61fb      	str	r3, [r7, #28]
 80039f2:	e004      	b.n	80039fe <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	2200      	movs	r2, #0
 80039f8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80039fa:	2301      	movs	r3, #1
 80039fc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80039fe:	f000 fb15 	bl	800402c <vPortExitCritical>

	return xReturn;
 8003a02:	69fb      	ldr	r3, [r7, #28]
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3720      	adds	r7, #32
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	20000494 	.word	0x20000494
 8003a10:	200004a8 	.word	0x200004a8

08003a14 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003a14:	b480      	push	{r7}
 8003a16:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003a18:	4b03      	ldr	r3, [pc, #12]	@ (8003a28 <vTaskMissedYield+0x14>)
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	601a      	str	r2, [r3, #0]
}
 8003a1e:	bf00      	nop
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bc80      	pop	{r7}
 8003a24:	4770      	bx	lr
 8003a26:	bf00      	nop
 8003a28:	200004a4 	.word	0x200004a4

08003a2c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003a34:	f000 f852 	bl	8003adc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003a38:	4b06      	ldr	r3, [pc, #24]	@ (8003a54 <prvIdleTask+0x28>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d9f9      	bls.n	8003a34 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003a40:	4b05      	ldr	r3, [pc, #20]	@ (8003a58 <prvIdleTask+0x2c>)
 8003a42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a46:	601a      	str	r2, [r3, #0]
 8003a48:	f3bf 8f4f 	dsb	sy
 8003a4c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003a50:	e7f0      	b.n	8003a34 <prvIdleTask+0x8>
 8003a52:	bf00      	nop
 8003a54:	20000394 	.word	0x20000394
 8003a58:	e000ed04 	.word	0xe000ed04

08003a5c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b082      	sub	sp, #8
 8003a60:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a62:	2300      	movs	r3, #0
 8003a64:	607b      	str	r3, [r7, #4]
 8003a66:	e00c      	b.n	8003a82 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	4613      	mov	r3, r2
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	4413      	add	r3, r2
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	4a12      	ldr	r2, [pc, #72]	@ (8003abc <prvInitialiseTaskLists+0x60>)
 8003a74:	4413      	add	r3, r2
 8003a76:	4618      	mov	r0, r3
 8003a78:	f7fe fe6e 	bl	8002758 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	3301      	adds	r3, #1
 8003a80:	607b      	str	r3, [r7, #4]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2b06      	cmp	r3, #6
 8003a86:	d9ef      	bls.n	8003a68 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003a88:	480d      	ldr	r0, [pc, #52]	@ (8003ac0 <prvInitialiseTaskLists+0x64>)
 8003a8a:	f7fe fe65 	bl	8002758 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003a8e:	480d      	ldr	r0, [pc, #52]	@ (8003ac4 <prvInitialiseTaskLists+0x68>)
 8003a90:	f7fe fe62 	bl	8002758 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003a94:	480c      	ldr	r0, [pc, #48]	@ (8003ac8 <prvInitialiseTaskLists+0x6c>)
 8003a96:	f7fe fe5f 	bl	8002758 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003a9a:	480c      	ldr	r0, [pc, #48]	@ (8003acc <prvInitialiseTaskLists+0x70>)
 8003a9c:	f7fe fe5c 	bl	8002758 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003aa0:	480b      	ldr	r0, [pc, #44]	@ (8003ad0 <prvInitialiseTaskLists+0x74>)
 8003aa2:	f7fe fe59 	bl	8002758 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003aa6:	4b0b      	ldr	r3, [pc, #44]	@ (8003ad4 <prvInitialiseTaskLists+0x78>)
 8003aa8:	4a05      	ldr	r2, [pc, #20]	@ (8003ac0 <prvInitialiseTaskLists+0x64>)
 8003aaa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003aac:	4b0a      	ldr	r3, [pc, #40]	@ (8003ad8 <prvInitialiseTaskLists+0x7c>)
 8003aae:	4a05      	ldr	r2, [pc, #20]	@ (8003ac4 <prvInitialiseTaskLists+0x68>)
 8003ab0:	601a      	str	r2, [r3, #0]
}
 8003ab2:	bf00      	nop
 8003ab4:	3708      	adds	r7, #8
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	20000394 	.word	0x20000394
 8003ac0:	20000420 	.word	0x20000420
 8003ac4:	20000434 	.word	0x20000434
 8003ac8:	20000450 	.word	0x20000450
 8003acc:	20000464 	.word	0x20000464
 8003ad0:	2000047c 	.word	0x2000047c
 8003ad4:	20000448 	.word	0x20000448
 8003ad8:	2000044c 	.word	0x2000044c

08003adc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ae2:	e019      	b.n	8003b18 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003ae4:	f000 fa72 	bl	8003fcc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ae8:	4b10      	ldr	r3, [pc, #64]	@ (8003b2c <prvCheckTasksWaitingTermination+0x50>)
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	3304      	adds	r3, #4
 8003af4:	4618      	mov	r0, r3
 8003af6:	f7fe feb5 	bl	8002864 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003afa:	4b0d      	ldr	r3, [pc, #52]	@ (8003b30 <prvCheckTasksWaitingTermination+0x54>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	3b01      	subs	r3, #1
 8003b00:	4a0b      	ldr	r2, [pc, #44]	@ (8003b30 <prvCheckTasksWaitingTermination+0x54>)
 8003b02:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003b04:	4b0b      	ldr	r3, [pc, #44]	@ (8003b34 <prvCheckTasksWaitingTermination+0x58>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	3b01      	subs	r3, #1
 8003b0a:	4a0a      	ldr	r2, [pc, #40]	@ (8003b34 <prvCheckTasksWaitingTermination+0x58>)
 8003b0c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003b0e:	f000 fa8d 	bl	800402c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f000 f810 	bl	8003b38 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003b18:	4b06      	ldr	r3, [pc, #24]	@ (8003b34 <prvCheckTasksWaitingTermination+0x58>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d1e1      	bne.n	8003ae4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003b20:	bf00      	nop
 8003b22:	bf00      	nop
 8003b24:	3708      	adds	r7, #8
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	20000464 	.word	0x20000464
 8003b30:	20000490 	.word	0x20000490
 8003b34:	20000478 	.word	0x20000478

08003b38 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d108      	bne.n	8003b5c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f000 fbcc 	bl	80042ec <vPortFree>
				vPortFree( pxTCB );
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f000 fbc9 	bl	80042ec <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003b5a:	e019      	b.n	8003b90 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d103      	bne.n	8003b6e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f000 fbc0 	bl	80042ec <vPortFree>
	}
 8003b6c:	e010      	b.n	8003b90 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d00b      	beq.n	8003b90 <prvDeleteTCB+0x58>
	__asm volatile
 8003b78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b7c:	f383 8811 	msr	BASEPRI, r3
 8003b80:	f3bf 8f6f 	isb	sy
 8003b84:	f3bf 8f4f 	dsb	sy
 8003b88:	60fb      	str	r3, [r7, #12]
}
 8003b8a:	bf00      	nop
 8003b8c:	bf00      	nop
 8003b8e:	e7fd      	b.n	8003b8c <prvDeleteTCB+0x54>
	}
 8003b90:	bf00      	nop
 8003b92:	3710      	adds	r7, #16
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b9e:	4b0c      	ldr	r3, [pc, #48]	@ (8003bd0 <prvResetNextTaskUnblockTime+0x38>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d104      	bne.n	8003bb2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003ba8:	4b0a      	ldr	r3, [pc, #40]	@ (8003bd4 <prvResetNextTaskUnblockTime+0x3c>)
 8003baa:	f04f 32ff 	mov.w	r2, #4294967295
 8003bae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003bb0:	e008      	b.n	8003bc4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bb2:	4b07      	ldr	r3, [pc, #28]	@ (8003bd0 <prvResetNextTaskUnblockTime+0x38>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	4a04      	ldr	r2, [pc, #16]	@ (8003bd4 <prvResetNextTaskUnblockTime+0x3c>)
 8003bc2:	6013      	str	r3, [r2, #0]
}
 8003bc4:	bf00      	nop
 8003bc6:	370c      	adds	r7, #12
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bc80      	pop	{r7}
 8003bcc:	4770      	bx	lr
 8003bce:	bf00      	nop
 8003bd0:	20000448 	.word	0x20000448
 8003bd4:	200004b0 	.word	0x200004b0

08003bd8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003bd8:	b480      	push	{r7}
 8003bda:	b083      	sub	sp, #12
 8003bdc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003bde:	4b0b      	ldr	r3, [pc, #44]	@ (8003c0c <xTaskGetSchedulerState+0x34>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d102      	bne.n	8003bec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003be6:	2301      	movs	r3, #1
 8003be8:	607b      	str	r3, [r7, #4]
 8003bea:	e008      	b.n	8003bfe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003bec:	4b08      	ldr	r3, [pc, #32]	@ (8003c10 <xTaskGetSchedulerState+0x38>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d102      	bne.n	8003bfa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003bf4:	2302      	movs	r3, #2
 8003bf6:	607b      	str	r3, [r7, #4]
 8003bf8:	e001      	b.n	8003bfe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003bfe:	687b      	ldr	r3, [r7, #4]
	}
 8003c00:	4618      	mov	r0, r3
 8003c02:	370c      	adds	r7, #12
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bc80      	pop	{r7}
 8003c08:	4770      	bx	lr
 8003c0a:	bf00      	nop
 8003c0c:	2000049c 	.word	0x2000049c
 8003c10:	200004b8 	.word	0x200004b8

08003c14 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b086      	sub	sp, #24
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003c20:	2300      	movs	r3, #0
 8003c22:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d070      	beq.n	8003d0c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003c2a:	4b3b      	ldr	r3, [pc, #236]	@ (8003d18 <xTaskPriorityDisinherit+0x104>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	693a      	ldr	r2, [r7, #16]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d00b      	beq.n	8003c4c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8003c34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c38:	f383 8811 	msr	BASEPRI, r3
 8003c3c:	f3bf 8f6f 	isb	sy
 8003c40:	f3bf 8f4f 	dsb	sy
 8003c44:	60fb      	str	r3, [r7, #12]
}
 8003c46:	bf00      	nop
 8003c48:	bf00      	nop
 8003c4a:	e7fd      	b.n	8003c48 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d10b      	bne.n	8003c6c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8003c54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c58:	f383 8811 	msr	BASEPRI, r3
 8003c5c:	f3bf 8f6f 	isb	sy
 8003c60:	f3bf 8f4f 	dsb	sy
 8003c64:	60bb      	str	r3, [r7, #8]
}
 8003c66:	bf00      	nop
 8003c68:	bf00      	nop
 8003c6a:	e7fd      	b.n	8003c68 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c70:	1e5a      	subs	r2, r3, #1
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d044      	beq.n	8003d0c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d140      	bne.n	8003d0c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	3304      	adds	r3, #4
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7fe fde8 	bl	8002864 <uxListRemove>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d115      	bne.n	8003cc6 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c9e:	491f      	ldr	r1, [pc, #124]	@ (8003d1c <xTaskPriorityDisinherit+0x108>)
 8003ca0:	4613      	mov	r3, r2
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	4413      	add	r3, r2
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	440b      	add	r3, r1
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d10a      	bne.n	8003cc6 <xTaskPriorityDisinherit+0xb2>
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cba:	43da      	mvns	r2, r3
 8003cbc:	4b18      	ldr	r3, [pc, #96]	@ (8003d20 <xTaskPriorityDisinherit+0x10c>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	4a17      	ldr	r2, [pc, #92]	@ (8003d20 <xTaskPriorityDisinherit+0x10c>)
 8003cc4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cd2:	f1c3 0207 	rsb	r2, r3, #7
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cde:	2201      	movs	r2, #1
 8003ce0:	409a      	lsls	r2, r3
 8003ce2:	4b0f      	ldr	r3, [pc, #60]	@ (8003d20 <xTaskPriorityDisinherit+0x10c>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	4a0d      	ldr	r2, [pc, #52]	@ (8003d20 <xTaskPriorityDisinherit+0x10c>)
 8003cea:	6013      	str	r3, [r2, #0]
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	4413      	add	r3, r2
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	4a08      	ldr	r2, [pc, #32]	@ (8003d1c <xTaskPriorityDisinherit+0x108>)
 8003cfa:	441a      	add	r2, r3
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	3304      	adds	r3, #4
 8003d00:	4619      	mov	r1, r3
 8003d02:	4610      	mov	r0, r2
 8003d04:	f7fe fd53 	bl	80027ae <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003d0c:	697b      	ldr	r3, [r7, #20]
	}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3718      	adds	r7, #24
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}
 8003d16:	bf00      	nop
 8003d18:	20000390 	.word	0x20000390
 8003d1c:	20000394 	.word	0x20000394
 8003d20:	20000498 	.word	0x20000498

08003d24 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003d2e:	4b29      	ldr	r3, [pc, #164]	@ (8003dd4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d34:	4b28      	ldr	r3, [pc, #160]	@ (8003dd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	3304      	adds	r3, #4
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f7fe fd92 	bl	8002864 <uxListRemove>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d10b      	bne.n	8003d5e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003d46:	4b24      	ldr	r3, [pc, #144]	@ (8003dd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d52:	43da      	mvns	r2, r3
 8003d54:	4b21      	ldr	r3, [pc, #132]	@ (8003ddc <prvAddCurrentTaskToDelayedList+0xb8>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4013      	ands	r3, r2
 8003d5a:	4a20      	ldr	r2, [pc, #128]	@ (8003ddc <prvAddCurrentTaskToDelayedList+0xb8>)
 8003d5c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d64:	d10a      	bne.n	8003d7c <prvAddCurrentTaskToDelayedList+0x58>
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d007      	beq.n	8003d7c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d6c:	4b1a      	ldr	r3, [pc, #104]	@ (8003dd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	3304      	adds	r3, #4
 8003d72:	4619      	mov	r1, r3
 8003d74:	481a      	ldr	r0, [pc, #104]	@ (8003de0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003d76:	f7fe fd1a 	bl	80027ae <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003d7a:	e026      	b.n	8003dca <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003d7c:	68fa      	ldr	r2, [r7, #12]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4413      	add	r3, r2
 8003d82:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003d84:	4b14      	ldr	r3, [pc, #80]	@ (8003dd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	68ba      	ldr	r2, [r7, #8]
 8003d8a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003d8c:	68ba      	ldr	r2, [r7, #8]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d209      	bcs.n	8003da8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d94:	4b13      	ldr	r3, [pc, #76]	@ (8003de4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	4b0f      	ldr	r3, [pc, #60]	@ (8003dd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	3304      	adds	r3, #4
 8003d9e:	4619      	mov	r1, r3
 8003da0:	4610      	mov	r0, r2
 8003da2:	f7fe fd27 	bl	80027f4 <vListInsert>
}
 8003da6:	e010      	b.n	8003dca <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003da8:	4b0f      	ldr	r3, [pc, #60]	@ (8003de8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	4b0a      	ldr	r3, [pc, #40]	@ (8003dd8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	3304      	adds	r3, #4
 8003db2:	4619      	mov	r1, r3
 8003db4:	4610      	mov	r0, r2
 8003db6:	f7fe fd1d 	bl	80027f4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003dba:	4b0c      	ldr	r3, [pc, #48]	@ (8003dec <prvAddCurrentTaskToDelayedList+0xc8>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	68ba      	ldr	r2, [r7, #8]
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d202      	bcs.n	8003dca <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003dc4:	4a09      	ldr	r2, [pc, #36]	@ (8003dec <prvAddCurrentTaskToDelayedList+0xc8>)
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	6013      	str	r3, [r2, #0]
}
 8003dca:	bf00      	nop
 8003dcc:	3710      	adds	r7, #16
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	20000494 	.word	0x20000494
 8003dd8:	20000390 	.word	0x20000390
 8003ddc:	20000498 	.word	0x20000498
 8003de0:	2000047c 	.word	0x2000047c
 8003de4:	2000044c 	.word	0x2000044c
 8003de8:	20000448 	.word	0x20000448
 8003dec:	200004b0 	.word	0x200004b0

08003df0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003df0:	b480      	push	{r7}
 8003df2:	b085      	sub	sp, #20
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	60b9      	str	r1, [r7, #8]
 8003dfa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	3b04      	subs	r3, #4
 8003e00:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003e08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	3b04      	subs	r3, #4
 8003e0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	f023 0201 	bic.w	r2, r3, #1
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	3b04      	subs	r3, #4
 8003e1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003e20:	4a08      	ldr	r2, [pc, #32]	@ (8003e44 <pxPortInitialiseStack+0x54>)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	3b14      	subs	r3, #20
 8003e2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	3b20      	subs	r3, #32
 8003e36:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003e38:	68fb      	ldr	r3, [r7, #12]
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3714      	adds	r7, #20
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bc80      	pop	{r7}
 8003e42:	4770      	bx	lr
 8003e44:	08003e49 	.word	0x08003e49

08003e48 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b085      	sub	sp, #20
 8003e4c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003e52:	4b12      	ldr	r3, [pc, #72]	@ (8003e9c <prvTaskExitError+0x54>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e5a:	d00b      	beq.n	8003e74 <prvTaskExitError+0x2c>
	__asm volatile
 8003e5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e60:	f383 8811 	msr	BASEPRI, r3
 8003e64:	f3bf 8f6f 	isb	sy
 8003e68:	f3bf 8f4f 	dsb	sy
 8003e6c:	60fb      	str	r3, [r7, #12]
}
 8003e6e:	bf00      	nop
 8003e70:	bf00      	nop
 8003e72:	e7fd      	b.n	8003e70 <prvTaskExitError+0x28>
	__asm volatile
 8003e74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e78:	f383 8811 	msr	BASEPRI, r3
 8003e7c:	f3bf 8f6f 	isb	sy
 8003e80:	f3bf 8f4f 	dsb	sy
 8003e84:	60bb      	str	r3, [r7, #8]
}
 8003e86:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003e88:	bf00      	nop
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d0fc      	beq.n	8003e8a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003e90:	bf00      	nop
 8003e92:	bf00      	nop
 8003e94:	3714      	adds	r7, #20
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bc80      	pop	{r7}
 8003e9a:	4770      	bx	lr
 8003e9c:	20000018 	.word	0x20000018

08003ea0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003ea0:	4b07      	ldr	r3, [pc, #28]	@ (8003ec0 <pxCurrentTCBConst2>)
 8003ea2:	6819      	ldr	r1, [r3, #0]
 8003ea4:	6808      	ldr	r0, [r1, #0]
 8003ea6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003eaa:	f380 8809 	msr	PSP, r0
 8003eae:	f3bf 8f6f 	isb	sy
 8003eb2:	f04f 0000 	mov.w	r0, #0
 8003eb6:	f380 8811 	msr	BASEPRI, r0
 8003eba:	f04e 0e0d 	orr.w	lr, lr, #13
 8003ebe:	4770      	bx	lr

08003ec0 <pxCurrentTCBConst2>:
 8003ec0:	20000390 	.word	0x20000390
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003ec4:	bf00      	nop
 8003ec6:	bf00      	nop

08003ec8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003ec8:	4806      	ldr	r0, [pc, #24]	@ (8003ee4 <prvPortStartFirstTask+0x1c>)
 8003eca:	6800      	ldr	r0, [r0, #0]
 8003ecc:	6800      	ldr	r0, [r0, #0]
 8003ece:	f380 8808 	msr	MSP, r0
 8003ed2:	b662      	cpsie	i
 8003ed4:	b661      	cpsie	f
 8003ed6:	f3bf 8f4f 	dsb	sy
 8003eda:	f3bf 8f6f 	isb	sy
 8003ede:	df00      	svc	0
 8003ee0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003ee2:	bf00      	nop
 8003ee4:	e000ed08 	.word	0xe000ed08

08003ee8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b084      	sub	sp, #16
 8003eec:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003eee:	4b32      	ldr	r3, [pc, #200]	@ (8003fb8 <xPortStartScheduler+0xd0>)
 8003ef0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	781b      	ldrb	r3, [r3, #0]
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	22ff      	movs	r2, #255	@ 0xff
 8003efe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003f08:	78fb      	ldrb	r3, [r7, #3]
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003f10:	b2da      	uxtb	r2, r3
 8003f12:	4b2a      	ldr	r3, [pc, #168]	@ (8003fbc <xPortStartScheduler+0xd4>)
 8003f14:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003f16:	4b2a      	ldr	r3, [pc, #168]	@ (8003fc0 <xPortStartScheduler+0xd8>)
 8003f18:	2207      	movs	r2, #7
 8003f1a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f1c:	e009      	b.n	8003f32 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8003f1e:	4b28      	ldr	r3, [pc, #160]	@ (8003fc0 <xPortStartScheduler+0xd8>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	3b01      	subs	r3, #1
 8003f24:	4a26      	ldr	r2, [pc, #152]	@ (8003fc0 <xPortStartScheduler+0xd8>)
 8003f26:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003f28:	78fb      	ldrb	r3, [r7, #3]
 8003f2a:	b2db      	uxtb	r3, r3
 8003f2c:	005b      	lsls	r3, r3, #1
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f32:	78fb      	ldrb	r3, [r7, #3]
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f3a:	2b80      	cmp	r3, #128	@ 0x80
 8003f3c:	d0ef      	beq.n	8003f1e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003f3e:	4b20      	ldr	r3, [pc, #128]	@ (8003fc0 <xPortStartScheduler+0xd8>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f1c3 0307 	rsb	r3, r3, #7
 8003f46:	2b04      	cmp	r3, #4
 8003f48:	d00b      	beq.n	8003f62 <xPortStartScheduler+0x7a>
	__asm volatile
 8003f4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f4e:	f383 8811 	msr	BASEPRI, r3
 8003f52:	f3bf 8f6f 	isb	sy
 8003f56:	f3bf 8f4f 	dsb	sy
 8003f5a:	60bb      	str	r3, [r7, #8]
}
 8003f5c:	bf00      	nop
 8003f5e:	bf00      	nop
 8003f60:	e7fd      	b.n	8003f5e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003f62:	4b17      	ldr	r3, [pc, #92]	@ (8003fc0 <xPortStartScheduler+0xd8>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	021b      	lsls	r3, r3, #8
 8003f68:	4a15      	ldr	r2, [pc, #84]	@ (8003fc0 <xPortStartScheduler+0xd8>)
 8003f6a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003f6c:	4b14      	ldr	r3, [pc, #80]	@ (8003fc0 <xPortStartScheduler+0xd8>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003f74:	4a12      	ldr	r2, [pc, #72]	@ (8003fc0 <xPortStartScheduler+0xd8>)
 8003f76:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	b2da      	uxtb	r2, r3
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003f80:	4b10      	ldr	r3, [pc, #64]	@ (8003fc4 <xPortStartScheduler+0xdc>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a0f      	ldr	r2, [pc, #60]	@ (8003fc4 <xPortStartScheduler+0xdc>)
 8003f86:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003f8a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003f8c:	4b0d      	ldr	r3, [pc, #52]	@ (8003fc4 <xPortStartScheduler+0xdc>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a0c      	ldr	r2, [pc, #48]	@ (8003fc4 <xPortStartScheduler+0xdc>)
 8003f92:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003f96:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003f98:	f000 f8b8 	bl	800410c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003f9c:	4b0a      	ldr	r3, [pc, #40]	@ (8003fc8 <xPortStartScheduler+0xe0>)
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003fa2:	f7ff ff91 	bl	8003ec8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003fa6:	f7ff fbd5 	bl	8003754 <vTaskSwitchContext>
	prvTaskExitError();
 8003faa:	f7ff ff4d 	bl	8003e48 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003fae:	2300      	movs	r3, #0
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3710      	adds	r7, #16
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	e000e400 	.word	0xe000e400
 8003fbc:	200004bc 	.word	0x200004bc
 8003fc0:	200004c0 	.word	0x200004c0
 8003fc4:	e000ed20 	.word	0xe000ed20
 8003fc8:	20000018 	.word	0x20000018

08003fcc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
	__asm volatile
 8003fd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fd6:	f383 8811 	msr	BASEPRI, r3
 8003fda:	f3bf 8f6f 	isb	sy
 8003fde:	f3bf 8f4f 	dsb	sy
 8003fe2:	607b      	str	r3, [r7, #4]
}
 8003fe4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003fe6:	4b0f      	ldr	r3, [pc, #60]	@ (8004024 <vPortEnterCritical+0x58>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	3301      	adds	r3, #1
 8003fec:	4a0d      	ldr	r2, [pc, #52]	@ (8004024 <vPortEnterCritical+0x58>)
 8003fee:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003ff0:	4b0c      	ldr	r3, [pc, #48]	@ (8004024 <vPortEnterCritical+0x58>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d110      	bne.n	800401a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003ff8:	4b0b      	ldr	r3, [pc, #44]	@ (8004028 <vPortEnterCritical+0x5c>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d00b      	beq.n	800401a <vPortEnterCritical+0x4e>
	__asm volatile
 8004002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004006:	f383 8811 	msr	BASEPRI, r3
 800400a:	f3bf 8f6f 	isb	sy
 800400e:	f3bf 8f4f 	dsb	sy
 8004012:	603b      	str	r3, [r7, #0]
}
 8004014:	bf00      	nop
 8004016:	bf00      	nop
 8004018:	e7fd      	b.n	8004016 <vPortEnterCritical+0x4a>
	}
}
 800401a:	bf00      	nop
 800401c:	370c      	adds	r7, #12
 800401e:	46bd      	mov	sp, r7
 8004020:	bc80      	pop	{r7}
 8004022:	4770      	bx	lr
 8004024:	20000018 	.word	0x20000018
 8004028:	e000ed04 	.word	0xe000ed04

0800402c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004032:	4b12      	ldr	r3, [pc, #72]	@ (800407c <vPortExitCritical+0x50>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d10b      	bne.n	8004052 <vPortExitCritical+0x26>
	__asm volatile
 800403a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800403e:	f383 8811 	msr	BASEPRI, r3
 8004042:	f3bf 8f6f 	isb	sy
 8004046:	f3bf 8f4f 	dsb	sy
 800404a:	607b      	str	r3, [r7, #4]
}
 800404c:	bf00      	nop
 800404e:	bf00      	nop
 8004050:	e7fd      	b.n	800404e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004052:	4b0a      	ldr	r3, [pc, #40]	@ (800407c <vPortExitCritical+0x50>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	3b01      	subs	r3, #1
 8004058:	4a08      	ldr	r2, [pc, #32]	@ (800407c <vPortExitCritical+0x50>)
 800405a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800405c:	4b07      	ldr	r3, [pc, #28]	@ (800407c <vPortExitCritical+0x50>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d105      	bne.n	8004070 <vPortExitCritical+0x44>
 8004064:	2300      	movs	r3, #0
 8004066:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800406e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004070:	bf00      	nop
 8004072:	370c      	adds	r7, #12
 8004074:	46bd      	mov	sp, r7
 8004076:	bc80      	pop	{r7}
 8004078:	4770      	bx	lr
 800407a:	bf00      	nop
 800407c:	20000018 	.word	0x20000018

08004080 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004080:	f3ef 8009 	mrs	r0, PSP
 8004084:	f3bf 8f6f 	isb	sy
 8004088:	4b0d      	ldr	r3, [pc, #52]	@ (80040c0 <pxCurrentTCBConst>)
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004090:	6010      	str	r0, [r2, #0]
 8004092:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004096:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800409a:	f380 8811 	msr	BASEPRI, r0
 800409e:	f7ff fb59 	bl	8003754 <vTaskSwitchContext>
 80040a2:	f04f 0000 	mov.w	r0, #0
 80040a6:	f380 8811 	msr	BASEPRI, r0
 80040aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80040ae:	6819      	ldr	r1, [r3, #0]
 80040b0:	6808      	ldr	r0, [r1, #0]
 80040b2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80040b6:	f380 8809 	msr	PSP, r0
 80040ba:	f3bf 8f6f 	isb	sy
 80040be:	4770      	bx	lr

080040c0 <pxCurrentTCBConst>:
 80040c0:	20000390 	.word	0x20000390
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80040c4:	bf00      	nop
 80040c6:	bf00      	nop

080040c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b082      	sub	sp, #8
 80040cc:	af00      	add	r7, sp, #0
	__asm volatile
 80040ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040d2:	f383 8811 	msr	BASEPRI, r3
 80040d6:	f3bf 8f6f 	isb	sy
 80040da:	f3bf 8f4f 	dsb	sy
 80040de:	607b      	str	r3, [r7, #4]
}
 80040e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80040e2:	f7ff fa7d 	bl	80035e0 <xTaskIncrementTick>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d003      	beq.n	80040f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80040ec:	4b06      	ldr	r3, [pc, #24]	@ (8004108 <xPortSysTickHandler+0x40>)
 80040ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80040f2:	601a      	str	r2, [r3, #0]
 80040f4:	2300      	movs	r3, #0
 80040f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	f383 8811 	msr	BASEPRI, r3
}
 80040fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004100:	bf00      	nop
 8004102:	3708      	adds	r7, #8
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}
 8004108:	e000ed04 	.word	0xe000ed04

0800410c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800410c:	b480      	push	{r7}
 800410e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004110:	4b0a      	ldr	r3, [pc, #40]	@ (800413c <vPortSetupTimerInterrupt+0x30>)
 8004112:	2200      	movs	r2, #0
 8004114:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004116:	4b0a      	ldr	r3, [pc, #40]	@ (8004140 <vPortSetupTimerInterrupt+0x34>)
 8004118:	2200      	movs	r2, #0
 800411a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800411c:	4b09      	ldr	r3, [pc, #36]	@ (8004144 <vPortSetupTimerInterrupt+0x38>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a09      	ldr	r2, [pc, #36]	@ (8004148 <vPortSetupTimerInterrupt+0x3c>)
 8004122:	fba2 2303 	umull	r2, r3, r2, r3
 8004126:	099b      	lsrs	r3, r3, #6
 8004128:	4a08      	ldr	r2, [pc, #32]	@ (800414c <vPortSetupTimerInterrupt+0x40>)
 800412a:	3b01      	subs	r3, #1
 800412c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800412e:	4b03      	ldr	r3, [pc, #12]	@ (800413c <vPortSetupTimerInterrupt+0x30>)
 8004130:	2207      	movs	r2, #7
 8004132:	601a      	str	r2, [r3, #0]
}
 8004134:	bf00      	nop
 8004136:	46bd      	mov	sp, r7
 8004138:	bc80      	pop	{r7}
 800413a:	4770      	bx	lr
 800413c:	e000e010 	.word	0xe000e010
 8004140:	e000e018 	.word	0xe000e018
 8004144:	2000000c 	.word	0x2000000c
 8004148:	10624dd3 	.word	0x10624dd3
 800414c:	e000e014 	.word	0xe000e014

08004150 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b08a      	sub	sp, #40	@ 0x28
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004158:	2300      	movs	r3, #0
 800415a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800415c:	f7ff f994 	bl	8003488 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004160:	4b5c      	ldr	r3, [pc, #368]	@ (80042d4 <pvPortMalloc+0x184>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d101      	bne.n	800416c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004168:	f000 f924 	bl	80043b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800416c:	4b5a      	ldr	r3, [pc, #360]	@ (80042d8 <pvPortMalloc+0x188>)
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	4013      	ands	r3, r2
 8004174:	2b00      	cmp	r3, #0
 8004176:	f040 8095 	bne.w	80042a4 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d01e      	beq.n	80041be <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004180:	2208      	movs	r2, #8
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4413      	add	r3, r2
 8004186:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f003 0307 	and.w	r3, r3, #7
 800418e:	2b00      	cmp	r3, #0
 8004190:	d015      	beq.n	80041be <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	f023 0307 	bic.w	r3, r3, #7
 8004198:	3308      	adds	r3, #8
 800419a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f003 0307 	and.w	r3, r3, #7
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d00b      	beq.n	80041be <pvPortMalloc+0x6e>
	__asm volatile
 80041a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041aa:	f383 8811 	msr	BASEPRI, r3
 80041ae:	f3bf 8f6f 	isb	sy
 80041b2:	f3bf 8f4f 	dsb	sy
 80041b6:	617b      	str	r3, [r7, #20]
}
 80041b8:	bf00      	nop
 80041ba:	bf00      	nop
 80041bc:	e7fd      	b.n	80041ba <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d06f      	beq.n	80042a4 <pvPortMalloc+0x154>
 80041c4:	4b45      	ldr	r3, [pc, #276]	@ (80042dc <pvPortMalloc+0x18c>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	429a      	cmp	r2, r3
 80041cc:	d86a      	bhi.n	80042a4 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80041ce:	4b44      	ldr	r3, [pc, #272]	@ (80042e0 <pvPortMalloc+0x190>)
 80041d0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80041d2:	4b43      	ldr	r3, [pc, #268]	@ (80042e0 <pvPortMalloc+0x190>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80041d8:	e004      	b.n	80041e4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80041da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041dc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80041de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80041e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d903      	bls.n	80041f6 <pvPortMalloc+0xa6>
 80041ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d1f1      	bne.n	80041da <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80041f6:	4b37      	ldr	r3, [pc, #220]	@ (80042d4 <pvPortMalloc+0x184>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d051      	beq.n	80042a4 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004200:	6a3b      	ldr	r3, [r7, #32]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2208      	movs	r2, #8
 8004206:	4413      	add	r3, r2
 8004208:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800420a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	6a3b      	ldr	r3, [r7, #32]
 8004210:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004214:	685a      	ldr	r2, [r3, #4]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	1ad2      	subs	r2, r2, r3
 800421a:	2308      	movs	r3, #8
 800421c:	005b      	lsls	r3, r3, #1
 800421e:	429a      	cmp	r2, r3
 8004220:	d920      	bls.n	8004264 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004222:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4413      	add	r3, r2
 8004228:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800422a:	69bb      	ldr	r3, [r7, #24]
 800422c:	f003 0307 	and.w	r3, r3, #7
 8004230:	2b00      	cmp	r3, #0
 8004232:	d00b      	beq.n	800424c <pvPortMalloc+0xfc>
	__asm volatile
 8004234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004238:	f383 8811 	msr	BASEPRI, r3
 800423c:	f3bf 8f6f 	isb	sy
 8004240:	f3bf 8f4f 	dsb	sy
 8004244:	613b      	str	r3, [r7, #16]
}
 8004246:	bf00      	nop
 8004248:	bf00      	nop
 800424a:	e7fd      	b.n	8004248 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800424c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800424e:	685a      	ldr	r2, [r3, #4]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	1ad2      	subs	r2, r2, r3
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800425e:	69b8      	ldr	r0, [r7, #24]
 8004260:	f000 f90a 	bl	8004478 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004264:	4b1d      	ldr	r3, [pc, #116]	@ (80042dc <pvPortMalloc+0x18c>)
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	4a1b      	ldr	r2, [pc, #108]	@ (80042dc <pvPortMalloc+0x18c>)
 8004270:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004272:	4b1a      	ldr	r3, [pc, #104]	@ (80042dc <pvPortMalloc+0x18c>)
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	4b1b      	ldr	r3, [pc, #108]	@ (80042e4 <pvPortMalloc+0x194>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	429a      	cmp	r2, r3
 800427c:	d203      	bcs.n	8004286 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800427e:	4b17      	ldr	r3, [pc, #92]	@ (80042dc <pvPortMalloc+0x18c>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4a18      	ldr	r2, [pc, #96]	@ (80042e4 <pvPortMalloc+0x194>)
 8004284:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004288:	685a      	ldr	r2, [r3, #4]
 800428a:	4b13      	ldr	r3, [pc, #76]	@ (80042d8 <pvPortMalloc+0x188>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	431a      	orrs	r2, r3
 8004290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004292:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004296:	2200      	movs	r2, #0
 8004298:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800429a:	4b13      	ldr	r3, [pc, #76]	@ (80042e8 <pvPortMalloc+0x198>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	3301      	adds	r3, #1
 80042a0:	4a11      	ldr	r2, [pc, #68]	@ (80042e8 <pvPortMalloc+0x198>)
 80042a2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80042a4:	f7ff f8fe 	bl	80034a4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	f003 0307 	and.w	r3, r3, #7
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d00b      	beq.n	80042ca <pvPortMalloc+0x17a>
	__asm volatile
 80042b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042b6:	f383 8811 	msr	BASEPRI, r3
 80042ba:	f3bf 8f6f 	isb	sy
 80042be:	f3bf 8f4f 	dsb	sy
 80042c2:	60fb      	str	r3, [r7, #12]
}
 80042c4:	bf00      	nop
 80042c6:	bf00      	nop
 80042c8:	e7fd      	b.n	80042c6 <pvPortMalloc+0x176>
	return pvReturn;
 80042ca:	69fb      	ldr	r3, [r7, #28]
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3728      	adds	r7, #40	@ 0x28
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	200010cc 	.word	0x200010cc
 80042d8:	200010e0 	.word	0x200010e0
 80042dc:	200010d0 	.word	0x200010d0
 80042e0:	200010c4 	.word	0x200010c4
 80042e4:	200010d4 	.word	0x200010d4
 80042e8:	200010d8 	.word	0x200010d8

080042ec <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b086      	sub	sp, #24
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d04f      	beq.n	800439e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80042fe:	2308      	movs	r3, #8
 8004300:	425b      	negs	r3, r3
 8004302:	697a      	ldr	r2, [r7, #20]
 8004304:	4413      	add	r3, r2
 8004306:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	685a      	ldr	r2, [r3, #4]
 8004310:	4b25      	ldr	r3, [pc, #148]	@ (80043a8 <vPortFree+0xbc>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4013      	ands	r3, r2
 8004316:	2b00      	cmp	r3, #0
 8004318:	d10b      	bne.n	8004332 <vPortFree+0x46>
	__asm volatile
 800431a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800431e:	f383 8811 	msr	BASEPRI, r3
 8004322:	f3bf 8f6f 	isb	sy
 8004326:	f3bf 8f4f 	dsb	sy
 800432a:	60fb      	str	r3, [r7, #12]
}
 800432c:	bf00      	nop
 800432e:	bf00      	nop
 8004330:	e7fd      	b.n	800432e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d00b      	beq.n	8004352 <vPortFree+0x66>
	__asm volatile
 800433a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800433e:	f383 8811 	msr	BASEPRI, r3
 8004342:	f3bf 8f6f 	isb	sy
 8004346:	f3bf 8f4f 	dsb	sy
 800434a:	60bb      	str	r3, [r7, #8]
}
 800434c:	bf00      	nop
 800434e:	bf00      	nop
 8004350:	e7fd      	b.n	800434e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	685a      	ldr	r2, [r3, #4]
 8004356:	4b14      	ldr	r3, [pc, #80]	@ (80043a8 <vPortFree+0xbc>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4013      	ands	r3, r2
 800435c:	2b00      	cmp	r3, #0
 800435e:	d01e      	beq.n	800439e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d11a      	bne.n	800439e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	685a      	ldr	r2, [r3, #4]
 800436c:	4b0e      	ldr	r3, [pc, #56]	@ (80043a8 <vPortFree+0xbc>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	43db      	mvns	r3, r3
 8004372:	401a      	ands	r2, r3
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004378:	f7ff f886 	bl	8003488 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	685a      	ldr	r2, [r3, #4]
 8004380:	4b0a      	ldr	r3, [pc, #40]	@ (80043ac <vPortFree+0xc0>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4413      	add	r3, r2
 8004386:	4a09      	ldr	r2, [pc, #36]	@ (80043ac <vPortFree+0xc0>)
 8004388:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800438a:	6938      	ldr	r0, [r7, #16]
 800438c:	f000 f874 	bl	8004478 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004390:	4b07      	ldr	r3, [pc, #28]	@ (80043b0 <vPortFree+0xc4>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	3301      	adds	r3, #1
 8004396:	4a06      	ldr	r2, [pc, #24]	@ (80043b0 <vPortFree+0xc4>)
 8004398:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800439a:	f7ff f883 	bl	80034a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800439e:	bf00      	nop
 80043a0:	3718      	adds	r7, #24
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	200010e0 	.word	0x200010e0
 80043ac:	200010d0 	.word	0x200010d0
 80043b0:	200010dc 	.word	0x200010dc

080043b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80043b4:	b480      	push	{r7}
 80043b6:	b085      	sub	sp, #20
 80043b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80043ba:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80043be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80043c0:	4b27      	ldr	r3, [pc, #156]	@ (8004460 <prvHeapInit+0xac>)
 80043c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f003 0307 	and.w	r3, r3, #7
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d00c      	beq.n	80043e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	3307      	adds	r3, #7
 80043d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f023 0307 	bic.w	r3, r3, #7
 80043da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80043dc:	68ba      	ldr	r2, [r7, #8]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	4a1f      	ldr	r2, [pc, #124]	@ (8004460 <prvHeapInit+0xac>)
 80043e4:	4413      	add	r3, r2
 80043e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80043ec:	4a1d      	ldr	r2, [pc, #116]	@ (8004464 <prvHeapInit+0xb0>)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80043f2:	4b1c      	ldr	r3, [pc, #112]	@ (8004464 <prvHeapInit+0xb0>)
 80043f4:	2200      	movs	r2, #0
 80043f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	68ba      	ldr	r2, [r7, #8]
 80043fc:	4413      	add	r3, r2
 80043fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004400:	2208      	movs	r2, #8
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	1a9b      	subs	r3, r3, r2
 8004406:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f023 0307 	bic.w	r3, r3, #7
 800440e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	4a15      	ldr	r2, [pc, #84]	@ (8004468 <prvHeapInit+0xb4>)
 8004414:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004416:	4b14      	ldr	r3, [pc, #80]	@ (8004468 <prvHeapInit+0xb4>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	2200      	movs	r2, #0
 800441c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800441e:	4b12      	ldr	r3, [pc, #72]	@ (8004468 <prvHeapInit+0xb4>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	2200      	movs	r2, #0
 8004424:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	68fa      	ldr	r2, [r7, #12]
 800442e:	1ad2      	subs	r2, r2, r3
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004434:	4b0c      	ldr	r3, [pc, #48]	@ (8004468 <prvHeapInit+0xb4>)
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	4a0a      	ldr	r2, [pc, #40]	@ (800446c <prvHeapInit+0xb8>)
 8004442:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	4a09      	ldr	r2, [pc, #36]	@ (8004470 <prvHeapInit+0xbc>)
 800444a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800444c:	4b09      	ldr	r3, [pc, #36]	@ (8004474 <prvHeapInit+0xc0>)
 800444e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004452:	601a      	str	r2, [r3, #0]
}
 8004454:	bf00      	nop
 8004456:	3714      	adds	r7, #20
 8004458:	46bd      	mov	sp, r7
 800445a:	bc80      	pop	{r7}
 800445c:	4770      	bx	lr
 800445e:	bf00      	nop
 8004460:	200004c4 	.word	0x200004c4
 8004464:	200010c4 	.word	0x200010c4
 8004468:	200010cc 	.word	0x200010cc
 800446c:	200010d4 	.word	0x200010d4
 8004470:	200010d0 	.word	0x200010d0
 8004474:	200010e0 	.word	0x200010e0

08004478 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004478:	b480      	push	{r7}
 800447a:	b085      	sub	sp, #20
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004480:	4b27      	ldr	r3, [pc, #156]	@ (8004520 <prvInsertBlockIntoFreeList+0xa8>)
 8004482:	60fb      	str	r3, [r7, #12]
 8004484:	e002      	b.n	800448c <prvInsertBlockIntoFreeList+0x14>
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	60fb      	str	r3, [r7, #12]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	429a      	cmp	r2, r3
 8004494:	d8f7      	bhi.n	8004486 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	68ba      	ldr	r2, [r7, #8]
 80044a0:	4413      	add	r3, r2
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d108      	bne.n	80044ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	685a      	ldr	r2, [r3, #4]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	441a      	add	r2, r3
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	68ba      	ldr	r2, [r7, #8]
 80044c4:	441a      	add	r2, r3
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d118      	bne.n	8004500 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	4b14      	ldr	r3, [pc, #80]	@ (8004524 <prvInsertBlockIntoFreeList+0xac>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d00d      	beq.n	80044f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	685a      	ldr	r2, [r3, #4]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	441a      	add	r2, r3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	601a      	str	r2, [r3, #0]
 80044f4:	e008      	b.n	8004508 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80044f6:	4b0b      	ldr	r3, [pc, #44]	@ (8004524 <prvInsertBlockIntoFreeList+0xac>)
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	601a      	str	r2, [r3, #0]
 80044fe:	e003      	b.n	8004508 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004508:	68fa      	ldr	r2, [r7, #12]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	429a      	cmp	r2, r3
 800450e:	d002      	beq.n	8004516 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004516:	bf00      	nop
 8004518:	3714      	adds	r7, #20
 800451a:	46bd      	mov	sp, r7
 800451c:	bc80      	pop	{r7}
 800451e:	4770      	bx	lr
 8004520:	200010c4 	.word	0x200010c4
 8004524:	200010cc 	.word	0x200010cc

08004528 <_strtol_l.constprop.0>:
 8004528:	2b24      	cmp	r3, #36	@ 0x24
 800452a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800452e:	4686      	mov	lr, r0
 8004530:	4690      	mov	r8, r2
 8004532:	d801      	bhi.n	8004538 <_strtol_l.constprop.0+0x10>
 8004534:	2b01      	cmp	r3, #1
 8004536:	d106      	bne.n	8004546 <_strtol_l.constprop.0+0x1e>
 8004538:	f000 f8a2 	bl	8004680 <__errno>
 800453c:	2316      	movs	r3, #22
 800453e:	6003      	str	r3, [r0, #0]
 8004540:	2000      	movs	r0, #0
 8004542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004546:	460d      	mov	r5, r1
 8004548:	4833      	ldr	r0, [pc, #204]	@ (8004618 <_strtol_l.constprop.0+0xf0>)
 800454a:	462a      	mov	r2, r5
 800454c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004550:	5d06      	ldrb	r6, [r0, r4]
 8004552:	f016 0608 	ands.w	r6, r6, #8
 8004556:	d1f8      	bne.n	800454a <_strtol_l.constprop.0+0x22>
 8004558:	2c2d      	cmp	r4, #45	@ 0x2d
 800455a:	d12d      	bne.n	80045b8 <_strtol_l.constprop.0+0x90>
 800455c:	2601      	movs	r6, #1
 800455e:	782c      	ldrb	r4, [r5, #0]
 8004560:	1c95      	adds	r5, r2, #2
 8004562:	f033 0210 	bics.w	r2, r3, #16
 8004566:	d109      	bne.n	800457c <_strtol_l.constprop.0+0x54>
 8004568:	2c30      	cmp	r4, #48	@ 0x30
 800456a:	d12a      	bne.n	80045c2 <_strtol_l.constprop.0+0x9a>
 800456c:	782a      	ldrb	r2, [r5, #0]
 800456e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8004572:	2a58      	cmp	r2, #88	@ 0x58
 8004574:	d125      	bne.n	80045c2 <_strtol_l.constprop.0+0x9a>
 8004576:	2310      	movs	r3, #16
 8004578:	786c      	ldrb	r4, [r5, #1]
 800457a:	3502      	adds	r5, #2
 800457c:	2200      	movs	r2, #0
 800457e:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8004582:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004586:	fbbc f9f3 	udiv	r9, ip, r3
 800458a:	4610      	mov	r0, r2
 800458c:	fb03 ca19 	mls	sl, r3, r9, ip
 8004590:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8004594:	2f09      	cmp	r7, #9
 8004596:	d81b      	bhi.n	80045d0 <_strtol_l.constprop.0+0xa8>
 8004598:	463c      	mov	r4, r7
 800459a:	42a3      	cmp	r3, r4
 800459c:	dd27      	ble.n	80045ee <_strtol_l.constprop.0+0xc6>
 800459e:	1c57      	adds	r7, r2, #1
 80045a0:	d007      	beq.n	80045b2 <_strtol_l.constprop.0+0x8a>
 80045a2:	4581      	cmp	r9, r0
 80045a4:	d320      	bcc.n	80045e8 <_strtol_l.constprop.0+0xc0>
 80045a6:	d101      	bne.n	80045ac <_strtol_l.constprop.0+0x84>
 80045a8:	45a2      	cmp	sl, r4
 80045aa:	db1d      	blt.n	80045e8 <_strtol_l.constprop.0+0xc0>
 80045ac:	2201      	movs	r2, #1
 80045ae:	fb00 4003 	mla	r0, r0, r3, r4
 80045b2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80045b6:	e7eb      	b.n	8004590 <_strtol_l.constprop.0+0x68>
 80045b8:	2c2b      	cmp	r4, #43	@ 0x2b
 80045ba:	bf04      	itt	eq
 80045bc:	782c      	ldrbeq	r4, [r5, #0]
 80045be:	1c95      	addeq	r5, r2, #2
 80045c0:	e7cf      	b.n	8004562 <_strtol_l.constprop.0+0x3a>
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d1da      	bne.n	800457c <_strtol_l.constprop.0+0x54>
 80045c6:	2c30      	cmp	r4, #48	@ 0x30
 80045c8:	bf0c      	ite	eq
 80045ca:	2308      	moveq	r3, #8
 80045cc:	230a      	movne	r3, #10
 80045ce:	e7d5      	b.n	800457c <_strtol_l.constprop.0+0x54>
 80045d0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80045d4:	2f19      	cmp	r7, #25
 80045d6:	d801      	bhi.n	80045dc <_strtol_l.constprop.0+0xb4>
 80045d8:	3c37      	subs	r4, #55	@ 0x37
 80045da:	e7de      	b.n	800459a <_strtol_l.constprop.0+0x72>
 80045dc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80045e0:	2f19      	cmp	r7, #25
 80045e2:	d804      	bhi.n	80045ee <_strtol_l.constprop.0+0xc6>
 80045e4:	3c57      	subs	r4, #87	@ 0x57
 80045e6:	e7d8      	b.n	800459a <_strtol_l.constprop.0+0x72>
 80045e8:	f04f 32ff 	mov.w	r2, #4294967295
 80045ec:	e7e1      	b.n	80045b2 <_strtol_l.constprop.0+0x8a>
 80045ee:	1c53      	adds	r3, r2, #1
 80045f0:	d108      	bne.n	8004604 <_strtol_l.constprop.0+0xdc>
 80045f2:	2322      	movs	r3, #34	@ 0x22
 80045f4:	4660      	mov	r0, ip
 80045f6:	f8ce 3000 	str.w	r3, [lr]
 80045fa:	f1b8 0f00 	cmp.w	r8, #0
 80045fe:	d0a0      	beq.n	8004542 <_strtol_l.constprop.0+0x1a>
 8004600:	1e69      	subs	r1, r5, #1
 8004602:	e006      	b.n	8004612 <_strtol_l.constprop.0+0xea>
 8004604:	b106      	cbz	r6, 8004608 <_strtol_l.constprop.0+0xe0>
 8004606:	4240      	negs	r0, r0
 8004608:	f1b8 0f00 	cmp.w	r8, #0
 800460c:	d099      	beq.n	8004542 <_strtol_l.constprop.0+0x1a>
 800460e:	2a00      	cmp	r2, #0
 8004610:	d1f6      	bne.n	8004600 <_strtol_l.constprop.0+0xd8>
 8004612:	f8c8 1000 	str.w	r1, [r8]
 8004616:	e794      	b.n	8004542 <_strtol_l.constprop.0+0x1a>
 8004618:	08005707 	.word	0x08005707

0800461c <strtol>:
 800461c:	4613      	mov	r3, r2
 800461e:	460a      	mov	r2, r1
 8004620:	4601      	mov	r1, r0
 8004622:	4802      	ldr	r0, [pc, #8]	@ (800462c <strtol+0x10>)
 8004624:	6800      	ldr	r0, [r0, #0]
 8004626:	f7ff bf7f 	b.w	8004528 <_strtol_l.constprop.0>
 800462a:	bf00      	nop
 800462c:	2000001c 	.word	0x2000001c

08004630 <siprintf>:
 8004630:	b40e      	push	{r1, r2, r3}
 8004632:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004636:	b500      	push	{lr}
 8004638:	b09c      	sub	sp, #112	@ 0x70
 800463a:	ab1d      	add	r3, sp, #116	@ 0x74
 800463c:	9002      	str	r0, [sp, #8]
 800463e:	9006      	str	r0, [sp, #24]
 8004640:	9107      	str	r1, [sp, #28]
 8004642:	9104      	str	r1, [sp, #16]
 8004644:	4808      	ldr	r0, [pc, #32]	@ (8004668 <siprintf+0x38>)
 8004646:	4909      	ldr	r1, [pc, #36]	@ (800466c <siprintf+0x3c>)
 8004648:	f853 2b04 	ldr.w	r2, [r3], #4
 800464c:	9105      	str	r1, [sp, #20]
 800464e:	6800      	ldr	r0, [r0, #0]
 8004650:	a902      	add	r1, sp, #8
 8004652:	9301      	str	r3, [sp, #4]
 8004654:	f000 f9a0 	bl	8004998 <_svfiprintf_r>
 8004658:	2200      	movs	r2, #0
 800465a:	9b02      	ldr	r3, [sp, #8]
 800465c:	701a      	strb	r2, [r3, #0]
 800465e:	b01c      	add	sp, #112	@ 0x70
 8004660:	f85d eb04 	ldr.w	lr, [sp], #4
 8004664:	b003      	add	sp, #12
 8004666:	4770      	bx	lr
 8004668:	2000001c 	.word	0x2000001c
 800466c:	ffff0208 	.word	0xffff0208

08004670 <memset>:
 8004670:	4603      	mov	r3, r0
 8004672:	4402      	add	r2, r0
 8004674:	4293      	cmp	r3, r2
 8004676:	d100      	bne.n	800467a <memset+0xa>
 8004678:	4770      	bx	lr
 800467a:	f803 1b01 	strb.w	r1, [r3], #1
 800467e:	e7f9      	b.n	8004674 <memset+0x4>

08004680 <__errno>:
 8004680:	4b01      	ldr	r3, [pc, #4]	@ (8004688 <__errno+0x8>)
 8004682:	6818      	ldr	r0, [r3, #0]
 8004684:	4770      	bx	lr
 8004686:	bf00      	nop
 8004688:	2000001c 	.word	0x2000001c

0800468c <__libc_init_array>:
 800468c:	b570      	push	{r4, r5, r6, lr}
 800468e:	2600      	movs	r6, #0
 8004690:	4d0c      	ldr	r5, [pc, #48]	@ (80046c4 <__libc_init_array+0x38>)
 8004692:	4c0d      	ldr	r4, [pc, #52]	@ (80046c8 <__libc_init_array+0x3c>)
 8004694:	1b64      	subs	r4, r4, r5
 8004696:	10a4      	asrs	r4, r4, #2
 8004698:	42a6      	cmp	r6, r4
 800469a:	d109      	bne.n	80046b0 <__libc_init_array+0x24>
 800469c:	f000 fc78 	bl	8004f90 <_init>
 80046a0:	2600      	movs	r6, #0
 80046a2:	4d0a      	ldr	r5, [pc, #40]	@ (80046cc <__libc_init_array+0x40>)
 80046a4:	4c0a      	ldr	r4, [pc, #40]	@ (80046d0 <__libc_init_array+0x44>)
 80046a6:	1b64      	subs	r4, r4, r5
 80046a8:	10a4      	asrs	r4, r4, #2
 80046aa:	42a6      	cmp	r6, r4
 80046ac:	d105      	bne.n	80046ba <__libc_init_array+0x2e>
 80046ae:	bd70      	pop	{r4, r5, r6, pc}
 80046b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80046b4:	4798      	blx	r3
 80046b6:	3601      	adds	r6, #1
 80046b8:	e7ee      	b.n	8004698 <__libc_init_array+0xc>
 80046ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80046be:	4798      	blx	r3
 80046c0:	3601      	adds	r6, #1
 80046c2:	e7f2      	b.n	80046aa <__libc_init_array+0x1e>
 80046c4:	08005844 	.word	0x08005844
 80046c8:	08005844 	.word	0x08005844
 80046cc:	08005844 	.word	0x08005844
 80046d0:	08005848 	.word	0x08005848

080046d4 <__retarget_lock_acquire_recursive>:
 80046d4:	4770      	bx	lr

080046d6 <__retarget_lock_release_recursive>:
 80046d6:	4770      	bx	lr

080046d8 <memcpy>:
 80046d8:	440a      	add	r2, r1
 80046da:	4291      	cmp	r1, r2
 80046dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80046e0:	d100      	bne.n	80046e4 <memcpy+0xc>
 80046e2:	4770      	bx	lr
 80046e4:	b510      	push	{r4, lr}
 80046e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046ea:	4291      	cmp	r1, r2
 80046ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80046f0:	d1f9      	bne.n	80046e6 <memcpy+0xe>
 80046f2:	bd10      	pop	{r4, pc}

080046f4 <_free_r>:
 80046f4:	b538      	push	{r3, r4, r5, lr}
 80046f6:	4605      	mov	r5, r0
 80046f8:	2900      	cmp	r1, #0
 80046fa:	d040      	beq.n	800477e <_free_r+0x8a>
 80046fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004700:	1f0c      	subs	r4, r1, #4
 8004702:	2b00      	cmp	r3, #0
 8004704:	bfb8      	it	lt
 8004706:	18e4      	addlt	r4, r4, r3
 8004708:	f000 f8de 	bl	80048c8 <__malloc_lock>
 800470c:	4a1c      	ldr	r2, [pc, #112]	@ (8004780 <_free_r+0x8c>)
 800470e:	6813      	ldr	r3, [r2, #0]
 8004710:	b933      	cbnz	r3, 8004720 <_free_r+0x2c>
 8004712:	6063      	str	r3, [r4, #4]
 8004714:	6014      	str	r4, [r2, #0]
 8004716:	4628      	mov	r0, r5
 8004718:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800471c:	f000 b8da 	b.w	80048d4 <__malloc_unlock>
 8004720:	42a3      	cmp	r3, r4
 8004722:	d908      	bls.n	8004736 <_free_r+0x42>
 8004724:	6820      	ldr	r0, [r4, #0]
 8004726:	1821      	adds	r1, r4, r0
 8004728:	428b      	cmp	r3, r1
 800472a:	bf01      	itttt	eq
 800472c:	6819      	ldreq	r1, [r3, #0]
 800472e:	685b      	ldreq	r3, [r3, #4]
 8004730:	1809      	addeq	r1, r1, r0
 8004732:	6021      	streq	r1, [r4, #0]
 8004734:	e7ed      	b.n	8004712 <_free_r+0x1e>
 8004736:	461a      	mov	r2, r3
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	b10b      	cbz	r3, 8004740 <_free_r+0x4c>
 800473c:	42a3      	cmp	r3, r4
 800473e:	d9fa      	bls.n	8004736 <_free_r+0x42>
 8004740:	6811      	ldr	r1, [r2, #0]
 8004742:	1850      	adds	r0, r2, r1
 8004744:	42a0      	cmp	r0, r4
 8004746:	d10b      	bne.n	8004760 <_free_r+0x6c>
 8004748:	6820      	ldr	r0, [r4, #0]
 800474a:	4401      	add	r1, r0
 800474c:	1850      	adds	r0, r2, r1
 800474e:	4283      	cmp	r3, r0
 8004750:	6011      	str	r1, [r2, #0]
 8004752:	d1e0      	bne.n	8004716 <_free_r+0x22>
 8004754:	6818      	ldr	r0, [r3, #0]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	4408      	add	r0, r1
 800475a:	6010      	str	r0, [r2, #0]
 800475c:	6053      	str	r3, [r2, #4]
 800475e:	e7da      	b.n	8004716 <_free_r+0x22>
 8004760:	d902      	bls.n	8004768 <_free_r+0x74>
 8004762:	230c      	movs	r3, #12
 8004764:	602b      	str	r3, [r5, #0]
 8004766:	e7d6      	b.n	8004716 <_free_r+0x22>
 8004768:	6820      	ldr	r0, [r4, #0]
 800476a:	1821      	adds	r1, r4, r0
 800476c:	428b      	cmp	r3, r1
 800476e:	bf01      	itttt	eq
 8004770:	6819      	ldreq	r1, [r3, #0]
 8004772:	685b      	ldreq	r3, [r3, #4]
 8004774:	1809      	addeq	r1, r1, r0
 8004776:	6021      	streq	r1, [r4, #0]
 8004778:	6063      	str	r3, [r4, #4]
 800477a:	6054      	str	r4, [r2, #4]
 800477c:	e7cb      	b.n	8004716 <_free_r+0x22>
 800477e:	bd38      	pop	{r3, r4, r5, pc}
 8004780:	20001228 	.word	0x20001228

08004784 <sbrk_aligned>:
 8004784:	b570      	push	{r4, r5, r6, lr}
 8004786:	4e0f      	ldr	r6, [pc, #60]	@ (80047c4 <sbrk_aligned+0x40>)
 8004788:	460c      	mov	r4, r1
 800478a:	6831      	ldr	r1, [r6, #0]
 800478c:	4605      	mov	r5, r0
 800478e:	b911      	cbnz	r1, 8004796 <sbrk_aligned+0x12>
 8004790:	f000 fbaa 	bl	8004ee8 <_sbrk_r>
 8004794:	6030      	str	r0, [r6, #0]
 8004796:	4621      	mov	r1, r4
 8004798:	4628      	mov	r0, r5
 800479a:	f000 fba5 	bl	8004ee8 <_sbrk_r>
 800479e:	1c43      	adds	r3, r0, #1
 80047a0:	d103      	bne.n	80047aa <sbrk_aligned+0x26>
 80047a2:	f04f 34ff 	mov.w	r4, #4294967295
 80047a6:	4620      	mov	r0, r4
 80047a8:	bd70      	pop	{r4, r5, r6, pc}
 80047aa:	1cc4      	adds	r4, r0, #3
 80047ac:	f024 0403 	bic.w	r4, r4, #3
 80047b0:	42a0      	cmp	r0, r4
 80047b2:	d0f8      	beq.n	80047a6 <sbrk_aligned+0x22>
 80047b4:	1a21      	subs	r1, r4, r0
 80047b6:	4628      	mov	r0, r5
 80047b8:	f000 fb96 	bl	8004ee8 <_sbrk_r>
 80047bc:	3001      	adds	r0, #1
 80047be:	d1f2      	bne.n	80047a6 <sbrk_aligned+0x22>
 80047c0:	e7ef      	b.n	80047a2 <sbrk_aligned+0x1e>
 80047c2:	bf00      	nop
 80047c4:	20001224 	.word	0x20001224

080047c8 <_malloc_r>:
 80047c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80047cc:	1ccd      	adds	r5, r1, #3
 80047ce:	f025 0503 	bic.w	r5, r5, #3
 80047d2:	3508      	adds	r5, #8
 80047d4:	2d0c      	cmp	r5, #12
 80047d6:	bf38      	it	cc
 80047d8:	250c      	movcc	r5, #12
 80047da:	2d00      	cmp	r5, #0
 80047dc:	4606      	mov	r6, r0
 80047de:	db01      	blt.n	80047e4 <_malloc_r+0x1c>
 80047e0:	42a9      	cmp	r1, r5
 80047e2:	d904      	bls.n	80047ee <_malloc_r+0x26>
 80047e4:	230c      	movs	r3, #12
 80047e6:	6033      	str	r3, [r6, #0]
 80047e8:	2000      	movs	r0, #0
 80047ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80047ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80048c4 <_malloc_r+0xfc>
 80047f2:	f000 f869 	bl	80048c8 <__malloc_lock>
 80047f6:	f8d8 3000 	ldr.w	r3, [r8]
 80047fa:	461c      	mov	r4, r3
 80047fc:	bb44      	cbnz	r4, 8004850 <_malloc_r+0x88>
 80047fe:	4629      	mov	r1, r5
 8004800:	4630      	mov	r0, r6
 8004802:	f7ff ffbf 	bl	8004784 <sbrk_aligned>
 8004806:	1c43      	adds	r3, r0, #1
 8004808:	4604      	mov	r4, r0
 800480a:	d158      	bne.n	80048be <_malloc_r+0xf6>
 800480c:	f8d8 4000 	ldr.w	r4, [r8]
 8004810:	4627      	mov	r7, r4
 8004812:	2f00      	cmp	r7, #0
 8004814:	d143      	bne.n	800489e <_malloc_r+0xd6>
 8004816:	2c00      	cmp	r4, #0
 8004818:	d04b      	beq.n	80048b2 <_malloc_r+0xea>
 800481a:	6823      	ldr	r3, [r4, #0]
 800481c:	4639      	mov	r1, r7
 800481e:	4630      	mov	r0, r6
 8004820:	eb04 0903 	add.w	r9, r4, r3
 8004824:	f000 fb60 	bl	8004ee8 <_sbrk_r>
 8004828:	4581      	cmp	r9, r0
 800482a:	d142      	bne.n	80048b2 <_malloc_r+0xea>
 800482c:	6821      	ldr	r1, [r4, #0]
 800482e:	4630      	mov	r0, r6
 8004830:	1a6d      	subs	r5, r5, r1
 8004832:	4629      	mov	r1, r5
 8004834:	f7ff ffa6 	bl	8004784 <sbrk_aligned>
 8004838:	3001      	adds	r0, #1
 800483a:	d03a      	beq.n	80048b2 <_malloc_r+0xea>
 800483c:	6823      	ldr	r3, [r4, #0]
 800483e:	442b      	add	r3, r5
 8004840:	6023      	str	r3, [r4, #0]
 8004842:	f8d8 3000 	ldr.w	r3, [r8]
 8004846:	685a      	ldr	r2, [r3, #4]
 8004848:	bb62      	cbnz	r2, 80048a4 <_malloc_r+0xdc>
 800484a:	f8c8 7000 	str.w	r7, [r8]
 800484e:	e00f      	b.n	8004870 <_malloc_r+0xa8>
 8004850:	6822      	ldr	r2, [r4, #0]
 8004852:	1b52      	subs	r2, r2, r5
 8004854:	d420      	bmi.n	8004898 <_malloc_r+0xd0>
 8004856:	2a0b      	cmp	r2, #11
 8004858:	d917      	bls.n	800488a <_malloc_r+0xc2>
 800485a:	1961      	adds	r1, r4, r5
 800485c:	42a3      	cmp	r3, r4
 800485e:	6025      	str	r5, [r4, #0]
 8004860:	bf18      	it	ne
 8004862:	6059      	strne	r1, [r3, #4]
 8004864:	6863      	ldr	r3, [r4, #4]
 8004866:	bf08      	it	eq
 8004868:	f8c8 1000 	streq.w	r1, [r8]
 800486c:	5162      	str	r2, [r4, r5]
 800486e:	604b      	str	r3, [r1, #4]
 8004870:	4630      	mov	r0, r6
 8004872:	f000 f82f 	bl	80048d4 <__malloc_unlock>
 8004876:	f104 000b 	add.w	r0, r4, #11
 800487a:	1d23      	adds	r3, r4, #4
 800487c:	f020 0007 	bic.w	r0, r0, #7
 8004880:	1ac2      	subs	r2, r0, r3
 8004882:	bf1c      	itt	ne
 8004884:	1a1b      	subne	r3, r3, r0
 8004886:	50a3      	strne	r3, [r4, r2]
 8004888:	e7af      	b.n	80047ea <_malloc_r+0x22>
 800488a:	6862      	ldr	r2, [r4, #4]
 800488c:	42a3      	cmp	r3, r4
 800488e:	bf0c      	ite	eq
 8004890:	f8c8 2000 	streq.w	r2, [r8]
 8004894:	605a      	strne	r2, [r3, #4]
 8004896:	e7eb      	b.n	8004870 <_malloc_r+0xa8>
 8004898:	4623      	mov	r3, r4
 800489a:	6864      	ldr	r4, [r4, #4]
 800489c:	e7ae      	b.n	80047fc <_malloc_r+0x34>
 800489e:	463c      	mov	r4, r7
 80048a0:	687f      	ldr	r7, [r7, #4]
 80048a2:	e7b6      	b.n	8004812 <_malloc_r+0x4a>
 80048a4:	461a      	mov	r2, r3
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	42a3      	cmp	r3, r4
 80048aa:	d1fb      	bne.n	80048a4 <_malloc_r+0xdc>
 80048ac:	2300      	movs	r3, #0
 80048ae:	6053      	str	r3, [r2, #4]
 80048b0:	e7de      	b.n	8004870 <_malloc_r+0xa8>
 80048b2:	230c      	movs	r3, #12
 80048b4:	4630      	mov	r0, r6
 80048b6:	6033      	str	r3, [r6, #0]
 80048b8:	f000 f80c 	bl	80048d4 <__malloc_unlock>
 80048bc:	e794      	b.n	80047e8 <_malloc_r+0x20>
 80048be:	6005      	str	r5, [r0, #0]
 80048c0:	e7d6      	b.n	8004870 <_malloc_r+0xa8>
 80048c2:	bf00      	nop
 80048c4:	20001228 	.word	0x20001228

080048c8 <__malloc_lock>:
 80048c8:	4801      	ldr	r0, [pc, #4]	@ (80048d0 <__malloc_lock+0x8>)
 80048ca:	f7ff bf03 	b.w	80046d4 <__retarget_lock_acquire_recursive>
 80048ce:	bf00      	nop
 80048d0:	20001220 	.word	0x20001220

080048d4 <__malloc_unlock>:
 80048d4:	4801      	ldr	r0, [pc, #4]	@ (80048dc <__malloc_unlock+0x8>)
 80048d6:	f7ff befe 	b.w	80046d6 <__retarget_lock_release_recursive>
 80048da:	bf00      	nop
 80048dc:	20001220 	.word	0x20001220

080048e0 <__ssputs_r>:
 80048e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048e4:	461f      	mov	r7, r3
 80048e6:	688e      	ldr	r6, [r1, #8]
 80048e8:	4682      	mov	sl, r0
 80048ea:	42be      	cmp	r6, r7
 80048ec:	460c      	mov	r4, r1
 80048ee:	4690      	mov	r8, r2
 80048f0:	680b      	ldr	r3, [r1, #0]
 80048f2:	d82d      	bhi.n	8004950 <__ssputs_r+0x70>
 80048f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80048f8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80048fc:	d026      	beq.n	800494c <__ssputs_r+0x6c>
 80048fe:	6965      	ldr	r5, [r4, #20]
 8004900:	6909      	ldr	r1, [r1, #16]
 8004902:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004906:	eba3 0901 	sub.w	r9, r3, r1
 800490a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800490e:	1c7b      	adds	r3, r7, #1
 8004910:	444b      	add	r3, r9
 8004912:	106d      	asrs	r5, r5, #1
 8004914:	429d      	cmp	r5, r3
 8004916:	bf38      	it	cc
 8004918:	461d      	movcc	r5, r3
 800491a:	0553      	lsls	r3, r2, #21
 800491c:	d527      	bpl.n	800496e <__ssputs_r+0x8e>
 800491e:	4629      	mov	r1, r5
 8004920:	f7ff ff52 	bl	80047c8 <_malloc_r>
 8004924:	4606      	mov	r6, r0
 8004926:	b360      	cbz	r0, 8004982 <__ssputs_r+0xa2>
 8004928:	464a      	mov	r2, r9
 800492a:	6921      	ldr	r1, [r4, #16]
 800492c:	f7ff fed4 	bl	80046d8 <memcpy>
 8004930:	89a3      	ldrh	r3, [r4, #12]
 8004932:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004936:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800493a:	81a3      	strh	r3, [r4, #12]
 800493c:	6126      	str	r6, [r4, #16]
 800493e:	444e      	add	r6, r9
 8004940:	6026      	str	r6, [r4, #0]
 8004942:	463e      	mov	r6, r7
 8004944:	6165      	str	r5, [r4, #20]
 8004946:	eba5 0509 	sub.w	r5, r5, r9
 800494a:	60a5      	str	r5, [r4, #8]
 800494c:	42be      	cmp	r6, r7
 800494e:	d900      	bls.n	8004952 <__ssputs_r+0x72>
 8004950:	463e      	mov	r6, r7
 8004952:	4632      	mov	r2, r6
 8004954:	4641      	mov	r1, r8
 8004956:	6820      	ldr	r0, [r4, #0]
 8004958:	f000 faac 	bl	8004eb4 <memmove>
 800495c:	2000      	movs	r0, #0
 800495e:	68a3      	ldr	r3, [r4, #8]
 8004960:	1b9b      	subs	r3, r3, r6
 8004962:	60a3      	str	r3, [r4, #8]
 8004964:	6823      	ldr	r3, [r4, #0]
 8004966:	4433      	add	r3, r6
 8004968:	6023      	str	r3, [r4, #0]
 800496a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800496e:	462a      	mov	r2, r5
 8004970:	f000 fad8 	bl	8004f24 <_realloc_r>
 8004974:	4606      	mov	r6, r0
 8004976:	2800      	cmp	r0, #0
 8004978:	d1e0      	bne.n	800493c <__ssputs_r+0x5c>
 800497a:	4650      	mov	r0, sl
 800497c:	6921      	ldr	r1, [r4, #16]
 800497e:	f7ff feb9 	bl	80046f4 <_free_r>
 8004982:	230c      	movs	r3, #12
 8004984:	f8ca 3000 	str.w	r3, [sl]
 8004988:	89a3      	ldrh	r3, [r4, #12]
 800498a:	f04f 30ff 	mov.w	r0, #4294967295
 800498e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004992:	81a3      	strh	r3, [r4, #12]
 8004994:	e7e9      	b.n	800496a <__ssputs_r+0x8a>
	...

08004998 <_svfiprintf_r>:
 8004998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800499c:	4698      	mov	r8, r3
 800499e:	898b      	ldrh	r3, [r1, #12]
 80049a0:	4607      	mov	r7, r0
 80049a2:	061b      	lsls	r3, r3, #24
 80049a4:	460d      	mov	r5, r1
 80049a6:	4614      	mov	r4, r2
 80049a8:	b09d      	sub	sp, #116	@ 0x74
 80049aa:	d510      	bpl.n	80049ce <_svfiprintf_r+0x36>
 80049ac:	690b      	ldr	r3, [r1, #16]
 80049ae:	b973      	cbnz	r3, 80049ce <_svfiprintf_r+0x36>
 80049b0:	2140      	movs	r1, #64	@ 0x40
 80049b2:	f7ff ff09 	bl	80047c8 <_malloc_r>
 80049b6:	6028      	str	r0, [r5, #0]
 80049b8:	6128      	str	r0, [r5, #16]
 80049ba:	b930      	cbnz	r0, 80049ca <_svfiprintf_r+0x32>
 80049bc:	230c      	movs	r3, #12
 80049be:	603b      	str	r3, [r7, #0]
 80049c0:	f04f 30ff 	mov.w	r0, #4294967295
 80049c4:	b01d      	add	sp, #116	@ 0x74
 80049c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049ca:	2340      	movs	r3, #64	@ 0x40
 80049cc:	616b      	str	r3, [r5, #20]
 80049ce:	2300      	movs	r3, #0
 80049d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80049d2:	2320      	movs	r3, #32
 80049d4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80049d8:	2330      	movs	r3, #48	@ 0x30
 80049da:	f04f 0901 	mov.w	r9, #1
 80049de:	f8cd 800c 	str.w	r8, [sp, #12]
 80049e2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8004b7c <_svfiprintf_r+0x1e4>
 80049e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80049ea:	4623      	mov	r3, r4
 80049ec:	469a      	mov	sl, r3
 80049ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80049f2:	b10a      	cbz	r2, 80049f8 <_svfiprintf_r+0x60>
 80049f4:	2a25      	cmp	r2, #37	@ 0x25
 80049f6:	d1f9      	bne.n	80049ec <_svfiprintf_r+0x54>
 80049f8:	ebba 0b04 	subs.w	fp, sl, r4
 80049fc:	d00b      	beq.n	8004a16 <_svfiprintf_r+0x7e>
 80049fe:	465b      	mov	r3, fp
 8004a00:	4622      	mov	r2, r4
 8004a02:	4629      	mov	r1, r5
 8004a04:	4638      	mov	r0, r7
 8004a06:	f7ff ff6b 	bl	80048e0 <__ssputs_r>
 8004a0a:	3001      	adds	r0, #1
 8004a0c:	f000 80a7 	beq.w	8004b5e <_svfiprintf_r+0x1c6>
 8004a10:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004a12:	445a      	add	r2, fp
 8004a14:	9209      	str	r2, [sp, #36]	@ 0x24
 8004a16:	f89a 3000 	ldrb.w	r3, [sl]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	f000 809f 	beq.w	8004b5e <_svfiprintf_r+0x1c6>
 8004a20:	2300      	movs	r3, #0
 8004a22:	f04f 32ff 	mov.w	r2, #4294967295
 8004a26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a2a:	f10a 0a01 	add.w	sl, sl, #1
 8004a2e:	9304      	str	r3, [sp, #16]
 8004a30:	9307      	str	r3, [sp, #28]
 8004a32:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004a36:	931a      	str	r3, [sp, #104]	@ 0x68
 8004a38:	4654      	mov	r4, sl
 8004a3a:	2205      	movs	r2, #5
 8004a3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a40:	484e      	ldr	r0, [pc, #312]	@ (8004b7c <_svfiprintf_r+0x1e4>)
 8004a42:	f000 fa61 	bl	8004f08 <memchr>
 8004a46:	9a04      	ldr	r2, [sp, #16]
 8004a48:	b9d8      	cbnz	r0, 8004a82 <_svfiprintf_r+0xea>
 8004a4a:	06d0      	lsls	r0, r2, #27
 8004a4c:	bf44      	itt	mi
 8004a4e:	2320      	movmi	r3, #32
 8004a50:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004a54:	0711      	lsls	r1, r2, #28
 8004a56:	bf44      	itt	mi
 8004a58:	232b      	movmi	r3, #43	@ 0x2b
 8004a5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004a5e:	f89a 3000 	ldrb.w	r3, [sl]
 8004a62:	2b2a      	cmp	r3, #42	@ 0x2a
 8004a64:	d015      	beq.n	8004a92 <_svfiprintf_r+0xfa>
 8004a66:	4654      	mov	r4, sl
 8004a68:	2000      	movs	r0, #0
 8004a6a:	f04f 0c0a 	mov.w	ip, #10
 8004a6e:	9a07      	ldr	r2, [sp, #28]
 8004a70:	4621      	mov	r1, r4
 8004a72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a76:	3b30      	subs	r3, #48	@ 0x30
 8004a78:	2b09      	cmp	r3, #9
 8004a7a:	d94b      	bls.n	8004b14 <_svfiprintf_r+0x17c>
 8004a7c:	b1b0      	cbz	r0, 8004aac <_svfiprintf_r+0x114>
 8004a7e:	9207      	str	r2, [sp, #28]
 8004a80:	e014      	b.n	8004aac <_svfiprintf_r+0x114>
 8004a82:	eba0 0308 	sub.w	r3, r0, r8
 8004a86:	fa09 f303 	lsl.w	r3, r9, r3
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	46a2      	mov	sl, r4
 8004a8e:	9304      	str	r3, [sp, #16]
 8004a90:	e7d2      	b.n	8004a38 <_svfiprintf_r+0xa0>
 8004a92:	9b03      	ldr	r3, [sp, #12]
 8004a94:	1d19      	adds	r1, r3, #4
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	9103      	str	r1, [sp, #12]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	bfbb      	ittet	lt
 8004a9e:	425b      	neglt	r3, r3
 8004aa0:	f042 0202 	orrlt.w	r2, r2, #2
 8004aa4:	9307      	strge	r3, [sp, #28]
 8004aa6:	9307      	strlt	r3, [sp, #28]
 8004aa8:	bfb8      	it	lt
 8004aaa:	9204      	strlt	r2, [sp, #16]
 8004aac:	7823      	ldrb	r3, [r4, #0]
 8004aae:	2b2e      	cmp	r3, #46	@ 0x2e
 8004ab0:	d10a      	bne.n	8004ac8 <_svfiprintf_r+0x130>
 8004ab2:	7863      	ldrb	r3, [r4, #1]
 8004ab4:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ab6:	d132      	bne.n	8004b1e <_svfiprintf_r+0x186>
 8004ab8:	9b03      	ldr	r3, [sp, #12]
 8004aba:	3402      	adds	r4, #2
 8004abc:	1d1a      	adds	r2, r3, #4
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	9203      	str	r2, [sp, #12]
 8004ac2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004ac6:	9305      	str	r3, [sp, #20]
 8004ac8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004b80 <_svfiprintf_r+0x1e8>
 8004acc:	2203      	movs	r2, #3
 8004ace:	4650      	mov	r0, sl
 8004ad0:	7821      	ldrb	r1, [r4, #0]
 8004ad2:	f000 fa19 	bl	8004f08 <memchr>
 8004ad6:	b138      	cbz	r0, 8004ae8 <_svfiprintf_r+0x150>
 8004ad8:	2240      	movs	r2, #64	@ 0x40
 8004ada:	9b04      	ldr	r3, [sp, #16]
 8004adc:	eba0 000a 	sub.w	r0, r0, sl
 8004ae0:	4082      	lsls	r2, r0
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	3401      	adds	r4, #1
 8004ae6:	9304      	str	r3, [sp, #16]
 8004ae8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004aec:	2206      	movs	r2, #6
 8004aee:	4825      	ldr	r0, [pc, #148]	@ (8004b84 <_svfiprintf_r+0x1ec>)
 8004af0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004af4:	f000 fa08 	bl	8004f08 <memchr>
 8004af8:	2800      	cmp	r0, #0
 8004afa:	d036      	beq.n	8004b6a <_svfiprintf_r+0x1d2>
 8004afc:	4b22      	ldr	r3, [pc, #136]	@ (8004b88 <_svfiprintf_r+0x1f0>)
 8004afe:	bb1b      	cbnz	r3, 8004b48 <_svfiprintf_r+0x1b0>
 8004b00:	9b03      	ldr	r3, [sp, #12]
 8004b02:	3307      	adds	r3, #7
 8004b04:	f023 0307 	bic.w	r3, r3, #7
 8004b08:	3308      	adds	r3, #8
 8004b0a:	9303      	str	r3, [sp, #12]
 8004b0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004b0e:	4433      	add	r3, r6
 8004b10:	9309      	str	r3, [sp, #36]	@ 0x24
 8004b12:	e76a      	b.n	80049ea <_svfiprintf_r+0x52>
 8004b14:	460c      	mov	r4, r1
 8004b16:	2001      	movs	r0, #1
 8004b18:	fb0c 3202 	mla	r2, ip, r2, r3
 8004b1c:	e7a8      	b.n	8004a70 <_svfiprintf_r+0xd8>
 8004b1e:	2300      	movs	r3, #0
 8004b20:	f04f 0c0a 	mov.w	ip, #10
 8004b24:	4619      	mov	r1, r3
 8004b26:	3401      	adds	r4, #1
 8004b28:	9305      	str	r3, [sp, #20]
 8004b2a:	4620      	mov	r0, r4
 8004b2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b30:	3a30      	subs	r2, #48	@ 0x30
 8004b32:	2a09      	cmp	r2, #9
 8004b34:	d903      	bls.n	8004b3e <_svfiprintf_r+0x1a6>
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d0c6      	beq.n	8004ac8 <_svfiprintf_r+0x130>
 8004b3a:	9105      	str	r1, [sp, #20]
 8004b3c:	e7c4      	b.n	8004ac8 <_svfiprintf_r+0x130>
 8004b3e:	4604      	mov	r4, r0
 8004b40:	2301      	movs	r3, #1
 8004b42:	fb0c 2101 	mla	r1, ip, r1, r2
 8004b46:	e7f0      	b.n	8004b2a <_svfiprintf_r+0x192>
 8004b48:	ab03      	add	r3, sp, #12
 8004b4a:	9300      	str	r3, [sp, #0]
 8004b4c:	462a      	mov	r2, r5
 8004b4e:	4638      	mov	r0, r7
 8004b50:	4b0e      	ldr	r3, [pc, #56]	@ (8004b8c <_svfiprintf_r+0x1f4>)
 8004b52:	a904      	add	r1, sp, #16
 8004b54:	f3af 8000 	nop.w
 8004b58:	1c42      	adds	r2, r0, #1
 8004b5a:	4606      	mov	r6, r0
 8004b5c:	d1d6      	bne.n	8004b0c <_svfiprintf_r+0x174>
 8004b5e:	89ab      	ldrh	r3, [r5, #12]
 8004b60:	065b      	lsls	r3, r3, #25
 8004b62:	f53f af2d 	bmi.w	80049c0 <_svfiprintf_r+0x28>
 8004b66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004b68:	e72c      	b.n	80049c4 <_svfiprintf_r+0x2c>
 8004b6a:	ab03      	add	r3, sp, #12
 8004b6c:	9300      	str	r3, [sp, #0]
 8004b6e:	462a      	mov	r2, r5
 8004b70:	4638      	mov	r0, r7
 8004b72:	4b06      	ldr	r3, [pc, #24]	@ (8004b8c <_svfiprintf_r+0x1f4>)
 8004b74:	a904      	add	r1, sp, #16
 8004b76:	f000 f87d 	bl	8004c74 <_printf_i>
 8004b7a:	e7ed      	b.n	8004b58 <_svfiprintf_r+0x1c0>
 8004b7c:	08005807 	.word	0x08005807
 8004b80:	0800580d 	.word	0x0800580d
 8004b84:	08005811 	.word	0x08005811
 8004b88:	00000000 	.word	0x00000000
 8004b8c:	080048e1 	.word	0x080048e1

08004b90 <_printf_common>:
 8004b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b94:	4616      	mov	r6, r2
 8004b96:	4698      	mov	r8, r3
 8004b98:	688a      	ldr	r2, [r1, #8]
 8004b9a:	690b      	ldr	r3, [r1, #16]
 8004b9c:	4607      	mov	r7, r0
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	bfb8      	it	lt
 8004ba2:	4613      	movlt	r3, r2
 8004ba4:	6033      	str	r3, [r6, #0]
 8004ba6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004baa:	460c      	mov	r4, r1
 8004bac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004bb0:	b10a      	cbz	r2, 8004bb6 <_printf_common+0x26>
 8004bb2:	3301      	adds	r3, #1
 8004bb4:	6033      	str	r3, [r6, #0]
 8004bb6:	6823      	ldr	r3, [r4, #0]
 8004bb8:	0699      	lsls	r1, r3, #26
 8004bba:	bf42      	ittt	mi
 8004bbc:	6833      	ldrmi	r3, [r6, #0]
 8004bbe:	3302      	addmi	r3, #2
 8004bc0:	6033      	strmi	r3, [r6, #0]
 8004bc2:	6825      	ldr	r5, [r4, #0]
 8004bc4:	f015 0506 	ands.w	r5, r5, #6
 8004bc8:	d106      	bne.n	8004bd8 <_printf_common+0x48>
 8004bca:	f104 0a19 	add.w	sl, r4, #25
 8004bce:	68e3      	ldr	r3, [r4, #12]
 8004bd0:	6832      	ldr	r2, [r6, #0]
 8004bd2:	1a9b      	subs	r3, r3, r2
 8004bd4:	42ab      	cmp	r3, r5
 8004bd6:	dc2b      	bgt.n	8004c30 <_printf_common+0xa0>
 8004bd8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004bdc:	6822      	ldr	r2, [r4, #0]
 8004bde:	3b00      	subs	r3, #0
 8004be0:	bf18      	it	ne
 8004be2:	2301      	movne	r3, #1
 8004be4:	0692      	lsls	r2, r2, #26
 8004be6:	d430      	bmi.n	8004c4a <_printf_common+0xba>
 8004be8:	4641      	mov	r1, r8
 8004bea:	4638      	mov	r0, r7
 8004bec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004bf0:	47c8      	blx	r9
 8004bf2:	3001      	adds	r0, #1
 8004bf4:	d023      	beq.n	8004c3e <_printf_common+0xae>
 8004bf6:	6823      	ldr	r3, [r4, #0]
 8004bf8:	6922      	ldr	r2, [r4, #16]
 8004bfa:	f003 0306 	and.w	r3, r3, #6
 8004bfe:	2b04      	cmp	r3, #4
 8004c00:	bf14      	ite	ne
 8004c02:	2500      	movne	r5, #0
 8004c04:	6833      	ldreq	r3, [r6, #0]
 8004c06:	f04f 0600 	mov.w	r6, #0
 8004c0a:	bf08      	it	eq
 8004c0c:	68e5      	ldreq	r5, [r4, #12]
 8004c0e:	f104 041a 	add.w	r4, r4, #26
 8004c12:	bf08      	it	eq
 8004c14:	1aed      	subeq	r5, r5, r3
 8004c16:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004c1a:	bf08      	it	eq
 8004c1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c20:	4293      	cmp	r3, r2
 8004c22:	bfc4      	itt	gt
 8004c24:	1a9b      	subgt	r3, r3, r2
 8004c26:	18ed      	addgt	r5, r5, r3
 8004c28:	42b5      	cmp	r5, r6
 8004c2a:	d11a      	bne.n	8004c62 <_printf_common+0xd2>
 8004c2c:	2000      	movs	r0, #0
 8004c2e:	e008      	b.n	8004c42 <_printf_common+0xb2>
 8004c30:	2301      	movs	r3, #1
 8004c32:	4652      	mov	r2, sl
 8004c34:	4641      	mov	r1, r8
 8004c36:	4638      	mov	r0, r7
 8004c38:	47c8      	blx	r9
 8004c3a:	3001      	adds	r0, #1
 8004c3c:	d103      	bne.n	8004c46 <_printf_common+0xb6>
 8004c3e:	f04f 30ff 	mov.w	r0, #4294967295
 8004c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c46:	3501      	adds	r5, #1
 8004c48:	e7c1      	b.n	8004bce <_printf_common+0x3e>
 8004c4a:	2030      	movs	r0, #48	@ 0x30
 8004c4c:	18e1      	adds	r1, r4, r3
 8004c4e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004c52:	1c5a      	adds	r2, r3, #1
 8004c54:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004c58:	4422      	add	r2, r4
 8004c5a:	3302      	adds	r3, #2
 8004c5c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004c60:	e7c2      	b.n	8004be8 <_printf_common+0x58>
 8004c62:	2301      	movs	r3, #1
 8004c64:	4622      	mov	r2, r4
 8004c66:	4641      	mov	r1, r8
 8004c68:	4638      	mov	r0, r7
 8004c6a:	47c8      	blx	r9
 8004c6c:	3001      	adds	r0, #1
 8004c6e:	d0e6      	beq.n	8004c3e <_printf_common+0xae>
 8004c70:	3601      	adds	r6, #1
 8004c72:	e7d9      	b.n	8004c28 <_printf_common+0x98>

08004c74 <_printf_i>:
 8004c74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c78:	7e0f      	ldrb	r7, [r1, #24]
 8004c7a:	4691      	mov	r9, r2
 8004c7c:	2f78      	cmp	r7, #120	@ 0x78
 8004c7e:	4680      	mov	r8, r0
 8004c80:	460c      	mov	r4, r1
 8004c82:	469a      	mov	sl, r3
 8004c84:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004c86:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004c8a:	d807      	bhi.n	8004c9c <_printf_i+0x28>
 8004c8c:	2f62      	cmp	r7, #98	@ 0x62
 8004c8e:	d80a      	bhi.n	8004ca6 <_printf_i+0x32>
 8004c90:	2f00      	cmp	r7, #0
 8004c92:	f000 80d3 	beq.w	8004e3c <_printf_i+0x1c8>
 8004c96:	2f58      	cmp	r7, #88	@ 0x58
 8004c98:	f000 80ba 	beq.w	8004e10 <_printf_i+0x19c>
 8004c9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004ca0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004ca4:	e03a      	b.n	8004d1c <_printf_i+0xa8>
 8004ca6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004caa:	2b15      	cmp	r3, #21
 8004cac:	d8f6      	bhi.n	8004c9c <_printf_i+0x28>
 8004cae:	a101      	add	r1, pc, #4	@ (adr r1, 8004cb4 <_printf_i+0x40>)
 8004cb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004cb4:	08004d0d 	.word	0x08004d0d
 8004cb8:	08004d21 	.word	0x08004d21
 8004cbc:	08004c9d 	.word	0x08004c9d
 8004cc0:	08004c9d 	.word	0x08004c9d
 8004cc4:	08004c9d 	.word	0x08004c9d
 8004cc8:	08004c9d 	.word	0x08004c9d
 8004ccc:	08004d21 	.word	0x08004d21
 8004cd0:	08004c9d 	.word	0x08004c9d
 8004cd4:	08004c9d 	.word	0x08004c9d
 8004cd8:	08004c9d 	.word	0x08004c9d
 8004cdc:	08004c9d 	.word	0x08004c9d
 8004ce0:	08004e23 	.word	0x08004e23
 8004ce4:	08004d4b 	.word	0x08004d4b
 8004ce8:	08004ddd 	.word	0x08004ddd
 8004cec:	08004c9d 	.word	0x08004c9d
 8004cf0:	08004c9d 	.word	0x08004c9d
 8004cf4:	08004e45 	.word	0x08004e45
 8004cf8:	08004c9d 	.word	0x08004c9d
 8004cfc:	08004d4b 	.word	0x08004d4b
 8004d00:	08004c9d 	.word	0x08004c9d
 8004d04:	08004c9d 	.word	0x08004c9d
 8004d08:	08004de5 	.word	0x08004de5
 8004d0c:	6833      	ldr	r3, [r6, #0]
 8004d0e:	1d1a      	adds	r2, r3, #4
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	6032      	str	r2, [r6, #0]
 8004d14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004d18:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e09e      	b.n	8004e5e <_printf_i+0x1ea>
 8004d20:	6833      	ldr	r3, [r6, #0]
 8004d22:	6820      	ldr	r0, [r4, #0]
 8004d24:	1d19      	adds	r1, r3, #4
 8004d26:	6031      	str	r1, [r6, #0]
 8004d28:	0606      	lsls	r6, r0, #24
 8004d2a:	d501      	bpl.n	8004d30 <_printf_i+0xbc>
 8004d2c:	681d      	ldr	r5, [r3, #0]
 8004d2e:	e003      	b.n	8004d38 <_printf_i+0xc4>
 8004d30:	0645      	lsls	r5, r0, #25
 8004d32:	d5fb      	bpl.n	8004d2c <_printf_i+0xb8>
 8004d34:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004d38:	2d00      	cmp	r5, #0
 8004d3a:	da03      	bge.n	8004d44 <_printf_i+0xd0>
 8004d3c:	232d      	movs	r3, #45	@ 0x2d
 8004d3e:	426d      	negs	r5, r5
 8004d40:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d44:	230a      	movs	r3, #10
 8004d46:	4859      	ldr	r0, [pc, #356]	@ (8004eac <_printf_i+0x238>)
 8004d48:	e011      	b.n	8004d6e <_printf_i+0xfa>
 8004d4a:	6821      	ldr	r1, [r4, #0]
 8004d4c:	6833      	ldr	r3, [r6, #0]
 8004d4e:	0608      	lsls	r0, r1, #24
 8004d50:	f853 5b04 	ldr.w	r5, [r3], #4
 8004d54:	d402      	bmi.n	8004d5c <_printf_i+0xe8>
 8004d56:	0649      	lsls	r1, r1, #25
 8004d58:	bf48      	it	mi
 8004d5a:	b2ad      	uxthmi	r5, r5
 8004d5c:	2f6f      	cmp	r7, #111	@ 0x6f
 8004d5e:	6033      	str	r3, [r6, #0]
 8004d60:	bf14      	ite	ne
 8004d62:	230a      	movne	r3, #10
 8004d64:	2308      	moveq	r3, #8
 8004d66:	4851      	ldr	r0, [pc, #324]	@ (8004eac <_printf_i+0x238>)
 8004d68:	2100      	movs	r1, #0
 8004d6a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004d6e:	6866      	ldr	r6, [r4, #4]
 8004d70:	2e00      	cmp	r6, #0
 8004d72:	bfa8      	it	ge
 8004d74:	6821      	ldrge	r1, [r4, #0]
 8004d76:	60a6      	str	r6, [r4, #8]
 8004d78:	bfa4      	itt	ge
 8004d7a:	f021 0104 	bicge.w	r1, r1, #4
 8004d7e:	6021      	strge	r1, [r4, #0]
 8004d80:	b90d      	cbnz	r5, 8004d86 <_printf_i+0x112>
 8004d82:	2e00      	cmp	r6, #0
 8004d84:	d04b      	beq.n	8004e1e <_printf_i+0x1aa>
 8004d86:	4616      	mov	r6, r2
 8004d88:	fbb5 f1f3 	udiv	r1, r5, r3
 8004d8c:	fb03 5711 	mls	r7, r3, r1, r5
 8004d90:	5dc7      	ldrb	r7, [r0, r7]
 8004d92:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004d96:	462f      	mov	r7, r5
 8004d98:	42bb      	cmp	r3, r7
 8004d9a:	460d      	mov	r5, r1
 8004d9c:	d9f4      	bls.n	8004d88 <_printf_i+0x114>
 8004d9e:	2b08      	cmp	r3, #8
 8004da0:	d10b      	bne.n	8004dba <_printf_i+0x146>
 8004da2:	6823      	ldr	r3, [r4, #0]
 8004da4:	07df      	lsls	r7, r3, #31
 8004da6:	d508      	bpl.n	8004dba <_printf_i+0x146>
 8004da8:	6923      	ldr	r3, [r4, #16]
 8004daa:	6861      	ldr	r1, [r4, #4]
 8004dac:	4299      	cmp	r1, r3
 8004dae:	bfde      	ittt	le
 8004db0:	2330      	movle	r3, #48	@ 0x30
 8004db2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004db6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004dba:	1b92      	subs	r2, r2, r6
 8004dbc:	6122      	str	r2, [r4, #16]
 8004dbe:	464b      	mov	r3, r9
 8004dc0:	4621      	mov	r1, r4
 8004dc2:	4640      	mov	r0, r8
 8004dc4:	f8cd a000 	str.w	sl, [sp]
 8004dc8:	aa03      	add	r2, sp, #12
 8004dca:	f7ff fee1 	bl	8004b90 <_printf_common>
 8004dce:	3001      	adds	r0, #1
 8004dd0:	d14a      	bne.n	8004e68 <_printf_i+0x1f4>
 8004dd2:	f04f 30ff 	mov.w	r0, #4294967295
 8004dd6:	b004      	add	sp, #16
 8004dd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ddc:	6823      	ldr	r3, [r4, #0]
 8004dde:	f043 0320 	orr.w	r3, r3, #32
 8004de2:	6023      	str	r3, [r4, #0]
 8004de4:	2778      	movs	r7, #120	@ 0x78
 8004de6:	4832      	ldr	r0, [pc, #200]	@ (8004eb0 <_printf_i+0x23c>)
 8004de8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004dec:	6823      	ldr	r3, [r4, #0]
 8004dee:	6831      	ldr	r1, [r6, #0]
 8004df0:	061f      	lsls	r7, r3, #24
 8004df2:	f851 5b04 	ldr.w	r5, [r1], #4
 8004df6:	d402      	bmi.n	8004dfe <_printf_i+0x18a>
 8004df8:	065f      	lsls	r7, r3, #25
 8004dfa:	bf48      	it	mi
 8004dfc:	b2ad      	uxthmi	r5, r5
 8004dfe:	6031      	str	r1, [r6, #0]
 8004e00:	07d9      	lsls	r1, r3, #31
 8004e02:	bf44      	itt	mi
 8004e04:	f043 0320 	orrmi.w	r3, r3, #32
 8004e08:	6023      	strmi	r3, [r4, #0]
 8004e0a:	b11d      	cbz	r5, 8004e14 <_printf_i+0x1a0>
 8004e0c:	2310      	movs	r3, #16
 8004e0e:	e7ab      	b.n	8004d68 <_printf_i+0xf4>
 8004e10:	4826      	ldr	r0, [pc, #152]	@ (8004eac <_printf_i+0x238>)
 8004e12:	e7e9      	b.n	8004de8 <_printf_i+0x174>
 8004e14:	6823      	ldr	r3, [r4, #0]
 8004e16:	f023 0320 	bic.w	r3, r3, #32
 8004e1a:	6023      	str	r3, [r4, #0]
 8004e1c:	e7f6      	b.n	8004e0c <_printf_i+0x198>
 8004e1e:	4616      	mov	r6, r2
 8004e20:	e7bd      	b.n	8004d9e <_printf_i+0x12a>
 8004e22:	6833      	ldr	r3, [r6, #0]
 8004e24:	6825      	ldr	r5, [r4, #0]
 8004e26:	1d18      	adds	r0, r3, #4
 8004e28:	6961      	ldr	r1, [r4, #20]
 8004e2a:	6030      	str	r0, [r6, #0]
 8004e2c:	062e      	lsls	r6, r5, #24
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	d501      	bpl.n	8004e36 <_printf_i+0x1c2>
 8004e32:	6019      	str	r1, [r3, #0]
 8004e34:	e002      	b.n	8004e3c <_printf_i+0x1c8>
 8004e36:	0668      	lsls	r0, r5, #25
 8004e38:	d5fb      	bpl.n	8004e32 <_printf_i+0x1be>
 8004e3a:	8019      	strh	r1, [r3, #0]
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	4616      	mov	r6, r2
 8004e40:	6123      	str	r3, [r4, #16]
 8004e42:	e7bc      	b.n	8004dbe <_printf_i+0x14a>
 8004e44:	6833      	ldr	r3, [r6, #0]
 8004e46:	2100      	movs	r1, #0
 8004e48:	1d1a      	adds	r2, r3, #4
 8004e4a:	6032      	str	r2, [r6, #0]
 8004e4c:	681e      	ldr	r6, [r3, #0]
 8004e4e:	6862      	ldr	r2, [r4, #4]
 8004e50:	4630      	mov	r0, r6
 8004e52:	f000 f859 	bl	8004f08 <memchr>
 8004e56:	b108      	cbz	r0, 8004e5c <_printf_i+0x1e8>
 8004e58:	1b80      	subs	r0, r0, r6
 8004e5a:	6060      	str	r0, [r4, #4]
 8004e5c:	6863      	ldr	r3, [r4, #4]
 8004e5e:	6123      	str	r3, [r4, #16]
 8004e60:	2300      	movs	r3, #0
 8004e62:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e66:	e7aa      	b.n	8004dbe <_printf_i+0x14a>
 8004e68:	4632      	mov	r2, r6
 8004e6a:	4649      	mov	r1, r9
 8004e6c:	4640      	mov	r0, r8
 8004e6e:	6923      	ldr	r3, [r4, #16]
 8004e70:	47d0      	blx	sl
 8004e72:	3001      	adds	r0, #1
 8004e74:	d0ad      	beq.n	8004dd2 <_printf_i+0x15e>
 8004e76:	6823      	ldr	r3, [r4, #0]
 8004e78:	079b      	lsls	r3, r3, #30
 8004e7a:	d413      	bmi.n	8004ea4 <_printf_i+0x230>
 8004e7c:	68e0      	ldr	r0, [r4, #12]
 8004e7e:	9b03      	ldr	r3, [sp, #12]
 8004e80:	4298      	cmp	r0, r3
 8004e82:	bfb8      	it	lt
 8004e84:	4618      	movlt	r0, r3
 8004e86:	e7a6      	b.n	8004dd6 <_printf_i+0x162>
 8004e88:	2301      	movs	r3, #1
 8004e8a:	4632      	mov	r2, r6
 8004e8c:	4649      	mov	r1, r9
 8004e8e:	4640      	mov	r0, r8
 8004e90:	47d0      	blx	sl
 8004e92:	3001      	adds	r0, #1
 8004e94:	d09d      	beq.n	8004dd2 <_printf_i+0x15e>
 8004e96:	3501      	adds	r5, #1
 8004e98:	68e3      	ldr	r3, [r4, #12]
 8004e9a:	9903      	ldr	r1, [sp, #12]
 8004e9c:	1a5b      	subs	r3, r3, r1
 8004e9e:	42ab      	cmp	r3, r5
 8004ea0:	dcf2      	bgt.n	8004e88 <_printf_i+0x214>
 8004ea2:	e7eb      	b.n	8004e7c <_printf_i+0x208>
 8004ea4:	2500      	movs	r5, #0
 8004ea6:	f104 0619 	add.w	r6, r4, #25
 8004eaa:	e7f5      	b.n	8004e98 <_printf_i+0x224>
 8004eac:	08005818 	.word	0x08005818
 8004eb0:	08005829 	.word	0x08005829

08004eb4 <memmove>:
 8004eb4:	4288      	cmp	r0, r1
 8004eb6:	b510      	push	{r4, lr}
 8004eb8:	eb01 0402 	add.w	r4, r1, r2
 8004ebc:	d902      	bls.n	8004ec4 <memmove+0x10>
 8004ebe:	4284      	cmp	r4, r0
 8004ec0:	4623      	mov	r3, r4
 8004ec2:	d807      	bhi.n	8004ed4 <memmove+0x20>
 8004ec4:	1e43      	subs	r3, r0, #1
 8004ec6:	42a1      	cmp	r1, r4
 8004ec8:	d008      	beq.n	8004edc <memmove+0x28>
 8004eca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004ece:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004ed2:	e7f8      	b.n	8004ec6 <memmove+0x12>
 8004ed4:	4601      	mov	r1, r0
 8004ed6:	4402      	add	r2, r0
 8004ed8:	428a      	cmp	r2, r1
 8004eda:	d100      	bne.n	8004ede <memmove+0x2a>
 8004edc:	bd10      	pop	{r4, pc}
 8004ede:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004ee2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004ee6:	e7f7      	b.n	8004ed8 <memmove+0x24>

08004ee8 <_sbrk_r>:
 8004ee8:	b538      	push	{r3, r4, r5, lr}
 8004eea:	2300      	movs	r3, #0
 8004eec:	4d05      	ldr	r5, [pc, #20]	@ (8004f04 <_sbrk_r+0x1c>)
 8004eee:	4604      	mov	r4, r0
 8004ef0:	4608      	mov	r0, r1
 8004ef2:	602b      	str	r3, [r5, #0]
 8004ef4:	f7fb fef0 	bl	8000cd8 <_sbrk>
 8004ef8:	1c43      	adds	r3, r0, #1
 8004efa:	d102      	bne.n	8004f02 <_sbrk_r+0x1a>
 8004efc:	682b      	ldr	r3, [r5, #0]
 8004efe:	b103      	cbz	r3, 8004f02 <_sbrk_r+0x1a>
 8004f00:	6023      	str	r3, [r4, #0]
 8004f02:	bd38      	pop	{r3, r4, r5, pc}
 8004f04:	2000121c 	.word	0x2000121c

08004f08 <memchr>:
 8004f08:	4603      	mov	r3, r0
 8004f0a:	b510      	push	{r4, lr}
 8004f0c:	b2c9      	uxtb	r1, r1
 8004f0e:	4402      	add	r2, r0
 8004f10:	4293      	cmp	r3, r2
 8004f12:	4618      	mov	r0, r3
 8004f14:	d101      	bne.n	8004f1a <memchr+0x12>
 8004f16:	2000      	movs	r0, #0
 8004f18:	e003      	b.n	8004f22 <memchr+0x1a>
 8004f1a:	7804      	ldrb	r4, [r0, #0]
 8004f1c:	3301      	adds	r3, #1
 8004f1e:	428c      	cmp	r4, r1
 8004f20:	d1f6      	bne.n	8004f10 <memchr+0x8>
 8004f22:	bd10      	pop	{r4, pc}

08004f24 <_realloc_r>:
 8004f24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f28:	4680      	mov	r8, r0
 8004f2a:	4615      	mov	r5, r2
 8004f2c:	460c      	mov	r4, r1
 8004f2e:	b921      	cbnz	r1, 8004f3a <_realloc_r+0x16>
 8004f30:	4611      	mov	r1, r2
 8004f32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f36:	f7ff bc47 	b.w	80047c8 <_malloc_r>
 8004f3a:	b92a      	cbnz	r2, 8004f48 <_realloc_r+0x24>
 8004f3c:	f7ff fbda 	bl	80046f4 <_free_r>
 8004f40:	2400      	movs	r4, #0
 8004f42:	4620      	mov	r0, r4
 8004f44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004f48:	f000 f81a 	bl	8004f80 <_malloc_usable_size_r>
 8004f4c:	4285      	cmp	r5, r0
 8004f4e:	4606      	mov	r6, r0
 8004f50:	d802      	bhi.n	8004f58 <_realloc_r+0x34>
 8004f52:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004f56:	d8f4      	bhi.n	8004f42 <_realloc_r+0x1e>
 8004f58:	4629      	mov	r1, r5
 8004f5a:	4640      	mov	r0, r8
 8004f5c:	f7ff fc34 	bl	80047c8 <_malloc_r>
 8004f60:	4607      	mov	r7, r0
 8004f62:	2800      	cmp	r0, #0
 8004f64:	d0ec      	beq.n	8004f40 <_realloc_r+0x1c>
 8004f66:	42b5      	cmp	r5, r6
 8004f68:	462a      	mov	r2, r5
 8004f6a:	4621      	mov	r1, r4
 8004f6c:	bf28      	it	cs
 8004f6e:	4632      	movcs	r2, r6
 8004f70:	f7ff fbb2 	bl	80046d8 <memcpy>
 8004f74:	4621      	mov	r1, r4
 8004f76:	4640      	mov	r0, r8
 8004f78:	f7ff fbbc 	bl	80046f4 <_free_r>
 8004f7c:	463c      	mov	r4, r7
 8004f7e:	e7e0      	b.n	8004f42 <_realloc_r+0x1e>

08004f80 <_malloc_usable_size_r>:
 8004f80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f84:	1f18      	subs	r0, r3, #4
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	bfbc      	itt	lt
 8004f8a:	580b      	ldrlt	r3, [r1, r0]
 8004f8c:	18c0      	addlt	r0, r0, r3
 8004f8e:	4770      	bx	lr

08004f90 <_init>:
 8004f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f92:	bf00      	nop
 8004f94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f96:	bc08      	pop	{r3}
 8004f98:	469e      	mov	lr, r3
 8004f9a:	4770      	bx	lr

08004f9c <_fini>:
 8004f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f9e:	bf00      	nop
 8004fa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fa2:	bc08      	pop	{r3}
 8004fa4:	469e      	mov	lr, r3
 8004fa6:	4770      	bx	lr
