
ENSE452Lab4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003020  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d0  0800312c  0800312c  0000412c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034fc  080034fc  00005068  2**0
                  CONTENTS
  4 .ARM          00000008  080034fc  080034fc  000044fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003504  08003504  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003504  08003504  00004504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003508  08003508  00004508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800350c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000026c  20000068  08003574  00005068  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200002d4  08003574  000052d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012874  00000000  00000000  00005091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000273e  00000000  00000000  00017905  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 00009e0a  00000000  00000000  0001a043  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ba8  00000000  00000000  00023e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012c9  00000000  00000000  000249f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018dd9  00000000  00000000  00025cc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015660  00000000  00000000  0003ea9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008c1fe  00000000  00000000  000540fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000e02f8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002c94  00000000  00000000  000e033c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  000e2fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08003114 	.word	0x08003114

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08003114 	.word	0x08003114

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_uldivmod>:
 800015c:	b953      	cbnz	r3, 8000174 <__aeabi_uldivmod+0x18>
 800015e:	b94a      	cbnz	r2, 8000174 <__aeabi_uldivmod+0x18>
 8000160:	2900      	cmp	r1, #0
 8000162:	bf08      	it	eq
 8000164:	2800      	cmpeq	r0, #0
 8000166:	bf1c      	itt	ne
 8000168:	f04f 31ff 	movne.w	r1, #4294967295
 800016c:	f04f 30ff 	movne.w	r0, #4294967295
 8000170:	f000 b968 	b.w	8000444 <__aeabi_idiv0>
 8000174:	f1ad 0c08 	sub.w	ip, sp, #8
 8000178:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800017c:	f000 f806 	bl	800018c <__udivmoddi4>
 8000180:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000184:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000188:	b004      	add	sp, #16
 800018a:	4770      	bx	lr

0800018c <__udivmoddi4>:
 800018c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000190:	9d08      	ldr	r5, [sp, #32]
 8000192:	460c      	mov	r4, r1
 8000194:	2b00      	cmp	r3, #0
 8000196:	d14e      	bne.n	8000236 <__udivmoddi4+0xaa>
 8000198:	4694      	mov	ip, r2
 800019a:	458c      	cmp	ip, r1
 800019c:	4686      	mov	lr, r0
 800019e:	fab2 f282 	clz	r2, r2
 80001a2:	d962      	bls.n	800026a <__udivmoddi4+0xde>
 80001a4:	b14a      	cbz	r2, 80001ba <__udivmoddi4+0x2e>
 80001a6:	f1c2 0320 	rsb	r3, r2, #32
 80001aa:	4091      	lsls	r1, r2
 80001ac:	fa20 f303 	lsr.w	r3, r0, r3
 80001b0:	fa0c fc02 	lsl.w	ip, ip, r2
 80001b4:	4319      	orrs	r1, r3
 80001b6:	fa00 fe02 	lsl.w	lr, r0, r2
 80001ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001be:	fbb1 f4f7 	udiv	r4, r1, r7
 80001c2:	fb07 1114 	mls	r1, r7, r4, r1
 80001c6:	fa1f f68c 	uxth.w	r6, ip
 80001ca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80001ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80001d2:	fb04 f106 	mul.w	r1, r4, r6
 80001d6:	4299      	cmp	r1, r3
 80001d8:	d90a      	bls.n	80001f0 <__udivmoddi4+0x64>
 80001da:	eb1c 0303 	adds.w	r3, ip, r3
 80001de:	f104 30ff 	add.w	r0, r4, #4294967295
 80001e2:	f080 8110 	bcs.w	8000406 <__udivmoddi4+0x27a>
 80001e6:	4299      	cmp	r1, r3
 80001e8:	f240 810d 	bls.w	8000406 <__udivmoddi4+0x27a>
 80001ec:	3c02      	subs	r4, #2
 80001ee:	4463      	add	r3, ip
 80001f0:	1a59      	subs	r1, r3, r1
 80001f2:	fbb1 f0f7 	udiv	r0, r1, r7
 80001f6:	fb07 1110 	mls	r1, r7, r0, r1
 80001fa:	fb00 f606 	mul.w	r6, r0, r6
 80001fe:	fa1f f38e 	uxth.w	r3, lr
 8000202:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000206:	429e      	cmp	r6, r3
 8000208:	d90a      	bls.n	8000220 <__udivmoddi4+0x94>
 800020a:	eb1c 0303 	adds.w	r3, ip, r3
 800020e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000212:	f080 80fa 	bcs.w	800040a <__udivmoddi4+0x27e>
 8000216:	429e      	cmp	r6, r3
 8000218:	f240 80f7 	bls.w	800040a <__udivmoddi4+0x27e>
 800021c:	4463      	add	r3, ip
 800021e:	3802      	subs	r0, #2
 8000220:	2100      	movs	r1, #0
 8000222:	1b9b      	subs	r3, r3, r6
 8000224:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000228:	b11d      	cbz	r5, 8000232 <__udivmoddi4+0xa6>
 800022a:	40d3      	lsrs	r3, r2
 800022c:	2200      	movs	r2, #0
 800022e:	e9c5 3200 	strd	r3, r2, [r5]
 8000232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000236:	428b      	cmp	r3, r1
 8000238:	d905      	bls.n	8000246 <__udivmoddi4+0xba>
 800023a:	b10d      	cbz	r5, 8000240 <__udivmoddi4+0xb4>
 800023c:	e9c5 0100 	strd	r0, r1, [r5]
 8000240:	2100      	movs	r1, #0
 8000242:	4608      	mov	r0, r1
 8000244:	e7f5      	b.n	8000232 <__udivmoddi4+0xa6>
 8000246:	fab3 f183 	clz	r1, r3
 800024a:	2900      	cmp	r1, #0
 800024c:	d146      	bne.n	80002dc <__udivmoddi4+0x150>
 800024e:	42a3      	cmp	r3, r4
 8000250:	d302      	bcc.n	8000258 <__udivmoddi4+0xcc>
 8000252:	4290      	cmp	r0, r2
 8000254:	f0c0 80ee 	bcc.w	8000434 <__udivmoddi4+0x2a8>
 8000258:	1a86      	subs	r6, r0, r2
 800025a:	eb64 0303 	sbc.w	r3, r4, r3
 800025e:	2001      	movs	r0, #1
 8000260:	2d00      	cmp	r5, #0
 8000262:	d0e6      	beq.n	8000232 <__udivmoddi4+0xa6>
 8000264:	e9c5 6300 	strd	r6, r3, [r5]
 8000268:	e7e3      	b.n	8000232 <__udivmoddi4+0xa6>
 800026a:	2a00      	cmp	r2, #0
 800026c:	f040 808f 	bne.w	800038e <__udivmoddi4+0x202>
 8000270:	eba1 040c 	sub.w	r4, r1, ip
 8000274:	2101      	movs	r1, #1
 8000276:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800027a:	fa1f f78c 	uxth.w	r7, ip
 800027e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000282:	fb08 4416 	mls	r4, r8, r6, r4
 8000286:	fb07 f006 	mul.w	r0, r7, r6
 800028a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800028e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000292:	4298      	cmp	r0, r3
 8000294:	d908      	bls.n	80002a8 <__udivmoddi4+0x11c>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f106 34ff 	add.w	r4, r6, #4294967295
 800029e:	d202      	bcs.n	80002a6 <__udivmoddi4+0x11a>
 80002a0:	4298      	cmp	r0, r3
 80002a2:	f200 80cb 	bhi.w	800043c <__udivmoddi4+0x2b0>
 80002a6:	4626      	mov	r6, r4
 80002a8:	1a1c      	subs	r4, r3, r0
 80002aa:	fbb4 f0f8 	udiv	r0, r4, r8
 80002ae:	fb08 4410 	mls	r4, r8, r0, r4
 80002b2:	fb00 f707 	mul.w	r7, r0, r7
 80002b6:	fa1f f38e 	uxth.w	r3, lr
 80002ba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002be:	429f      	cmp	r7, r3
 80002c0:	d908      	bls.n	80002d4 <__udivmoddi4+0x148>
 80002c2:	eb1c 0303 	adds.w	r3, ip, r3
 80002c6:	f100 34ff 	add.w	r4, r0, #4294967295
 80002ca:	d202      	bcs.n	80002d2 <__udivmoddi4+0x146>
 80002cc:	429f      	cmp	r7, r3
 80002ce:	f200 80ae 	bhi.w	800042e <__udivmoddi4+0x2a2>
 80002d2:	4620      	mov	r0, r4
 80002d4:	1bdb      	subs	r3, r3, r7
 80002d6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002da:	e7a5      	b.n	8000228 <__udivmoddi4+0x9c>
 80002dc:	f1c1 0720 	rsb	r7, r1, #32
 80002e0:	408b      	lsls	r3, r1
 80002e2:	fa22 fc07 	lsr.w	ip, r2, r7
 80002e6:	ea4c 0c03 	orr.w	ip, ip, r3
 80002ea:	fa24 f607 	lsr.w	r6, r4, r7
 80002ee:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80002f2:	fbb6 f8f9 	udiv	r8, r6, r9
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	fb09 6618 	mls	r6, r9, r8, r6
 80002fe:	fa20 f307 	lsr.w	r3, r0, r7
 8000302:	408c      	lsls	r4, r1
 8000304:	fa00 fa01 	lsl.w	sl, r0, r1
 8000308:	fb08 f00e 	mul.w	r0, r8, lr
 800030c:	431c      	orrs	r4, r3
 800030e:	0c23      	lsrs	r3, r4, #16
 8000310:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000314:	4298      	cmp	r0, r3
 8000316:	fa02 f201 	lsl.w	r2, r2, r1
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x1a6>
 800031c:	eb1c 0303 	adds.w	r3, ip, r3
 8000320:	f108 36ff 	add.w	r6, r8, #4294967295
 8000324:	f080 8081 	bcs.w	800042a <__udivmoddi4+0x29e>
 8000328:	4298      	cmp	r0, r3
 800032a:	d97e      	bls.n	800042a <__udivmoddi4+0x29e>
 800032c:	f1a8 0802 	sub.w	r8, r8, #2
 8000330:	4463      	add	r3, ip
 8000332:	1a1e      	subs	r6, r3, r0
 8000334:	fbb6 f3f9 	udiv	r3, r6, r9
 8000338:	fb09 6613 	mls	r6, r9, r3, r6
 800033c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000340:	b2a4      	uxth	r4, r4
 8000342:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8000346:	45a6      	cmp	lr, r4
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x1d0>
 800034a:	eb1c 0404 	adds.w	r4, ip, r4
 800034e:	f103 30ff 	add.w	r0, r3, #4294967295
 8000352:	d266      	bcs.n	8000422 <__udivmoddi4+0x296>
 8000354:	45a6      	cmp	lr, r4
 8000356:	d964      	bls.n	8000422 <__udivmoddi4+0x296>
 8000358:	3b02      	subs	r3, #2
 800035a:	4464      	add	r4, ip
 800035c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000360:	fba0 8302 	umull	r8, r3, r0, r2
 8000364:	eba4 040e 	sub.w	r4, r4, lr
 8000368:	429c      	cmp	r4, r3
 800036a:	46c6      	mov	lr, r8
 800036c:	461e      	mov	r6, r3
 800036e:	d350      	bcc.n	8000412 <__udivmoddi4+0x286>
 8000370:	d04d      	beq.n	800040e <__udivmoddi4+0x282>
 8000372:	b155      	cbz	r5, 800038a <__udivmoddi4+0x1fe>
 8000374:	ebba 030e 	subs.w	r3, sl, lr
 8000378:	eb64 0406 	sbc.w	r4, r4, r6
 800037c:	fa04 f707 	lsl.w	r7, r4, r7
 8000380:	40cb      	lsrs	r3, r1
 8000382:	431f      	orrs	r7, r3
 8000384:	40cc      	lsrs	r4, r1
 8000386:	e9c5 7400 	strd	r7, r4, [r5]
 800038a:	2100      	movs	r1, #0
 800038c:	e751      	b.n	8000232 <__udivmoddi4+0xa6>
 800038e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000392:	f1c2 0320 	rsb	r3, r2, #32
 8000396:	40d9      	lsrs	r1, r3
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa20 f303 	lsr.w	r3, r0, r3
 80003a0:	fa00 fe02 	lsl.w	lr, r0, r2
 80003a4:	fbb1 f0f8 	udiv	r0, r1, r8
 80003a8:	fb08 1110 	mls	r1, r8, r0, r1
 80003ac:	4094      	lsls	r4, r2
 80003ae:	431c      	orrs	r4, r3
 80003b0:	fa1f f78c 	uxth.w	r7, ip
 80003b4:	0c23      	lsrs	r3, r4, #16
 80003b6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ba:	fb00 f107 	mul.w	r1, r0, r7
 80003be:	4299      	cmp	r1, r3
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x248>
 80003c2:	eb1c 0303 	adds.w	r3, ip, r3
 80003c6:	f100 36ff 	add.w	r6, r0, #4294967295
 80003ca:	d22c      	bcs.n	8000426 <__udivmoddi4+0x29a>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	d92a      	bls.n	8000426 <__udivmoddi4+0x29a>
 80003d0:	3802      	subs	r0, #2
 80003d2:	4463      	add	r3, ip
 80003d4:	1a5b      	subs	r3, r3, r1
 80003d6:	fbb3 f1f8 	udiv	r1, r3, r8
 80003da:	fb08 3311 	mls	r3, r8, r1, r3
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003e4:	fb01 f307 	mul.w	r3, r1, r7
 80003e8:	42a3      	cmp	r3, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x272>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f101 36ff 	add.w	r6, r1, #4294967295
 80003f4:	d213      	bcs.n	800041e <__udivmoddi4+0x292>
 80003f6:	42a3      	cmp	r3, r4
 80003f8:	d911      	bls.n	800041e <__udivmoddi4+0x292>
 80003fa:	3902      	subs	r1, #2
 80003fc:	4464      	add	r4, ip
 80003fe:	1ae4      	subs	r4, r4, r3
 8000400:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000404:	e73b      	b.n	800027e <__udivmoddi4+0xf2>
 8000406:	4604      	mov	r4, r0
 8000408:	e6f2      	b.n	80001f0 <__udivmoddi4+0x64>
 800040a:	4608      	mov	r0, r1
 800040c:	e708      	b.n	8000220 <__udivmoddi4+0x94>
 800040e:	45c2      	cmp	sl, r8
 8000410:	d2af      	bcs.n	8000372 <__udivmoddi4+0x1e6>
 8000412:	ebb8 0e02 	subs.w	lr, r8, r2
 8000416:	eb63 060c 	sbc.w	r6, r3, ip
 800041a:	3801      	subs	r0, #1
 800041c:	e7a9      	b.n	8000372 <__udivmoddi4+0x1e6>
 800041e:	4631      	mov	r1, r6
 8000420:	e7ed      	b.n	80003fe <__udivmoddi4+0x272>
 8000422:	4603      	mov	r3, r0
 8000424:	e79a      	b.n	800035c <__udivmoddi4+0x1d0>
 8000426:	4630      	mov	r0, r6
 8000428:	e7d4      	b.n	80003d4 <__udivmoddi4+0x248>
 800042a:	46b0      	mov	r8, r6
 800042c:	e781      	b.n	8000332 <__udivmoddi4+0x1a6>
 800042e:	4463      	add	r3, ip
 8000430:	3802      	subs	r0, #2
 8000432:	e74f      	b.n	80002d4 <__udivmoddi4+0x148>
 8000434:	4606      	mov	r6, r0
 8000436:	4623      	mov	r3, r4
 8000438:	4608      	mov	r0, r1
 800043a:	e711      	b.n	8000260 <__udivmoddi4+0xd4>
 800043c:	3e02      	subs	r6, #2
 800043e:	4463      	add	r3, ip
 8000440:	e732      	b.n	80002a8 <__udivmoddi4+0x11c>
 8000442:	bf00      	nop

08000444 <__aeabi_idiv0>:
 8000444:	4770      	bx	lr
 8000446:	bf00      	nop

08000448 <cli_init>:
// Function prototypes
static void cli_prompt(void);
static void cli_execute_command(const char *command);

// Initialize the CLI
void cli_init(void) {
 8000448:	b510      	push	{r4, lr}
	const char *welcome_msg = "\r\nHello! Please enter the command you wish the STM32 to perform,\r\n"
	                              "or enter 'help' to see the available commands.\r\n";
	HAL_UART_Transmit(&huart2, (uint8_t *)welcome_msg, strlen(welcome_msg), HAL_MAX_DELAY);
 800044a:	4c08      	ldr	r4, [pc, #32]	@ (800046c <cli_init+0x24>)
 800044c:	f04f 33ff 	mov.w	r3, #4294967295
 8000450:	2272      	movs	r2, #114	@ 0x72
 8000452:	4620      	mov	r0, r4
 8000454:	4906      	ldr	r1, [pc, #24]	@ (8000470 <cli_init+0x28>)
 8000456:	f001 fb71 	bl	8001b3c <HAL_UART_Transmit>
}

// Display the prompt
static void cli_prompt(void) {
    const char *prompt = "\r\nSTM32> ";
    HAL_UART_Transmit(&huart2, (uint8_t *)prompt, strlen(prompt), HAL_MAX_DELAY);
 800045a:	4620      	mov	r0, r4
}
 800045c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_UART_Transmit(&huart2, (uint8_t *)prompt, strlen(prompt), HAL_MAX_DELAY);
 8000460:	f04f 33ff 	mov.w	r3, #4294967295
 8000464:	2209      	movs	r2, #9
 8000466:	4903      	ldr	r1, [pc, #12]	@ (8000474 <cli_init+0x2c>)
 8000468:	f001 bb68 	b.w	8001b3c <HAL_UART_Transmit>
 800046c:	200000f0 	.word	0x200000f0
 8000470:	0800312c 	.word	0x0800312c
 8000474:	080031a0 	.word	0x080031a0

08000478 <cli_process>:
void cli_process(void) {
 8000478:	b510      	push	{r4, lr}
 800047a:	b082      	sub	sp, #8
    if (HAL_UART_Receive(&huart2, &rx_data, 1, HAL_MAX_DELAY) == HAL_OK) {
 800047c:	f04f 33ff 	mov.w	r3, #4294967295
 8000480:	2201      	movs	r2, #1
 8000482:	4857      	ldr	r0, [pc, #348]	@ (80005e0 <cli_process+0x168>)
 8000484:	f10d 0107 	add.w	r1, sp, #7
 8000488:	f001 fbc6 	bl	8001c18 <HAL_UART_Receive>
 800048c:	b968      	cbnz	r0, 80004aa <cli_process+0x32>
        if (rx_data == '\r' || rx_data == '\n') {
 800048e:	f89d 2007 	ldrb.w	r2, [sp, #7]
            if (rx_index < MAX_INPUT_LENGTH - 1) {
 8000492:	4c54      	ldr	r4, [pc, #336]	@ (80005e4 <cli_process+0x16c>)
        if (rx_data == '\r' || rx_data == '\n') {
 8000494:	2a0d      	cmp	r2, #13
            if (rx_index < MAX_INPUT_LENGTH - 1) {
 8000496:	7820      	ldrb	r0, [r4, #0]
        if (rx_data == '\r' || rx_data == '\n') {
 8000498:	d009      	beq.n	80004ae <cli_process+0x36>
 800049a:	2a0a      	cmp	r2, #10
 800049c:	d007      	beq.n	80004ae <cli_process+0x36>
        } else if (rx_data == 0x7F || rx_data == '\b') {
 800049e:	2a7f      	cmp	r2, #127	@ 0x7f
 80004a0:	d02c      	beq.n	80004fc <cli_process+0x84>
 80004a2:	2a08      	cmp	r2, #8
 80004a4:	d02a      	beq.n	80004fc <cli_process+0x84>
            if (rx_index < MAX_INPUT_LENGTH - 1) {
 80004a6:	2862      	cmp	r0, #98	@ 0x62
 80004a8:	d95a      	bls.n	8000560 <cli_process+0xe8>
}
 80004aa:	b002      	add	sp, #8
 80004ac:	bd10      	pop	{r4, pc}
            rx_buffer[rx_index] = '\0';
 80004ae:	2100      	movs	r1, #0
 80004b0:	4b4d      	ldr	r3, [pc, #308]	@ (80005e8 <cli_process+0x170>)
}


// Command handler
static void cli_execute_command(const char *command) {
    if (strcmp(command, "led on") == 0) {
 80004b2:	4a4e      	ldr	r2, [pc, #312]	@ (80005ec <cli_process+0x174>)
            rx_buffer[rx_index] = '\0';
 80004b4:	5419      	strb	r1, [r3, r0]
    if (strcmp(command, "led on") == 0) {
 80004b6:	6819      	ldr	r1, [r3, #0]
 80004b8:	4291      	cmp	r1, r2
 80004ba:	d02b      	beq.n	8000514 <cli_process+0x9c>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
        const char *msg = "\r\nLED is ON\r\n";
        HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
    } else if (strcmp(command, "led off") == 0) {
 80004bc:	4a4b      	ldr	r2, [pc, #300]	@ (80005ec <cli_process+0x174>)
 80004be:	6819      	ldr	r1, [r3, #0]
 80004c0:	4291      	cmp	r1, r2
 80004c2:	d03c      	beq.n	800053e <cli_process+0xc6>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
        const char *msg = "\r\nLED is OFF\r\n";
        HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
    } else if (strcmp(command, "led status") == 0) {
 80004c4:	4a49      	ldr	r2, [pc, #292]	@ (80005ec <cli_process+0x174>)
 80004c6:	6819      	ldr	r1, [r3, #0]
 80004c8:	4291      	cmp	r1, r2
 80004ca:	d061      	beq.n	8000590 <cli_process+0x118>
            HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
        } else {
            const char *msg = "\r\nLED is OFF\r\n";
            HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
        }
    } else if (strcmp(command, "measure all") == 0) {
 80004cc:	4a48      	ldr	r2, [pc, #288]	@ (80005f0 <cli_process+0x178>)
 80004ce:	6819      	ldr	r1, [r3, #0]
 80004d0:	4291      	cmp	r1, r2
 80004d2:	d071      	beq.n	80005b8 <cli_process+0x140>
    	measure_all_operations();// Call the function to measure and display results
    } else if (strcmp(command, "help") == 0) {
 80004d4:	4a47      	ldr	r2, [pc, #284]	@ (80005f4 <cli_process+0x17c>)
 80004d6:	6819      	ldr	r1, [r3, #0]
 80004d8:	4291      	cmp	r1, r2
 80004da:	d04e      	beq.n	800057a <cli_process+0x102>
                               "led off     - Turn off the LED\r\n"
                               "led status  - Query the LED state\r\n"
                               "help        - Display this help message\r\n"
        					   "measure all - Measure and print the average time the processor takes for operations";
        HAL_UART_Transmit(&huart2, (uint8_t *)help_msg, strlen(help_msg), HAL_MAX_DELAY);
    } else if (strlen(command) == 0) {
 80004dc:	781b      	ldrb	r3, [r3, #0]
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d176      	bne.n	80005d0 <cli_process+0x158>
            rx_index = 0;
 80004e2:	f04f 0c00 	mov.w	ip, #0
    HAL_UART_Transmit(&huart2, (uint8_t *)prompt, strlen(prompt), HAL_MAX_DELAY);
 80004e6:	f04f 33ff 	mov.w	r3, #4294967295
 80004ea:	2209      	movs	r2, #9
 80004ec:	4942      	ldr	r1, [pc, #264]	@ (80005f8 <cli_process+0x180>)
 80004ee:	483c      	ldr	r0, [pc, #240]	@ (80005e0 <cli_process+0x168>)
            rx_index = 0;
 80004f0:	f884 c000 	strb.w	ip, [r4]
    HAL_UART_Transmit(&huart2, (uint8_t *)prompt, strlen(prompt), HAL_MAX_DELAY);
 80004f4:	f001 fb22 	bl	8001b3c <HAL_UART_Transmit>
}
 80004f8:	b002      	add	sp, #8
 80004fa:	bd10      	pop	{r4, pc}
            if (rx_index > 0) {
 80004fc:	2800      	cmp	r0, #0
 80004fe:	d0d4      	beq.n	80004aa <cli_process+0x32>
                rx_index--;
 8000500:	3801      	subs	r0, #1
 8000502:	7020      	strb	r0, [r4, #0]
                HAL_UART_Transmit(&huart2, (uint8_t *)"\b \b", 3, HAL_MAX_DELAY);
 8000504:	f04f 33ff 	mov.w	r3, #4294967295
 8000508:	2203      	movs	r2, #3
 800050a:	493c      	ldr	r1, [pc, #240]	@ (80005fc <cli_process+0x184>)
 800050c:	4834      	ldr	r0, [pc, #208]	@ (80005e0 <cli_process+0x168>)
 800050e:	f001 fb15 	bl	8001b3c <HAL_UART_Transmit>
 8000512:	e7ca      	b.n	80004aa <cli_process+0x32>
    if (strcmp(command, "led on") == 0) {
 8000514:	f646 626f 	movw	r2, #28271	@ 0x6e6f
 8000518:	8899      	ldrh	r1, [r3, #4]
 800051a:	4291      	cmp	r1, r2
 800051c:	d1ce      	bne.n	80004bc <cli_process+0x44>
 800051e:	799a      	ldrb	r2, [r3, #6]
 8000520:	2a00      	cmp	r2, #0
 8000522:	d1cb      	bne.n	80004bc <cli_process+0x44>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000524:	2201      	movs	r2, #1
 8000526:	2120      	movs	r1, #32
 8000528:	4835      	ldr	r0, [pc, #212]	@ (8000600 <cli_process+0x188>)
 800052a:	f000 fe45 	bl	80011b8 <HAL_GPIO_WritePin>
            HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 800052e:	f04f 33ff 	mov.w	r3, #4294967295
 8000532:	220d      	movs	r2, #13
 8000534:	4933      	ldr	r1, [pc, #204]	@ (8000604 <cli_process+0x18c>)
 8000536:	482a      	ldr	r0, [pc, #168]	@ (80005e0 <cli_process+0x168>)
 8000538:	f001 fb00 	bl	8001b3c <HAL_UART_Transmit>
 800053c:	e7d1      	b.n	80004e2 <cli_process+0x6a>
    } else if (strcmp(command, "led off") == 0) {
 800053e:	4a32      	ldr	r2, [pc, #200]	@ (8000608 <cli_process+0x190>)
 8000540:	6859      	ldr	r1, [r3, #4]
 8000542:	4291      	cmp	r1, r2
 8000544:	d1be      	bne.n	80004c4 <cli_process+0x4c>
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000546:	2200      	movs	r2, #0
 8000548:	2120      	movs	r1, #32
 800054a:	482d      	ldr	r0, [pc, #180]	@ (8000600 <cli_process+0x188>)
 800054c:	f000 fe34 	bl	80011b8 <HAL_GPIO_WritePin>
            HAL_UART_Transmit(&huart2, (uint8_t *)msg, strlen(msg), HAL_MAX_DELAY);
 8000550:	f04f 33ff 	mov.w	r3, #4294967295
 8000554:	220e      	movs	r2, #14
 8000556:	492d      	ldr	r1, [pc, #180]	@ (800060c <cli_process+0x194>)
 8000558:	4821      	ldr	r0, [pc, #132]	@ (80005e0 <cli_process+0x168>)
 800055a:	f001 faef 	bl	8001b3c <HAL_UART_Transmit>
 800055e:	e7c0      	b.n	80004e2 <cli_process+0x6a>
                rx_buffer[rx_index++] = rx_data;
 8000560:	1c43      	adds	r3, r0, #1
 8000562:	7023      	strb	r3, [r4, #0]
 8000564:	4c20      	ldr	r4, [pc, #128]	@ (80005e8 <cli_process+0x170>)
                HAL_UART_Transmit(&huart2, &rx_data, 1, HAL_MAX_DELAY);
 8000566:	f04f 33ff 	mov.w	r3, #4294967295
                rx_buffer[rx_index++] = rx_data;
 800056a:	5422      	strb	r2, [r4, r0]
                HAL_UART_Transmit(&huart2, &rx_data, 1, HAL_MAX_DELAY);
 800056c:	f10d 0107 	add.w	r1, sp, #7
 8000570:	2201      	movs	r2, #1
 8000572:	481b      	ldr	r0, [pc, #108]	@ (80005e0 <cli_process+0x168>)
 8000574:	f001 fae2 	bl	8001b3c <HAL_UART_Transmit>
}
 8000578:	e797      	b.n	80004aa <cli_process+0x32>
    } else if (strcmp(command, "help") == 0) {
 800057a:	791a      	ldrb	r2, [r3, #4]
 800057c:	2a00      	cmp	r2, #0
 800057e:	d1ad      	bne.n	80004dc <cli_process+0x64>
        HAL_UART_Transmit(&huart2, (uint8_t *)help_msg, strlen(help_msg), HAL_MAX_DELAY);
 8000580:	f04f 33ff 	mov.w	r3, #4294967295
 8000584:	22f5      	movs	r2, #245	@ 0xf5
 8000586:	4922      	ldr	r1, [pc, #136]	@ (8000610 <cli_process+0x198>)
 8000588:	4815      	ldr	r0, [pc, #84]	@ (80005e0 <cli_process+0x168>)
 800058a:	f001 fad7 	bl	8001b3c <HAL_UART_Transmit>
 800058e:	e7a8      	b.n	80004e2 <cli_process+0x6a>
    } else if (strcmp(command, "led status") == 0) {
 8000590:	4a20      	ldr	r2, [pc, #128]	@ (8000614 <cli_process+0x19c>)
 8000592:	6859      	ldr	r1, [r3, #4]
 8000594:	4291      	cmp	r1, r2
 8000596:	d199      	bne.n	80004cc <cli_process+0x54>
 8000598:	f247 3175 	movw	r1, #29557	@ 0x7375
 800059c:	4a1e      	ldr	r2, [pc, #120]	@ (8000618 <cli_process+0x1a0>)
 800059e:	8810      	ldrh	r0, [r2, #0]
 80005a0:	4288      	cmp	r0, r1
 80005a2:	d193      	bne.n	80004cc <cli_process+0x54>
 80005a4:	7892      	ldrb	r2, [r2, #2]
 80005a6:	2a00      	cmp	r2, #0
 80005a8:	d190      	bne.n	80004cc <cli_process+0x54>
        GPIO_PinState pinState = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5);
 80005aa:	2120      	movs	r1, #32
 80005ac:	4814      	ldr	r0, [pc, #80]	@ (8000600 <cli_process+0x188>)
 80005ae:	f000 fdfd 	bl	80011ac <HAL_GPIO_ReadPin>
        if (pinState == GPIO_PIN_SET) {
 80005b2:	2801      	cmp	r0, #1
 80005b4:	d1cc      	bne.n	8000550 <cli_process+0xd8>
 80005b6:	e7ba      	b.n	800052e <cli_process+0xb6>
    } else if (strcmp(command, "measure all") == 0) {
 80005b8:	4a18      	ldr	r2, [pc, #96]	@ (800061c <cli_process+0x1a4>)
 80005ba:	6859      	ldr	r1, [r3, #4]
 80005bc:	4291      	cmp	r1, r2
 80005be:	d189      	bne.n	80004d4 <cli_process+0x5c>
 80005c0:	4915      	ldr	r1, [pc, #84]	@ (8000618 <cli_process+0x1a0>)
 80005c2:	4a17      	ldr	r2, [pc, #92]	@ (8000620 <cli_process+0x1a8>)
 80005c4:	6809      	ldr	r1, [r1, #0]
 80005c6:	4291      	cmp	r1, r2
 80005c8:	d184      	bne.n	80004d4 <cli_process+0x5c>
    	measure_all_operations();// Call the function to measure and display results
 80005ca:	f000 fabb 	bl	8000b44 <measure_all_operations>
 80005ce:	e788      	b.n	80004e2 <cli_process+0x6a>
        // Do nothing for empty input
    } else {
        const char *error_msg = "\r\nUnknown command\r\n";
        HAL_UART_Transmit(&huart2, (uint8_t *)error_msg, strlen(error_msg), HAL_MAX_DELAY);
 80005d0:	f04f 33ff 	mov.w	r3, #4294967295
 80005d4:	2213      	movs	r2, #19
 80005d6:	4913      	ldr	r1, [pc, #76]	@ (8000624 <cli_process+0x1ac>)
 80005d8:	4801      	ldr	r0, [pc, #4]	@ (80005e0 <cli_process+0x168>)
 80005da:	f001 faaf 	bl	8001b3c <HAL_UART_Transmit>
 80005de:	e780      	b.n	80004e2 <cli_process+0x6a>
 80005e0:	200000f0 	.word	0x200000f0
 80005e4:	20000084 	.word	0x20000084
 80005e8:	20000088 	.word	0x20000088
 80005ec:	2064656c 	.word	0x2064656c
 80005f0:	7361656d 	.word	0x7361656d
 80005f4:	706c6568 	.word	0x706c6568
 80005f8:	080031a0 	.word	0x080031a0
 80005fc:	08003308 	.word	0x08003308
 8000600:	40010800 	.word	0x40010800
 8000604:	080031b4 	.word	0x080031b4
 8000608:	0066666f 	.word	0x0066666f
 800060c:	080031cc 	.word	0x080031cc
 8000610:	080031fc 	.word	0x080031fc
 8000614:	74617473 	.word	0x74617473
 8000618:	20000090 	.word	0x20000090
 800061c:	20657275 	.word	0x20657275
 8000620:	006c6c61 	.word	0x006c6c61
 8000624:	080032f4 	.word	0x080032f4

08000628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000628:	b530      	push	{r4, r5, lr}
 800062a:	b091      	sub	sp, #68	@ 0x44
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062c:	2220      	movs	r2, #32
 800062e:	2100      	movs	r1, #0
 8000630:	a807      	add	r0, sp, #28
 8000632:	f001 fd14 	bl	800205e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000636:	2001      	movs	r0, #1
 8000638:	2110      	movs	r1, #16
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800063a:	2300      	movs	r3, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800063c:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800063e:	f44f 1260 	mov.w	r2, #3670016	@ 0x380000
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000642:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000646:	a806      	add	r0, sp, #24
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000648:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800064c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8000650:	9301      	str	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000652:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000654:	940d      	str	r4, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000656:	920f      	str	r2, [sp, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000658:	f000 fdc0 	bl	80011dc <HAL_RCC_OscConfig>
 800065c:	b108      	cbz	r0, 8000662 <SystemClock_Config+0x3a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800065e:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000660:	e7fe      	b.n	8000660 <SystemClock_Config+0x38>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000662:	4603      	mov	r3, r0
 8000664:	250f      	movs	r5, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000666:	f44f 6280 	mov.w	r2, #1024	@ 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800066a:	4621      	mov	r1, r4
 800066c:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800066e:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000670:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000672:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000674:	9501      	str	r5, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000676:	9204      	str	r2, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000678:	f000 ff9e 	bl	80015b8 <HAL_RCC_ClockConfig>
 800067c:	b108      	cbz	r0, 8000682 <SystemClock_Config+0x5a>
 800067e:	b672      	cpsid	i
  while (1)
 8000680:	e7fe      	b.n	8000680 <SystemClock_Config+0x58>
}
 8000682:	b011      	add	sp, #68	@ 0x44
 8000684:	bd30      	pop	{r4, r5, pc}
 8000686:	bf00      	nop

08000688 <main>:
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000688:	2400      	movs	r4, #0
{
 800068a:	b500      	push	{lr}
 800068c:	b08b      	sub	sp, #44	@ 0x2c
  HAL_Init();
 800068e:	f000 fbd9 	bl	8000e44 <HAL_Init>
  SystemClock_Config();
 8000692:	f7ff ffc9 	bl	8000628 <SystemClock_Config>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000696:	2120      	movs	r1, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000698:	e9cd 4406 	strd	r4, r4, [sp, #24]
 800069c:	e9cd 4408 	strd	r4, r4, [sp, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006a0:	4b44      	ldr	r3, [pc, #272]	@ (80007b4 <main+0x12c>)
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006a2:	4845      	ldr	r0, [pc, #276]	@ (80007b8 <main+0x130>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006a4:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pin = LD2_Pin;
 80006a6:	2520      	movs	r5, #32
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006a8:	f042 0210 	orr.w	r2, r2, #16
 80006ac:	619a      	str	r2, [r3, #24]
 80006ae:	699a      	ldr	r2, [r3, #24]
 80006b0:	f002 0210 	and.w	r2, r2, #16
 80006b4:	9200      	str	r2, [sp, #0]
 80006b6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006b8:	699a      	ldr	r2, [r3, #24]
 80006ba:	430a      	orrs	r2, r1
 80006bc:	619a      	str	r2, [r3, #24]
 80006be:	699a      	ldr	r2, [r3, #24]
 80006c0:	400a      	ands	r2, r1
 80006c2:	9201      	str	r2, [sp, #4]
 80006c4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c6:	699a      	ldr	r2, [r3, #24]
 80006c8:	f042 0204 	orr.w	r2, r2, #4
 80006cc:	619a      	str	r2, [r3, #24]
 80006ce:	699a      	ldr	r2, [r3, #24]
 80006d0:	f002 0204 	and.w	r2, r2, #4
 80006d4:	9202      	str	r2, [sp, #8]
 80006d6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d8:	699a      	ldr	r2, [r3, #24]
 80006da:	f042 0208 	orr.w	r2, r2, #8
 80006de:	619a      	str	r2, [r3, #24]
 80006e0:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006e2:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e4:	f003 0308 	and.w	r3, r3, #8
 80006e8:	9303      	str	r3, [sp, #12]
 80006ea:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006ec:	f000 fd64 	bl	80011b8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 80006f0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80006f4:	4b31      	ldr	r3, [pc, #196]	@ (80007bc <main+0x134>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006f6:	4832      	ldr	r0, [pc, #200]	@ (80007c0 <main+0x138>)
 80006f8:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Pin = B1_Pin;
 80006fa:	e9cd 2306 	strd	r2, r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fe:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000700:	f000 fc38 	bl	8000f74 <HAL_GPIO_Init>
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000704:	2302      	movs	r3, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000706:	2201      	movs	r2, #1
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000708:	482b      	ldr	r0, [pc, #172]	@ (80007b8 <main+0x130>)
 800070a:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800070c:	9309      	str	r3, [sp, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800070e:	e9cd 5206 	strd	r5, r2, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000712:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000714:	f000 fc2e 	bl	8000f74 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000718:	4622      	mov	r2, r4
 800071a:	4621      	mov	r1, r4
 800071c:	2028      	movs	r0, #40	@ 0x28
 800071e:	f000 fbc7 	bl	8000eb0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000722:	2028      	movs	r0, #40	@ 0x28
 8000724:	f000 fc00 	bl	8000f28 <HAL_NVIC_EnableIRQ>
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000728:	230c      	movs	r3, #12
  huart2.Init.BaudRate = 115200;
 800072a:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
  huart2.Instance = USART2;
 800072e:	4825      	ldr	r0, [pc, #148]	@ (80007c4 <main+0x13c>)
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000730:	6143      	str	r3, [r0, #20]
  huart2.Instance = USART2;
 8000732:	4b25      	ldr	r3, [pc, #148]	@ (80007c8 <main+0x140>)
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000734:	e9c0 4402 	strd	r4, r4, [r0, #8]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000738:	e9c0 4406 	strd	r4, r4, [r0, #24]
  huart2.Init.Parity = UART_PARITY_NONE;
 800073c:	6104      	str	r4, [r0, #16]
  huart2.Init.BaudRate = 115200;
 800073e:	6042      	str	r2, [r0, #4]
  huart2.Instance = USART2;
 8000740:	6003      	str	r3, [r0, #0]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000742:	f001 f98d 	bl	8001a60 <HAL_UART_Init>
 8000746:	b108      	cbz	r0, 800074c <main+0xc4>
 8000748:	b672      	cpsid	i
  while (1)
 800074a:	e7fe      	b.n	800074a <main+0xc2>
  htim4.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 800074c:	2210      	movs	r2, #16
  htim4.Init.Period = 65535;
 800074e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
  htim4.Instance = TIM4;
 8000752:	4c1e      	ldr	r4, [pc, #120]	@ (80007cc <main+0x144>)
 8000754:	491e      	ldr	r1, [pc, #120]	@ (80007d0 <main+0x148>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000756:	e9cd 0006 	strd	r0, r0, [sp, #24]
 800075a:	e9cd 0008 	strd	r0, r0, [sp, #32]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800075e:	9004      	str	r0, [sp, #16]
  htim4.Init.Prescaler = 0;
 8000760:	6060      	str	r0, [r4, #4]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000762:	6120      	str	r0, [r4, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000764:	61a0      	str	r0, [r4, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000766:	9005      	str	r0, [sp, #20]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000768:	4620      	mov	r0, r4
  htim4.Instance = TIM4;
 800076a:	6021      	str	r1, [r4, #0]
  htim4.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 800076c:	60a2      	str	r2, [r4, #8]
  htim4.Init.Period = 65535;
 800076e:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000770:	f001 f804 	bl	800177c <HAL_TIM_Base_Init>
 8000774:	b108      	cbz	r0, 800077a <main+0xf2>
 8000776:	b672      	cpsid	i
  while (1)
 8000778:	e7fe      	b.n	8000778 <main+0xf0>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800077a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800077e:	4620      	mov	r0, r4
 8000780:	a906      	add	r1, sp, #24
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000782:	9306      	str	r3, [sp, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000784:	f001 f890 	bl	80018a8 <HAL_TIM_ConfigClockSource>
 8000788:	b108      	cbz	r0, 800078e <main+0x106>
 800078a:	b672      	cpsid	i
  while (1)
 800078c:	e7fe      	b.n	800078c <main+0x104>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800078e:	2200      	movs	r2, #0
 8000790:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000792:	4620      	mov	r0, r4
 8000794:	a904      	add	r1, sp, #16
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000796:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800079a:	f001 f92f 	bl	80019fc <HAL_TIMEx_MasterConfigSynchronization>
 800079e:	b930      	cbnz	r0, 80007ae <main+0x126>
  timer_init();  // Make sure this starts Timer 4
 80007a0:	f000 f8fc 	bl	800099c <timer_init>
  cli_init(); // Initialize the CLI
 80007a4:	f7ff fe50 	bl	8000448 <cli_init>
	cli_process(); // Process user input
 80007a8:	f7ff fe66 	bl	8000478 <cli_process>
  while (1)
 80007ac:	e7fc      	b.n	80007a8 <main+0x120>
 80007ae:	b672      	cpsid	i
  while (1)
 80007b0:	e7fe      	b.n	80007b0 <main+0x128>
 80007b2:	bf00      	nop
 80007b4:	40021000 	.word	0x40021000
 80007b8:	40010800 	.word	0x40010800
 80007bc:	10110000 	.word	0x10110000
 80007c0:	40011000 	.word	0x40011000
 80007c4:	200000f0 	.word	0x200000f0
 80007c8:	40004400 	.word	0x40004400
 80007cc:	20000138 	.word	0x20000138
 80007d0:	40000800 	.word	0x40000800

080007d4 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007d4:	4b0e      	ldr	r3, [pc, #56]	@ (8000810 <HAL_MspInit+0x3c>)
{
 80007d6:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 80007d8:	699a      	ldr	r2, [r3, #24]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80007da:	490e      	ldr	r1, [pc, #56]	@ (8000814 <HAL_MspInit+0x40>)
  __HAL_RCC_AFIO_CLK_ENABLE();
 80007dc:	f042 0201 	orr.w	r2, r2, #1
 80007e0:	619a      	str	r2, [r3, #24]
 80007e2:	699a      	ldr	r2, [r3, #24]
 80007e4:	f002 0201 	and.w	r2, r2, #1
 80007e8:	9200      	str	r2, [sp, #0]
 80007ea:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ec:	69da      	ldr	r2, [r3, #28]
 80007ee:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80007f2:	61da      	str	r2, [r3, #28]
 80007f4:	69db      	ldr	r3, [r3, #28]
 80007f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007fa:	9301      	str	r3, [sp, #4]
 80007fc:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80007fe:	684b      	ldr	r3, [r1, #4]
 8000800:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000804:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000808:	604b      	str	r3, [r1, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800080a:	b002      	add	sp, #8
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	40021000 	.word	0x40021000
 8000814:	40010000 	.word	0x40010000

08000818 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM4)
 8000818:	4b09      	ldr	r3, [pc, #36]	@ (8000840 <HAL_TIM_Base_MspInit+0x28>)
 800081a:	6802      	ldr	r2, [r0, #0]
 800081c:	429a      	cmp	r2, r3
 800081e:	d000      	beq.n	8000822 <HAL_TIM_Base_MspInit+0xa>
 8000820:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000822:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8000826:	69da      	ldr	r2, [r3, #28]
{
 8000828:	b082      	sub	sp, #8
    __HAL_RCC_TIM4_CLK_ENABLE();
 800082a:	f042 0204 	orr.w	r2, r2, #4
 800082e:	61da      	str	r2, [r3, #28]
 8000830:	69db      	ldr	r3, [r3, #28]
 8000832:	f003 0304 	and.w	r3, r3, #4
 8000836:	9301      	str	r3, [sp, #4]
 8000838:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 800083a:	b002      	add	sp, #8
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	40000800 	.word	0x40000800

08000844 <HAL_UART_MspInit>:
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000844:	2300      	movs	r3, #0
{
 8000846:	b570      	push	{r4, r5, r6, lr}
  if(huart->Instance==USART2)
 8000848:	4a16      	ldr	r2, [pc, #88]	@ (80008a4 <HAL_UART_MspInit+0x60>)
 800084a:	6801      	ldr	r1, [r0, #0]
{
 800084c:	b086      	sub	sp, #24
  if(huart->Instance==USART2)
 800084e:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000850:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8000854:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if(huart->Instance==USART2)
 8000858:	d001      	beq.n	800085e <HAL_UART_MspInit+0x1a>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800085a:	b006      	add	sp, #24
 800085c:	bd70      	pop	{r4, r5, r6, pc}
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800085e:	240c      	movs	r4, #12
 8000860:	2502      	movs	r5, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000862:	2602      	movs	r6, #2
    __HAL_RCC_USART2_CLK_ENABLE();
 8000864:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000868:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 800086c:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086e:	480e      	ldr	r0, [pc, #56]	@ (80008a8 <HAL_UART_MspInit+0x64>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8000870:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8000874:	61da      	str	r2, [r3, #28]
 8000876:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000878:	a902      	add	r1, sp, #8
    __HAL_RCC_USART2_CLK_ENABLE();
 800087a:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 800087e:	9200      	str	r2, [sp, #0]
 8000880:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000882:	699a      	ldr	r2, [r3, #24]
 8000884:	f042 0204 	orr.w	r2, r2, #4
 8000888:	619a      	str	r2, [r3, #24]
 800088a:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800088c:	e9cd 4502 	strd	r4, r5, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000890:	f003 0304 	and.w	r3, r3, #4
 8000894:	9301      	str	r3, [sp, #4]
 8000896:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000898:	9605      	str	r6, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089a:	f000 fb6b 	bl	8000f74 <HAL_GPIO_Init>
}
 800089e:	b006      	add	sp, #24
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	bf00      	nop
 80008a4:	40004400 	.word	0x40004400
 80008a8:	40010800 	.word	0x40010800

080008ac <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008ac:	e7fe      	b.n	80008ac <NMI_Handler>
 80008ae:	bf00      	nop

080008b0 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008b0:	e7fe      	b.n	80008b0 <HardFault_Handler>
 80008b2:	bf00      	nop

080008b4 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008b4:	e7fe      	b.n	80008b4 <MemManage_Handler>
 80008b6:	bf00      	nop

080008b8 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008b8:	e7fe      	b.n	80008b8 <BusFault_Handler>
 80008ba:	bf00      	nop

080008bc <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008bc:	e7fe      	b.n	80008bc <UsageFault_Handler>
 80008be:	bf00      	nop

080008c0 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop

080008c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop

080008c8 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 80008c8:	4770      	bx	lr
 80008ca:	bf00      	nop

080008cc <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008cc:	f000 bacc 	b.w	8000e68 <HAL_IncTick>

080008d0 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80008d0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80008d4:	f000 bc76 	b.w	80011c4 <HAL_GPIO_EXTI_IRQHandler>

080008d8 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 80008d8:	2001      	movs	r0, #1
 80008da:	4770      	bx	lr

080008dc <_kill>:

int _kill(int pid, int sig)
{
 80008dc:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80008de:	f001 fc0d 	bl	80020fc <__errno>
 80008e2:	2216      	movs	r2, #22
 80008e4:	4603      	mov	r3, r0
  return -1;
}
 80008e6:	f04f 30ff 	mov.w	r0, #4294967295
  errno = EINVAL;
 80008ea:	601a      	str	r2, [r3, #0]
}
 80008ec:	bd08      	pop	{r3, pc}
 80008ee:	bf00      	nop

080008f0 <_exit>:

void _exit (int status)
{
 80008f0:	b508      	push	{r3, lr}
  errno = EINVAL;
 80008f2:	f001 fc03 	bl	80020fc <__errno>
 80008f6:	2316      	movs	r3, #22
 80008f8:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 80008fa:	e7fe      	b.n	80008fa <_exit+0xa>

080008fc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008fc:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008fe:	1e16      	subs	r6, r2, #0
 8000900:	dd07      	ble.n	8000912 <_read+0x16>
 8000902:	460c      	mov	r4, r1
 8000904:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 8000906:	f3af 8000 	nop.w
 800090a:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800090e:	42a5      	cmp	r5, r4
 8000910:	d1f9      	bne.n	8000906 <_read+0xa>
  }

  return len;
}
 8000912:	4630      	mov	r0, r6
 8000914:	bd70      	pop	{r4, r5, r6, pc}
 8000916:	bf00      	nop

08000918 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000918:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800091a:	1e16      	subs	r6, r2, #0
 800091c:	dd07      	ble.n	800092e <_write+0x16>
 800091e:	460c      	mov	r4, r1
 8000920:	198d      	adds	r5, r1, r6
  {
    __io_putchar(*ptr++);
 8000922:	f814 0b01 	ldrb.w	r0, [r4], #1
 8000926:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800092a:	42ac      	cmp	r4, r5
 800092c:	d1f9      	bne.n	8000922 <_write+0xa>
  }
  return len;
}
 800092e:	4630      	mov	r0, r6
 8000930:	bd70      	pop	{r4, r5, r6, pc}
 8000932:	bf00      	nop

08000934 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8000934:	f04f 30ff 	mov.w	r0, #4294967295
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop

0800093c <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 800093c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  return 0;
}
 8000940:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 8000942:	604b      	str	r3, [r1, #4]
}
 8000944:	4770      	bx	lr
 8000946:	bf00      	nop

08000948 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8000948:	2001      	movs	r0, #1
 800094a:	4770      	bx	lr

0800094c <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 800094c:	2000      	movs	r0, #0
 800094e:	4770      	bx	lr

08000950 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000950:	490d      	ldr	r1, [pc, #52]	@ (8000988 <_sbrk+0x38>)
{
 8000952:	4603      	mov	r3, r0
 8000954:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000956:	4a0d      	ldr	r2, [pc, #52]	@ (800098c <_sbrk+0x3c>)
 8000958:	4c0d      	ldr	r4, [pc, #52]	@ (8000990 <_sbrk+0x40>)
  if (NULL == __sbrk_heap_end)
 800095a:	6808      	ldr	r0, [r1, #0]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800095c:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 800095e:	b120      	cbz	r0, 800096a <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000960:	4403      	add	r3, r0
 8000962:	4293      	cmp	r3, r2
 8000964:	d807      	bhi.n	8000976 <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000966:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 8000968:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800096a:	4c0a      	ldr	r4, [pc, #40]	@ (8000994 <_sbrk+0x44>)
 800096c:	4620      	mov	r0, r4
  if (__sbrk_heap_end + incr > max_heap)
 800096e:	4403      	add	r3, r0
 8000970:	4293      	cmp	r3, r2
    __sbrk_heap_end = &_end;
 8000972:	600c      	str	r4, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8000974:	d9f7      	bls.n	8000966 <_sbrk+0x16>
    errno = ENOMEM;
 8000976:	f001 fbc1 	bl	80020fc <__errno>
 800097a:	220c      	movs	r2, #12
 800097c:	4603      	mov	r3, r0
    return (void *)-1;
 800097e:	f04f 30ff 	mov.w	r0, #4294967295
    errno = ENOMEM;
 8000982:	601a      	str	r2, [r3, #0]
}
 8000984:	bd10      	pop	{r4, pc}
 8000986:	bf00      	nop
 8000988:	20000180 	.word	0x20000180
 800098c:	20005000 	.word	0x20005000
 8000990:	00000400 	.word	0x00000400
 8000994:	200002d8 	.word	0x200002d8

08000998 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <timer_init>:
extern TIM_HandleTypeDef htim4;
extern UART_HandleTypeDef huart2;  // UART for printing results

// Initialize and start the timer
void timer_init(void) {
    HAL_TIM_Base_Start(&htim4);
 800099c:	4801      	ldr	r0, [pc, #4]	@ (80009a4 <timer_init+0x8>)
 800099e:	f000 bf5d 	b.w	800185c <HAL_TIM_Base_Start>
 80009a2:	bf00      	nop
 80009a4:	20000138 	.word	0x20000138

080009a8 <measure_add_64bit>:
    }

    return total_ticks / 100;
}

uint16_t measure_add_64bit(void) {
 80009a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    volatile uint64_t a, b, result;
    uint32_t total_ticks = 0;
 80009ac:	f04f 0900 	mov.w	r9, #0
uint16_t measure_add_64bit(void) {
 80009b0:	f04f 0864 	mov.w	r8, #100	@ 0x64
 80009b4:	46cb      	mov	fp, r9
 80009b6:	b089      	sub	sp, #36	@ 0x24
 80009b8:	f8df a070 	ldr.w	sl, [pc, #112]	@ 8000a2c <measure_add_64bit+0x84>
 80009bc:	f8cd 8000 	str.w	r8, [sp]

    for (int i = 0; i < 100; i++) {
        a = ((uint64_t)rand() << 32) | rand();
 80009c0:	f001 f9ea 	bl	8001d98 <rand>
 80009c4:	9001      	str	r0, [sp, #4]
 80009c6:	f001 f9e7 	bl	8001d98 <rand>
 80009ca:	4680      	mov	r8, r0
 80009cc:	9b01      	ldr	r3, [sp, #4]
 80009ce:	ea43 79e0 	orr.w	r9, r3, r0, asr #31
 80009d2:	e9cd 8902 	strd	r8, r9, [sp, #8]
        b = ((uint64_t)rand() << 32) | rand();
 80009d6:	f001 f9df 	bl	8001d98 <rand>
 80009da:	9001      	str	r0, [sp, #4]
 80009dc:	f001 f9dc 	bl	8001d98 <rand>
 80009e0:	4604      	mov	r4, r0
 80009e2:	9b01      	ldr	r3, [sp, #4]
    return __HAL_TIM_GET_COUNTER(&htim4);
 80009e4:	f8da c000 	ldr.w	ip, [sl]
        b = ((uint64_t)rand() << 32) | rand();
 80009e8:	ea43 75e0 	orr.w	r5, r3, r0, asr #31
 80009ec:	e9cd 4504 	strd	r4, r5, [sp, #16]
    return __HAL_TIM_GET_COUNTER(&htim4);
 80009f0:	f8dc e024 	ldr.w	lr, [ip, #36]	@ 0x24
        int16_t start_time = timer_start();
        result = a + b;
 80009f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80009fc:	1816      	adds	r6, r2, r0
 80009fe:	eb43 0701 	adc.w	r7, r3, r1
 8000a02:	e9cd 6706 	strd	r6, r7, [sp, #24]
    int16_t end_time = __HAL_TIM_GET_COUNTER(&htim4);
 8000a06:	f8dc 3024 	ldr.w	r3, [ip, #36]	@ 0x24
        return (0xFFFF - start_time) + end_time + 1;  // Handle wraparound
 8000a0a:	eba3 030e 	sub.w	r3, r3, lr
        total_ticks += timer_stop(start_time);
 8000a0e:	b29b      	uxth	r3, r3
 8000a10:	449b      	add	fp, r3
    for (int i = 0; i < 100; i++) {
 8000a12:	9b00      	ldr	r3, [sp, #0]
 8000a14:	3b01      	subs	r3, #1
 8000a16:	9300      	str	r3, [sp, #0]
 8000a18:	d1d2      	bne.n	80009c0 <measure_add_64bit+0x18>
    }

    return total_ticks / 100;
 8000a1a:	4b05      	ldr	r3, [pc, #20]	@ (8000a30 <measure_add_64bit+0x88>)
 8000a1c:	fba3 300b 	umull	r3, r0, r3, fp
}
 8000a20:	f3c0 104f 	ubfx	r0, r0, #5, #16
 8000a24:	b009      	add	sp, #36	@ 0x24
 8000a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000a2a:	bf00      	nop
 8000a2c:	20000138 	.word	0x20000138
 8000a30:	51eb851f 	.word	0x51eb851f

08000a34 <measure_multiply_64bit>:
    }

    return total_ticks / 100;
}

uint16_t measure_multiply_64bit(void) {
 8000a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    volatile uint64_t a, b, result;
    uint32_t total_ticks = 0;
 8000a38:	f04f 0900 	mov.w	r9, #0
uint16_t measure_multiply_64bit(void) {
 8000a3c:	f04f 0864 	mov.w	r8, #100	@ 0x64
 8000a40:	46cb      	mov	fp, r9
 8000a42:	b08b      	sub	sp, #44	@ 0x2c
 8000a44:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 8000ac4 <measure_multiply_64bit+0x90>
 8000a48:	f8cd 800c 	str.w	r8, [sp, #12]

    for (int i = 0; i < 100; i++) {
        a = ((uint64_t)rand() << 32) | rand();
 8000a4c:	f001 f9a4 	bl	8001d98 <rand>
 8000a50:	9000      	str	r0, [sp, #0]
 8000a52:	f001 f9a1 	bl	8001d98 <rand>
 8000a56:	4680      	mov	r8, r0
 8000a58:	9b00      	ldr	r3, [sp, #0]
 8000a5a:	ea43 79e0 	orr.w	r9, r3, r0, asr #31
 8000a5e:	e9cd 8904 	strd	r8, r9, [sp, #16]
        b = ((uint64_t)rand() << 32) | rand();
 8000a62:	f001 f999 	bl	8001d98 <rand>
 8000a66:	9000      	str	r0, [sp, #0]
 8000a68:	f001 f996 	bl	8001d98 <rand>
 8000a6c:	4606      	mov	r6, r0
 8000a6e:	9b00      	ldr	r3, [sp, #0]
    return __HAL_TIM_GET_COUNTER(&htim4);
 8000a70:	f8da c000 	ldr.w	ip, [sl]
        b = ((uint64_t)rand() << 32) | rand();
 8000a74:	ea43 77e0 	orr.w	r7, r3, r0, asr #31
 8000a78:	e9cd 6706 	strd	r6, r7, [sp, #24]
    return __HAL_TIM_GET_COUNTER(&htim4);
 8000a7c:	f8dc e024 	ldr.w	lr, [ip, #36]	@ 0x24
        int16_t start_time = timer_start();
        result = a * b;
 8000a80:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8000a84:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8000a88:	e9cd 2300 	strd	r2, r3, [sp]
 8000a8c:	fb00 f303 	mul.w	r3, r0, r3
 8000a90:	9a00      	ldr	r2, [sp, #0]
 8000a92:	fb02 3301 	mla	r3, r2, r1, r3
 8000a96:	fba0 4502 	umull	r4, r5, r0, r2
 8000a9a:	441d      	add	r5, r3
 8000a9c:	e9cd 4508 	strd	r4, r5, [sp, #32]
    int16_t end_time = __HAL_TIM_GET_COUNTER(&htim4);
 8000aa0:	f8dc 3024 	ldr.w	r3, [ip, #36]	@ 0x24
        return (0xFFFF - start_time) + end_time + 1;  // Handle wraparound
 8000aa4:	eba3 030e 	sub.w	r3, r3, lr
        total_ticks += timer_stop(start_time);
 8000aa8:	b29b      	uxth	r3, r3
 8000aaa:	449b      	add	fp, r3
    for (int i = 0; i < 100; i++) {
 8000aac:	9b03      	ldr	r3, [sp, #12]
 8000aae:	3b01      	subs	r3, #1
 8000ab0:	9303      	str	r3, [sp, #12]
 8000ab2:	d1cb      	bne.n	8000a4c <measure_multiply_64bit+0x18>
    }

    return total_ticks / 100;
 8000ab4:	4b04      	ldr	r3, [pc, #16]	@ (8000ac8 <measure_multiply_64bit+0x94>)
 8000ab6:	fba3 300b 	umull	r3, r0, r3, fp
}
 8000aba:	f3c0 104f 	ubfx	r0, r0, #5, #16
 8000abe:	b00b      	add	sp, #44	@ 0x2c
 8000ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ac4:	20000138 	.word	0x20000138
 8000ac8:	51eb851f 	.word	0x51eb851f

08000acc <measure_divide_64bit>:
    }

    return total_ticks / 100;
}

uint16_t measure_divide_64bit(void) {
 8000acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ad0:	2464      	movs	r4, #100	@ 0x64
    volatile uint64_t a, b, result;
    uint32_t total_ticks = 0;
 8000ad2:	f04f 0a00 	mov.w	sl, #0
uint16_t measure_divide_64bit(void) {
 8000ad6:	b087      	sub	sp, #28

    for (int i = 0; i < 100; i++) {
        a = ((uint64_t)rand() << 32) | rand();
 8000ad8:	f001 f95e 	bl	8001d98 <rand>
 8000adc:	4605      	mov	r5, r0
 8000ade:	f001 f95b 	bl	8001d98 <rand>
 8000ae2:	4606      	mov	r6, r0
 8000ae4:	ea45 77e0 	orr.w	r7, r5, r0, asr #31
 8000ae8:	e9cd 6700 	strd	r6, r7, [sp]
        b = ((uint64_t)rand() << 32) | (rand() | 1);  // Ensure b is not zero
 8000aec:	f001 f954 	bl	8001d98 <rand>
 8000af0:	4605      	mov	r5, r0
 8000af2:	f001 f951 	bl	8001d98 <rand>
    return __HAL_TIM_GET_COUNTER(&htim4);
 8000af6:	4b11      	ldr	r3, [pc, #68]	@ (8000b3c <measure_divide_64bit+0x70>)
        b = ((uint64_t)rand() << 32) | (rand() | 1);  // Ensure b is not zero
 8000af8:	ea45 79e0 	orr.w	r9, r5, r0, asr #31
 8000afc:	f040 0801 	orr.w	r8, r0, #1
 8000b00:	e9cd 8902 	strd	r8, r9, [sp, #8]
    return __HAL_TIM_GET_COUNTER(&htim4);
 8000b04:	f8d3 b000 	ldr.w	fp, [r3]
 8000b08:	f8db 5024 	ldr.w	r5, [fp, #36]	@ 0x24
        int16_t start_time = timer_start();
        result = a / b;
 8000b0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8000b10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b14:	f7ff fb22 	bl	800015c <__aeabi_uldivmod>
 8000b18:	e9cd 0104 	strd	r0, r1, [sp, #16]
    int16_t end_time = __HAL_TIM_GET_COUNTER(&htim4);
 8000b1c:	f8db 3024 	ldr.w	r3, [fp, #36]	@ 0x24
    for (int i = 0; i < 100; i++) {
 8000b20:	3c01      	subs	r4, #1
        return (0xFFFF - start_time) + end_time + 1;  // Handle wraparound
 8000b22:	eba3 0305 	sub.w	r3, r3, r5
        total_ticks += timer_stop(start_time);
 8000b26:	b29b      	uxth	r3, r3
 8000b28:	449a      	add	sl, r3
    for (int i = 0; i < 100; i++) {
 8000b2a:	d1d5      	bne.n	8000ad8 <measure_divide_64bit+0xc>
    }

    return total_ticks / 100;
 8000b2c:	4b04      	ldr	r3, [pc, #16]	@ (8000b40 <measure_divide_64bit+0x74>)
 8000b2e:	fba3 300a 	umull	r3, r0, r3, sl
}
 8000b32:	f3c0 104f 	ubfx	r0, r0, #5, #16
 8000b36:	b007      	add	sp, #28
 8000b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b3c:	20000138 	.word	0x20000138
 8000b40:	51eb851f 	.word	0x51eb851f

08000b44 <measure_all_operations>:

    return total_ticks / 100;
}

// Main function to measure all operations and print results
void measure_all_operations(void) {
 8000b44:	b570      	push	{r4, r5, r6, lr}
 8000b46:	2464      	movs	r4, #100	@ 0x64
    uint32_t total_ticks = 0;
 8000b48:	2500      	movs	r5, #0
 8000b4a:	4e8c      	ldr	r6, [pc, #560]	@ (8000d7c <measure_all_operations+0x238>)
void measure_all_operations(void) {
 8000b4c:	b0a2      	sub	sp, #136	@ 0x88
        a = rand();
 8000b4e:	f001 f923 	bl	8001d98 <rand>
 8000b52:	9006      	str	r0, [sp, #24]
        b = rand();
 8000b54:	f001 f920 	bl	8001d98 <rand>
    return __HAL_TIM_GET_COUNTER(&htim4);
 8000b58:	6832      	ldr	r2, [r6, #0]
        b = rand();
 8000b5a:	9007      	str	r0, [sp, #28]
    return __HAL_TIM_GET_COUNTER(&htim4);
 8000b5c:	6a51      	ldr	r1, [r2, #36]	@ 0x24
        result = a + b;
 8000b5e:	9b06      	ldr	r3, [sp, #24]
 8000b60:	9807      	ldr	r0, [sp, #28]
    for (int i = 0; i < 100; i++) {
 8000b62:	3c01      	subs	r4, #1
        result = a + b;
 8000b64:	4403      	add	r3, r0
 8000b66:	9308      	str	r3, [sp, #32]
    int16_t end_time = __HAL_TIM_GET_COUNTER(&htim4);
 8000b68:	6a53      	ldr	r3, [r2, #36]	@ 0x24
        return (0xFFFF - start_time) + end_time + 1;  // Handle wraparound
 8000b6a:	eba3 0301 	sub.w	r3, r3, r1
        total_ticks += timer_stop(start_time);
 8000b6e:	b29b      	uxth	r3, r3
 8000b70:	441d      	add	r5, r3
    for (int i = 0; i < 100; i++) {
 8000b72:	d1ec      	bne.n	8000b4e <measure_all_operations+0xa>
    return total_ticks / 100;
 8000b74:	4b82      	ldr	r3, [pc, #520]	@ (8000d80 <measure_all_operations+0x23c>)
    sprintf(buffer, "%s: %u ticks (average over 100 trials)\r\n", operation, ticks);
 8000b76:	4983      	ldr	r1, [pc, #524]	@ (8000d84 <measure_all_operations+0x240>)
    return total_ticks / 100;
 8000b78:	fba3 2305 	umull	r2, r3, r3, r5
    sprintf(buffer, "%s: %u ticks (average over 100 trials)\r\n", operation, ticks);
 8000b7c:	a809      	add	r0, sp, #36	@ 0x24
 8000b7e:	4a82      	ldr	r2, [pc, #520]	@ (8000d88 <measure_all_operations+0x244>)
 8000b80:	f3c3 134f 	ubfx	r3, r3, #5, #16
 8000b84:	f001 fa08 	bl	8001f98 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000b88:	a809      	add	r0, sp, #36	@ 0x24
 8000b8a:	f7ff fadf 	bl	800014c <strlen>
 8000b8e:	4602      	mov	r2, r0
 8000b90:	f04f 33ff 	mov.w	r3, #4294967295
 8000b94:	a909      	add	r1, sp, #36	@ 0x24
 8000b96:	b292      	uxth	r2, r2
 8000b98:	487c      	ldr	r0, [pc, #496]	@ (8000d8c <measure_all_operations+0x248>)
 8000b9a:	f000 ffcf 	bl	8001b3c <HAL_UART_Transmit>
    print_result("\r\n32-bit Addition", measure_add_32bit());
    print_result("64-bit Addition", measure_add_64bit());
 8000b9e:	f7ff ff03 	bl	80009a8 <measure_add_64bit>
    sprintf(buffer, "%s: %u ticks (average over 100 trials)\r\n", operation, ticks);
 8000ba2:	4a7b      	ldr	r2, [pc, #492]	@ (8000d90 <measure_all_operations+0x24c>)
    print_result("64-bit Addition", measure_add_64bit());
 8000ba4:	4603      	mov	r3, r0
    sprintf(buffer, "%s: %u ticks (average over 100 trials)\r\n", operation, ticks);
 8000ba6:	4977      	ldr	r1, [pc, #476]	@ (8000d84 <measure_all_operations+0x240>)
 8000ba8:	a809      	add	r0, sp, #36	@ 0x24
 8000baa:	f001 f9f5 	bl	8001f98 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000bae:	a809      	add	r0, sp, #36	@ 0x24
 8000bb0:	f7ff facc 	bl	800014c <strlen>
 8000bb4:	4602      	mov	r2, r0
 8000bb6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bba:	4874      	ldr	r0, [pc, #464]	@ (8000d8c <measure_all_operations+0x248>)
 8000bbc:	a909      	add	r1, sp, #36	@ 0x24
 8000bbe:	b292      	uxth	r2, r2
 8000bc0:	2564      	movs	r5, #100	@ 0x64
 8000bc2:	f000 ffbb 	bl	8001b3c <HAL_UART_Transmit>
        a = rand();
 8000bc6:	f001 f8e7 	bl	8001d98 <rand>
 8000bca:	9003      	str	r0, [sp, #12]
        b = rand();
 8000bcc:	f001 f8e4 	bl	8001d98 <rand>
    return __HAL_TIM_GET_COUNTER(&htim4);
 8000bd0:	6832      	ldr	r2, [r6, #0]
        b = rand();
 8000bd2:	9004      	str	r0, [sp, #16]
    return __HAL_TIM_GET_COUNTER(&htim4);
 8000bd4:	6a51      	ldr	r1, [r2, #36]	@ 0x24
        result = a * b;
 8000bd6:	9b03      	ldr	r3, [sp, #12]
 8000bd8:	9804      	ldr	r0, [sp, #16]
    for (int i = 0; i < 100; i++) {
 8000bda:	3d01      	subs	r5, #1
        result = a * b;
 8000bdc:	fb00 f303 	mul.w	r3, r0, r3
 8000be0:	9305      	str	r3, [sp, #20]
    int16_t end_time = __HAL_TIM_GET_COUNTER(&htim4);
 8000be2:	6a53      	ldr	r3, [r2, #36]	@ 0x24
        return (0xFFFF - start_time) + end_time + 1;  // Handle wraparound
 8000be4:	eba3 0301 	sub.w	r3, r3, r1
        total_ticks += timer_stop(start_time);
 8000be8:	b29b      	uxth	r3, r3
 8000bea:	441c      	add	r4, r3
    for (int i = 0; i < 100; i++) {
 8000bec:	d1eb      	bne.n	8000bc6 <measure_all_operations+0x82>
    return total_ticks / 100;
 8000bee:	4b64      	ldr	r3, [pc, #400]	@ (8000d80 <measure_all_operations+0x23c>)
    sprintf(buffer, "%s: %u ticks (average over 100 trials)\r\n", operation, ticks);
 8000bf0:	4964      	ldr	r1, [pc, #400]	@ (8000d84 <measure_all_operations+0x240>)
    return total_ticks / 100;
 8000bf2:	fba3 2304 	umull	r2, r3, r3, r4
    sprintf(buffer, "%s: %u ticks (average over 100 trials)\r\n", operation, ticks);
 8000bf6:	a809      	add	r0, sp, #36	@ 0x24
 8000bf8:	4a66      	ldr	r2, [pc, #408]	@ (8000d94 <measure_all_operations+0x250>)
 8000bfa:	f3c3 134f 	ubfx	r3, r3, #5, #16
 8000bfe:	f001 f9cb 	bl	8001f98 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000c02:	a809      	add	r0, sp, #36	@ 0x24
 8000c04:	f7ff faa2 	bl	800014c <strlen>
 8000c08:	4602      	mov	r2, r0
 8000c0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c0e:	a909      	add	r1, sp, #36	@ 0x24
 8000c10:	b292      	uxth	r2, r2
 8000c12:	485e      	ldr	r0, [pc, #376]	@ (8000d8c <measure_all_operations+0x248>)
 8000c14:	f000 ff92 	bl	8001b3c <HAL_UART_Transmit>
    print_result("32-bit Multiplication", measure_multiply_32bit());
    print_result("64-bit Multiplication", measure_multiply_64bit());
 8000c18:	f7ff ff0c 	bl	8000a34 <measure_multiply_64bit>
    sprintf(buffer, "%s: %u ticks (average over 100 trials)\r\n", operation, ticks);
 8000c1c:	4a5e      	ldr	r2, [pc, #376]	@ (8000d98 <measure_all_operations+0x254>)
    print_result("64-bit Multiplication", measure_multiply_64bit());
 8000c1e:	4603      	mov	r3, r0
    sprintf(buffer, "%s: %u ticks (average over 100 trials)\r\n", operation, ticks);
 8000c20:	4958      	ldr	r1, [pc, #352]	@ (8000d84 <measure_all_operations+0x240>)
 8000c22:	a809      	add	r0, sp, #36	@ 0x24
 8000c24:	f001 f9b8 	bl	8001f98 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000c28:	a809      	add	r0, sp, #36	@ 0x24
 8000c2a:	f7ff fa8f 	bl	800014c <strlen>
 8000c2e:	4602      	mov	r2, r0
 8000c30:	f04f 33ff 	mov.w	r3, #4294967295
 8000c34:	4855      	ldr	r0, [pc, #340]	@ (8000d8c <measure_all_operations+0x248>)
 8000c36:	a909      	add	r1, sp, #36	@ 0x24
 8000c38:	b292      	uxth	r2, r2
 8000c3a:	2464      	movs	r4, #100	@ 0x64
 8000c3c:	f000 ff7e 	bl	8001b3c <HAL_UART_Transmit>
        a = rand();
 8000c40:	f001 f8aa 	bl	8001d98 <rand>
 8000c44:	9000      	str	r0, [sp, #0]
        b = rand() | 1;  // Ensure b is not zero
 8000c46:	f001 f8a7 	bl	8001d98 <rand>
    return __HAL_TIM_GET_COUNTER(&htim4);
 8000c4a:	6832      	ldr	r2, [r6, #0]
        b = rand() | 1;  // Ensure b is not zero
 8000c4c:	f040 0001 	orr.w	r0, r0, #1
 8000c50:	9001      	str	r0, [sp, #4]
    return __HAL_TIM_GET_COUNTER(&htim4);
 8000c52:	6a51      	ldr	r1, [r2, #36]	@ 0x24
        result = a / b;
 8000c54:	9b00      	ldr	r3, [sp, #0]
 8000c56:	9801      	ldr	r0, [sp, #4]
    for (int i = 0; i < 100; i++) {
 8000c58:	3c01      	subs	r4, #1
        result = a / b;
 8000c5a:	fbb3 f3f0 	udiv	r3, r3, r0
 8000c5e:	9302      	str	r3, [sp, #8]
    int16_t end_time = __HAL_TIM_GET_COUNTER(&htim4);
 8000c60:	6a53      	ldr	r3, [r2, #36]	@ 0x24
        return (0xFFFF - start_time) + end_time + 1;  // Handle wraparound
 8000c62:	eba3 0301 	sub.w	r3, r3, r1
        total_ticks += timer_stop(start_time);
 8000c66:	b29b      	uxth	r3, r3
 8000c68:	441d      	add	r5, r3
    for (int i = 0; i < 100; i++) {
 8000c6a:	d1e9      	bne.n	8000c40 <measure_all_operations+0xfc>
    return total_ticks / 100;
 8000c6c:	4b44      	ldr	r3, [pc, #272]	@ (8000d80 <measure_all_operations+0x23c>)
    sprintf(buffer, "%s: %u ticks (average over 100 trials)\r\n", operation, ticks);
 8000c6e:	4945      	ldr	r1, [pc, #276]	@ (8000d84 <measure_all_operations+0x240>)
    return total_ticks / 100;
 8000c70:	fba3 2305 	umull	r2, r3, r3, r5
    sprintf(buffer, "%s: %u ticks (average over 100 trials)\r\n", operation, ticks);
 8000c74:	a809      	add	r0, sp, #36	@ 0x24
 8000c76:	4a49      	ldr	r2, [pc, #292]	@ (8000d9c <measure_all_operations+0x258>)
 8000c78:	f3c3 134f 	ubfx	r3, r3, #5, #16
 8000c7c:	f001 f98c 	bl	8001f98 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000c80:	a809      	add	r0, sp, #36	@ 0x24
 8000c82:	f7ff fa63 	bl	800014c <strlen>
 8000c86:	4602      	mov	r2, r0
 8000c88:	f04f 33ff 	mov.w	r3, #4294967295
 8000c8c:	a909      	add	r1, sp, #36	@ 0x24
 8000c8e:	b292      	uxth	r2, r2
 8000c90:	483e      	ldr	r0, [pc, #248]	@ (8000d8c <measure_all_operations+0x248>)
 8000c92:	f000 ff53 	bl	8001b3c <HAL_UART_Transmit>
    print_result("32-bit Division", measure_divide_32bit());
    print_result("64-bit Division", measure_divide_64bit());
 8000c96:	f7ff ff19 	bl	8000acc <measure_divide_64bit>
    sprintf(buffer, "%s: %u ticks (average over 100 trials)\r\n", operation, ticks);
 8000c9a:	4a41      	ldr	r2, [pc, #260]	@ (8000da0 <measure_all_operations+0x25c>)
    print_result("64-bit Division", measure_divide_64bit());
 8000c9c:	4603      	mov	r3, r0
    sprintf(buffer, "%s: %u ticks (average over 100 trials)\r\n", operation, ticks);
 8000c9e:	4939      	ldr	r1, [pc, #228]	@ (8000d84 <measure_all_operations+0x240>)
 8000ca0:	a809      	add	r0, sp, #36	@ 0x24
 8000ca2:	f001 f979 	bl	8001f98 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000ca6:	a809      	add	r0, sp, #36	@ 0x24
 8000ca8:	f7ff fa50 	bl	800014c <strlen>
 8000cac:	4602      	mov	r2, r0
    return __HAL_TIM_GET_COUNTER(&htim4);
 8000cae:	2564      	movs	r5, #100	@ 0x64
    HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000cb0:	b292      	uxth	r2, r2
 8000cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8000cb6:	4835      	ldr	r0, [pc, #212]	@ (8000d8c <measure_all_operations+0x248>)
 8000cb8:	a909      	add	r1, sp, #36	@ 0x24
 8000cba:	f000 ff3f 	bl	8001b3c <HAL_UART_Transmit>
    return __HAL_TIM_GET_COUNTER(&htim4);
 8000cbe:	6832      	ldr	r2, [r6, #0]
 8000cc0:	6a51      	ldr	r1, [r2, #36]	@ 0x24
    int16_t end_time = __HAL_TIM_GET_COUNTER(&htim4);
 8000cc2:	6a53      	ldr	r3, [r2, #36]	@ 0x24
    for (int i = 0; i < 100; i++) {
 8000cc4:	3d01      	subs	r5, #1
        return (0xFFFF - start_time) + end_time + 1;  // Handle wraparound
 8000cc6:	eba3 0301 	sub.w	r3, r3, r1
        total_ticks += timer_stop(start_time);
 8000cca:	b29b      	uxth	r3, r3
 8000ccc:	441c      	add	r4, r3
    for (int i = 0; i < 100; i++) {
 8000cce:	d1f7      	bne.n	8000cc0 <measure_all_operations+0x17c>
    return total_ticks / 100;
 8000cd0:	4b2b      	ldr	r3, [pc, #172]	@ (8000d80 <measure_all_operations+0x23c>)
    sprintf(buffer, "%s: %u ticks (average over 100 trials)\r\n", operation, ticks);
 8000cd2:	492c      	ldr	r1, [pc, #176]	@ (8000d84 <measure_all_operations+0x240>)
    return total_ticks / 100;
 8000cd4:	fba3 2304 	umull	r2, r3, r3, r4
    sprintf(buffer, "%s: %u ticks (average over 100 trials)\r\n", operation, ticks);
 8000cd8:	a809      	add	r0, sp, #36	@ 0x24
 8000cda:	4a32      	ldr	r2, [pc, #200]	@ (8000da4 <measure_all_operations+0x260>)
 8000cdc:	f3c3 134f 	ubfx	r3, r3, #5, #16
 8000ce0:	f001 f95a 	bl	8001f98 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000ce4:	a809      	add	r0, sp, #36	@ 0x24
 8000ce6:	f7ff fa31 	bl	800014c <strlen>
 8000cea:	4602      	mov	r2, r0
    return __HAL_TIM_GET_COUNTER(&htim4);
 8000cec:	2464      	movs	r4, #100	@ 0x64
    HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000cee:	b292      	uxth	r2, r2
 8000cf0:	f04f 33ff 	mov.w	r3, #4294967295
 8000cf4:	4825      	ldr	r0, [pc, #148]	@ (8000d8c <measure_all_operations+0x248>)
 8000cf6:	a909      	add	r1, sp, #36	@ 0x24
 8000cf8:	f000 ff20 	bl	8001b3c <HAL_UART_Transmit>
    return __HAL_TIM_GET_COUNTER(&htim4);
 8000cfc:	6832      	ldr	r2, [r6, #0]
 8000cfe:	6a51      	ldr	r1, [r2, #36]	@ 0x24
    int16_t end_time = __HAL_TIM_GET_COUNTER(&htim4);
 8000d00:	6a53      	ldr	r3, [r2, #36]	@ 0x24
    for (int i = 0; i < 100; i++) {
 8000d02:	3c01      	subs	r4, #1
        return (0xFFFF - start_time) + end_time + 1;  // Handle wraparound
 8000d04:	eba3 0301 	sub.w	r3, r3, r1
        total_ticks += timer_stop(start_time);
 8000d08:	b29b      	uxth	r3, r3
 8000d0a:	441d      	add	r5, r3
    for (int i = 0; i < 100; i++) {
 8000d0c:	d1f7      	bne.n	8000cfe <measure_all_operations+0x1ba>
    return total_ticks / 100;
 8000d0e:	4b1c      	ldr	r3, [pc, #112]	@ (8000d80 <measure_all_operations+0x23c>)
    sprintf(buffer, "%s: %u ticks (average over 100 trials)\r\n", operation, ticks);
 8000d10:	491c      	ldr	r1, [pc, #112]	@ (8000d84 <measure_all_operations+0x240>)
    return total_ticks / 100;
 8000d12:	fba3 2305 	umull	r2, r3, r3, r5
    sprintf(buffer, "%s: %u ticks (average over 100 trials)\r\n", operation, ticks);
 8000d16:	a809      	add	r0, sp, #36	@ 0x24
 8000d18:	4a23      	ldr	r2, [pc, #140]	@ (8000da8 <measure_all_operations+0x264>)
 8000d1a:	f3c3 134f 	ubfx	r3, r3, #5, #16
 8000d1e:	f001 f93b 	bl	8001f98 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000d22:	a809      	add	r0, sp, #36	@ 0x24
 8000d24:	f7ff fa12 	bl	800014c <strlen>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	a909      	add	r1, sp, #36	@ 0x24
 8000d2c:	b292      	uxth	r2, r2
 8000d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d32:	4816      	ldr	r0, [pc, #88]	@ (8000d8c <measure_all_operations+0x248>)
 8000d34:	f000 ff02 	bl	8001b3c <HAL_UART_Transmit>
    return __HAL_TIM_GET_COUNTER(&htim4);
 8000d38:	2264      	movs	r2, #100	@ 0x64
 8000d3a:	6831      	ldr	r1, [r6, #0]
 8000d3c:	6a48      	ldr	r0, [r1, #36]	@ 0x24
    int16_t end_time = __HAL_TIM_GET_COUNTER(&htim4);
 8000d3e:	6a4b      	ldr	r3, [r1, #36]	@ 0x24
    for (int i = 0; i < 100; i++) {
 8000d40:	3a01      	subs	r2, #1
        return (0xFFFF - start_time) + end_time + 1;  // Handle wraparound
 8000d42:	eba3 0300 	sub.w	r3, r3, r0
        total_ticks += timer_stop(start_time);
 8000d46:	b29b      	uxth	r3, r3
 8000d48:	441c      	add	r4, r3
    for (int i = 0; i < 100; i++) {
 8000d4a:	d1f7      	bne.n	8000d3c <measure_all_operations+0x1f8>
    return total_ticks / 100;
 8000d4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000d80 <measure_all_operations+0x23c>)
    sprintf(buffer, "%s: %u ticks (average over 100 trials)\r\n", operation, ticks);
 8000d4e:	4a17      	ldr	r2, [pc, #92]	@ (8000dac <measure_all_operations+0x268>)
    return total_ticks / 100;
 8000d50:	fba3 1304 	umull	r1, r3, r3, r4
    sprintf(buffer, "%s: %u ticks (average over 100 trials)\r\n", operation, ticks);
 8000d54:	a809      	add	r0, sp, #36	@ 0x24
 8000d56:	490b      	ldr	r1, [pc, #44]	@ (8000d84 <measure_all_operations+0x240>)
 8000d58:	f3c3 134f 	ubfx	r3, r3, #5, #16
 8000d5c:	f001 f91c 	bl	8001f98 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000d60:	a809      	add	r0, sp, #36	@ 0x24
 8000d62:	f7ff f9f3 	bl	800014c <strlen>
 8000d66:	4602      	mov	r2, r0
 8000d68:	f04f 33ff 	mov.w	r3, #4294967295
 8000d6c:	a909      	add	r1, sp, #36	@ 0x24
 8000d6e:	b292      	uxth	r2, r2
 8000d70:	4806      	ldr	r0, [pc, #24]	@ (8000d8c <measure_all_operations+0x248>)
 8000d72:	f000 fee3 	bl	8001b3c <HAL_UART_Transmit>
    print_result("8-byte Struct Copy", measure_copy_8byte());
    print_result("128-byte Struct Copy", measure_copy_128byte());
    print_result("1024-byte Struct Copy", measure_copy_1024byte());
}
 8000d76:	b022      	add	sp, #136	@ 0x88
 8000d78:	bd70      	pop	{r4, r5, r6, pc}
 8000d7a:	bf00      	nop
 8000d7c:	20000138 	.word	0x20000138
 8000d80:	51eb851f 	.word	0x51eb851f
 8000d84:	08003324 	.word	0x08003324
 8000d88:	08003350 	.word	0x08003350
 8000d8c:	200000f0 	.word	0x200000f0
 8000d90:	08003364 	.word	0x08003364
 8000d94:	08003374 	.word	0x08003374
 8000d98:	0800338c 	.word	0x0800338c
 8000d9c:	080033a4 	.word	0x080033a4
 8000da0:	080033b4 	.word	0x080033b4
 8000da4:	080033c4 	.word	0x080033c4
 8000da8:	080033d8 	.word	0x080033d8
 8000dac:	080033f0 	.word	0x080033f0

08000db0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000db0:	f7ff fdf2 	bl	8000998 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000db4:	480b      	ldr	r0, [pc, #44]	@ (8000de4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000db6:	490c      	ldr	r1, [pc, #48]	@ (8000de8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000db8:	4a0c      	ldr	r2, [pc, #48]	@ (8000dec <LoopFillZerobss+0x16>)
  movs r3, #0
 8000dba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dbc:	e002      	b.n	8000dc4 <LoopCopyDataInit>

08000dbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dc2:	3304      	adds	r3, #4

08000dc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dc8:	d3f9      	bcc.n	8000dbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dca:	4a09      	ldr	r2, [pc, #36]	@ (8000df0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000dcc:	4c09      	ldr	r4, [pc, #36]	@ (8000df4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dd0:	e001      	b.n	8000dd6 <LoopFillZerobss>

08000dd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dd4:	3204      	adds	r2, #4

08000dd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dd8:	d3fb      	bcc.n	8000dd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dda:	f001 f995 	bl	8002108 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dde:	f7ff fc53 	bl	8000688 <main>
  bx lr
 8000de2:	4770      	bx	lr
  ldr r0, =_sdata
 8000de4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000de8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000dec:	0800350c 	.word	0x0800350c
  ldr r2, =_sbss
 8000df0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000df4:	200002d4 	.word	0x200002d4

08000df8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000df8:	e7fe      	b.n	8000df8 <ADC1_2_IRQHandler>
	...

08000dfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dfc:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dfe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e02:	4a0d      	ldr	r2, [pc, #52]	@ (8000e38 <HAL_InitTick+0x3c>)
{
 8000e04:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e06:	7811      	ldrb	r1, [r2, #0]
 8000e08:	4a0c      	ldr	r2, [pc, #48]	@ (8000e3c <HAL_InitTick+0x40>)
 8000e0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e0e:	6812      	ldr	r2, [r2, #0]
 8000e10:	fbb2 f0f3 	udiv	r0, r2, r3
 8000e14:	f000 f896 	bl	8000f44 <HAL_SYSTICK_Config>
 8000e18:	b908      	cbnz	r0, 8000e1e <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e1a:	2d0f      	cmp	r5, #15
 8000e1c:	d901      	bls.n	8000e22 <HAL_InitTick+0x26>
    return HAL_ERROR;
 8000e1e:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000e20:	bd38      	pop	{r3, r4, r5, pc}
 8000e22:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e24:	4602      	mov	r2, r0
 8000e26:	4629      	mov	r1, r5
 8000e28:	f04f 30ff 	mov.w	r0, #4294967295
 8000e2c:	f000 f840 	bl	8000eb0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e30:	4b03      	ldr	r3, [pc, #12]	@ (8000e40 <HAL_InitTick+0x44>)
 8000e32:	4620      	mov	r0, r4
 8000e34:	601d      	str	r5, [r3, #0]
}
 8000e36:	bd38      	pop	{r3, r4, r5, pc}
 8000e38:	20000004 	.word	0x20000004
 8000e3c:	20000000 	.word	0x20000000
 8000e40:	20000008 	.word	0x20000008

08000e44 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e44:	4a07      	ldr	r2, [pc, #28]	@ (8000e64 <HAL_Init+0x20>)
{
 8000e46:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e48:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e4a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e4c:	f043 0310 	orr.w	r3, r3, #16
 8000e50:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e52:	f000 f81b 	bl	8000e8c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e56:	2000      	movs	r0, #0
 8000e58:	f7ff ffd0 	bl	8000dfc <HAL_InitTick>
  HAL_MspInit();
 8000e5c:	f7ff fcba 	bl	80007d4 <HAL_MspInit>
}
 8000e60:	2000      	movs	r0, #0
 8000e62:	bd08      	pop	{r3, pc}
 8000e64:	40022000 	.word	0x40022000

08000e68 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000e68:	4a03      	ldr	r2, [pc, #12]	@ (8000e78 <HAL_IncTick+0x10>)
 8000e6a:	4b04      	ldr	r3, [pc, #16]	@ (8000e7c <HAL_IncTick+0x14>)
 8000e6c:	6811      	ldr	r1, [r2, #0]
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	440b      	add	r3, r1
 8000e72:	6013      	str	r3, [r2, #0]
}
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	20000184 	.word	0x20000184
 8000e7c:	20000004 	.word	0x20000004

08000e80 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000e80:	4b01      	ldr	r3, [pc, #4]	@ (8000e88 <HAL_GetTick+0x8>)
 8000e82:	6818      	ldr	r0, [r3, #0]
}
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	20000184 	.word	0x20000184

08000e8c <HAL_NVIC_SetPriorityGrouping>:
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e8c:	f64f 0cff 	movw	ip, #63743	@ 0xf8ff
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e90:	4906      	ldr	r1, [pc, #24]	@ (8000eac <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e92:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e94:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e96:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e9a:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ea0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ea4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8000ea8:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000eaa:	4770      	bx	lr
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eb0:	4b1b      	ldr	r3, [pc, #108]	@ (8000f20 <HAL_NVIC_SetPriority+0x70>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eb2:	b500      	push	{lr}
 8000eb4:	68db      	ldr	r3, [r3, #12]
 8000eb6:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eba:	f1c3 0e07 	rsb	lr, r3, #7
 8000ebe:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ec2:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ec6:	bf28      	it	cs
 8000ec8:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ecc:	f1bc 0f06 	cmp.w	ip, #6
 8000ed0:	d91c      	bls.n	8000f0c <HAL_NVIC_SetPriority+0x5c>
 8000ed2:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eda:	fa03 f30c 	lsl.w	r3, r3, ip
 8000ede:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee6:	fa03 f30e 	lsl.w	r3, r3, lr
 8000eea:	ea21 0303 	bic.w	r3, r1, r3
 8000eee:	fa03 f30c 	lsl.w	r3, r3, ip
 8000ef2:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef4:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 8000ef6:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef8:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8000efa:	db0a      	blt.n	8000f12 <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000efc:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8000f00:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8000f04:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000f08:	f85d fb04 	ldr.w	pc, [sp], #4
 8000f0c:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f0e:	4694      	mov	ip, r2
 8000f10:	e7e7      	b.n	8000ee2 <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f12:	4a04      	ldr	r2, [pc, #16]	@ (8000f24 <HAL_NVIC_SetPriority+0x74>)
 8000f14:	f000 000f 	and.w	r0, r0, #15
 8000f18:	4402      	add	r2, r0
 8000f1a:	7613      	strb	r3, [r2, #24]
 8000f1c:	f85d fb04 	ldr.w	pc, [sp], #4
 8000f20:	e000ed00 	.word	0xe000ed00
 8000f24:	e000ecfc 	.word	0xe000ecfc

08000f28 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000f28:	2800      	cmp	r0, #0
 8000f2a:	db07      	blt.n	8000f3c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	f000 011f 	and.w	r1, r0, #31
 8000f32:	4a03      	ldr	r2, [pc, #12]	@ (8000f40 <HAL_NVIC_EnableIRQ+0x18>)
 8000f34:	0940      	lsrs	r0, r0, #5
 8000f36:	408b      	lsls	r3, r1
 8000f38:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	e000e100 	.word	0xe000e100

08000f44 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f44:	3801      	subs	r0, #1
 8000f46:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000f4a:	d301      	bcc.n	8000f50 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f4c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000f4e:	4770      	bx	lr
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f50:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f54:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f58:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f5a:	2107      	movs	r1, #7
{
 8000f5c:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f5e:	4c04      	ldr	r4, [pc, #16]	@ (8000f70 <HAL_SYSTICK_Config+0x2c>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f60:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f62:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f66:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f68:	619a      	str	r2, [r3, #24]
}
 8000f6a:	bc10      	pop	{r4}
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f6c:	6119      	str	r1, [r3, #16]
 8000f6e:	4770      	bx	lr
 8000f70:	e000ed00 	.word	0xe000ed00

08000f74 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f78:	680d      	ldr	r5, [r1, #0]
{
 8000f7a:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f7c:	2d00      	cmp	r5, #0
 8000f7e:	f000 80c3 	beq.w	8001108 <HAL_GPIO_Init+0x194>
 8000f82:	2200      	movs	r2, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f84:	4e80      	ldr	r6, [pc, #512]	@ (8001188 <HAL_GPIO_Init+0x214>)
  uint32_t config = 0x00u;
 8000f86:	4692      	mov	sl, r2
  uint32_t position = 0x00u;
 8000f88:	4613      	mov	r3, r2
      switch (GPIO_Init->Mode)
 8000f8a:	f8df 8200 	ldr.w	r8, [pc, #512]	@ 800118c <HAL_GPIO_Init+0x218>
 8000f8e:	4f80      	ldr	r7, [pc, #512]	@ (8001190 <HAL_GPIO_Init+0x21c>)
 8000f90:	e006      	b.n	8000fa0 <HAL_GPIO_Init+0x2c>
          CLEAR_BIT(EXTI->IMR, iocurrent);
        }
      }
    }

	position++;
 8000f92:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f94:	fa35 f403 	lsrs.w	r4, r5, r3
 8000f98:	f102 0204 	add.w	r2, r2, #4
 8000f9c:	f000 80b4 	beq.w	8001108 <HAL_GPIO_Init+0x194>
    ioposition = (0x01uL << position);
 8000fa0:	2401      	movs	r4, #1
 8000fa2:	409c      	lsls	r4, r3
    if (iocurrent == ioposition)
 8000fa4:	ea34 0e05 	bics.w	lr, r4, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fa8:	ea04 0c05 	and.w	ip, r4, r5
    if (iocurrent == ioposition)
 8000fac:	d1f1      	bne.n	8000f92 <HAL_GPIO_Init+0x1e>
      switch (GPIO_Init->Mode)
 8000fae:	684d      	ldr	r5, [r1, #4]
 8000fb0:	2d12      	cmp	r5, #18
 8000fb2:	f200 80ac 	bhi.w	800110e <HAL_GPIO_Init+0x19a>
 8000fb6:	2d12      	cmp	r5, #18
 8000fb8:	d81a      	bhi.n	8000ff0 <HAL_GPIO_Init+0x7c>
 8000fba:	e8df f005 	tbb	[pc, r5]
 8000fbe:	c5b3      	.short	0xc5b3
 8000fc0:	1919ccc1 	.word	0x1919ccc1
 8000fc4:	19191919 	.word	0x19191919
 8000fc8:	19191919 	.word	0x19191919
 8000fcc:	bd191919 	.word	0xbd191919
 8000fd0:	c8          	.byte	0xc8
 8000fd1:	00          	.byte	0x00
 8000fd2:	f8df e1c0 	ldr.w	lr, [pc, #448]	@ 8001194 <HAL_GPIO_Init+0x220>
 8000fd6:	4575      	cmp	r5, lr
 8000fd8:	f000 80a4 	beq.w	8001124 <HAL_GPIO_Init+0x1b0>
 8000fdc:	f50e 2e70 	add.w	lr, lr, #983040	@ 0xf0000
 8000fe0:	4575      	cmp	r5, lr
 8000fe2:	f000 809f 	beq.w	8001124 <HAL_GPIO_Init+0x1b0>
 8000fe6:	f5ae 1e80 	sub.w	lr, lr, #1048576	@ 0x100000
 8000fea:	4575      	cmp	r5, lr
 8000fec:	f000 809a 	beq.w	8001124 <HAL_GPIO_Init+0x1b0>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ff0:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8000ff4:	bf9c      	itt	ls
 8000ff6:	4686      	movls	lr, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ff8:	4693      	movls	fp, r2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ffa:	f04f 050f 	mov.w	r5, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000ffe:	bf84      	itt	hi
 8001000:	f100 0e04 	addhi.w	lr, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001004:	f1a2 0b20 	subhi.w	fp, r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001008:	f8de 4000 	ldr.w	r4, [lr]
 800100c:	fa0a f90b 	lsl.w	r9, sl, fp
 8001010:	fa05 fb0b 	lsl.w	fp, r5, fp
 8001014:	ea24 040b 	bic.w	r4, r4, fp
 8001018:	ea44 0409 	orr.w	r4, r4, r9
 800101c:	f8ce 4000 	str.w	r4, [lr]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001020:	684c      	ldr	r4, [r1, #4]
 8001022:	f014 5f80 	tst.w	r4, #268435456	@ 0x10000000
 8001026:	f000 8085 	beq.w	8001134 <HAL_GPIO_Init+0x1c0>
        __HAL_RCC_AFIO_CLK_ENABLE();
 800102a:	f8d6 e018 	ldr.w	lr, [r6, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800102e:	f003 0903 	and.w	r9, r3, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001032:	f04e 0e01 	orr.w	lr, lr, #1
 8001036:	f8c6 e018 	str.w	lr, [r6, #24]
 800103a:	f8d6 e018 	ldr.w	lr, [r6, #24]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800103e:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001042:	f00e 0e01 	and.w	lr, lr, #1
 8001046:	f8cd e004 	str.w	lr, [sp, #4]
 800104a:	f8dd e004 	ldr.w	lr, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 800104e:	f023 0e03 	bic.w	lr, r3, #3
 8001052:	f10e 4e80 	add.w	lr, lr, #1073741824	@ 0x40000000
 8001056:	f50e 3e80 	add.w	lr, lr, #65536	@ 0x10000
 800105a:	f8de b008 	ldr.w	fp, [lr, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800105e:	fa05 f509 	lsl.w	r5, r5, r9
 8001062:	ea2b 0505 	bic.w	r5, fp, r5
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001066:	f8df b130 	ldr.w	fp, [pc, #304]	@ 8001198 <HAL_GPIO_Init+0x224>
 800106a:	4558      	cmp	r0, fp
 800106c:	d013      	beq.n	8001096 <HAL_GPIO_Init+0x122>
 800106e:	f50b 6b80 	add.w	fp, fp, #1024	@ 0x400
 8001072:	4558      	cmp	r0, fp
 8001074:	d079      	beq.n	800116a <HAL_GPIO_Init+0x1f6>
 8001076:	f8df b124 	ldr.w	fp, [pc, #292]	@ 800119c <HAL_GPIO_Init+0x228>
 800107a:	4558      	cmp	r0, fp
 800107c:	d06e      	beq.n	800115c <HAL_GPIO_Init+0x1e8>
 800107e:	f8df b120 	ldr.w	fp, [pc, #288]	@ 80011a0 <HAL_GPIO_Init+0x22c>
 8001082:	4558      	cmp	r0, fp
 8001084:	bf0c      	ite	eq
 8001086:	f04f 0b03 	moveq.w	fp, #3
 800108a:	f04f 0b04 	movne.w	fp, #4
 800108e:	fa0b f909 	lsl.w	r9, fp, r9
 8001092:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8001096:	f8ce 5008 	str.w	r5, [lr, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 800109a:	f8df e108 	ldr.w	lr, [pc, #264]	@ 80011a4 <HAL_GPIO_Init+0x230>
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800109e:	f414 1f80 	tst.w	r4, #1048576	@ 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80010a2:	f8de 5008 	ldr.w	r5, [lr, #8]
 80010a6:	bf14      	ite	ne
 80010a8:	ea45 050c 	orrne.w	r5, r5, ip
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80010ac:	ea25 050c 	biceq.w	r5, r5, ip
 80010b0:	f8ce 5008 	str.w	r5, [lr, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 80010b4:	f8df e0ec 	ldr.w	lr, [pc, #236]	@ 80011a4 <HAL_GPIO_Init+0x230>
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010b8:	f414 1f00 	tst.w	r4, #2097152	@ 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80010bc:	f8de 500c 	ldr.w	r5, [lr, #12]
 80010c0:	bf14      	ite	ne
 80010c2:	ea45 050c 	orrne.w	r5, r5, ip
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80010c6:	ea25 050c 	biceq.w	r5, r5, ip
 80010ca:	f8ce 500c 	str.w	r5, [lr, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 80010ce:	f8df e0d4 	ldr.w	lr, [pc, #212]	@ 80011a4 <HAL_GPIO_Init+0x230>
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010d2:	f414 3f00 	tst.w	r4, #131072	@ 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80010d6:	f8de 5004 	ldr.w	r5, [lr, #4]
 80010da:	bf14      	ite	ne
 80010dc:	ea45 050c 	orrne.w	r5, r5, ip
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80010e0:	ea25 050c 	biceq.w	r5, r5, ip
 80010e4:	f8ce 5004 	str.w	r5, [lr, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 80010e8:	4d2e      	ldr	r5, [pc, #184]	@ (80011a4 <HAL_GPIO_Init+0x230>)
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010ea:	f414 3f80 	tst.w	r4, #65536	@ 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80010ee:	682c      	ldr	r4, [r5, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010f0:	d01d      	beq.n	800112e <HAL_GPIO_Init+0x1ba>
          SET_BIT(EXTI->IMR, iocurrent);
 80010f2:	ea44 040c 	orr.w	r4, r4, ip
 80010f6:	602c      	str	r4, [r5, #0]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010f8:	680d      	ldr	r5, [r1, #0]
	position++;
 80010fa:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010fc:	fa35 f403 	lsrs.w	r4, r5, r3
 8001100:	f102 0204 	add.w	r2, r2, #4
 8001104:	f47f af4c 	bne.w	8000fa0 <HAL_GPIO_Init+0x2c>
  }
}
 8001108:	b003      	add	sp, #12
 800110a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 800110e:	4545      	cmp	r5, r8
 8001110:	d008      	beq.n	8001124 <HAL_GPIO_Init+0x1b0>
 8001112:	f67f af5e 	bls.w	8000fd2 <HAL_GPIO_Init+0x5e>
 8001116:	42bd      	cmp	r5, r7
 8001118:	d004      	beq.n	8001124 <HAL_GPIO_Init+0x1b0>
 800111a:	f8df e08c 	ldr.w	lr, [pc, #140]	@ 80011a8 <HAL_GPIO_Init+0x234>
 800111e:	4575      	cmp	r5, lr
 8001120:	f47f af66 	bne.w	8000ff0 <HAL_GPIO_Init+0x7c>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001124:	688d      	ldr	r5, [r1, #8]
 8001126:	bb3d      	cbnz	r5, 8001178 <HAL_GPIO_Init+0x204>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001128:	f04f 0a04 	mov.w	sl, #4
 800112c:	e760      	b.n	8000ff0 <HAL_GPIO_Init+0x7c>
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800112e:	ea24 040c 	bic.w	r4, r4, ip
 8001132:	602c      	str	r4, [r5, #0]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001134:	680d      	ldr	r5, [r1, #0]
 8001136:	e72c      	b.n	8000f92 <HAL_GPIO_Init+0x1e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001138:	68cc      	ldr	r4, [r1, #12]
 800113a:	f104 0a04 	add.w	sl, r4, #4
          break;
 800113e:	e757      	b.n	8000ff0 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001140:	68cc      	ldr	r4, [r1, #12]
 8001142:	f104 0a08 	add.w	sl, r4, #8
          break;
 8001146:	e753      	b.n	8000ff0 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001148:	f8d1 a00c 	ldr.w	sl, [r1, #12]
          break;
 800114c:	e750      	b.n	8000ff0 <HAL_GPIO_Init+0x7c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800114e:	68cc      	ldr	r4, [r1, #12]
 8001150:	f104 0a0c 	add.w	sl, r4, #12
          break;
 8001154:	e74c      	b.n	8000ff0 <HAL_GPIO_Init+0x7c>
      switch (GPIO_Init->Mode)
 8001156:	f04f 0a00 	mov.w	sl, #0
 800115a:	e749      	b.n	8000ff0 <HAL_GPIO_Init+0x7c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800115c:	f04f 0b02 	mov.w	fp, #2
 8001160:	fa0b f909 	lsl.w	r9, fp, r9
 8001164:	ea45 0509 	orr.w	r5, r5, r9
 8001168:	e795      	b.n	8001096 <HAL_GPIO_Init+0x122>
 800116a:	f04f 0b01 	mov.w	fp, #1
 800116e:	fa0b f909 	lsl.w	r9, fp, r9
 8001172:	ea45 0509 	orr.w	r5, r5, r9
 8001176:	e78e      	b.n	8001096 <HAL_GPIO_Init+0x122>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001178:	2d01      	cmp	r5, #1
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800117a:	f04f 0a08 	mov.w	sl, #8
            GPIOx->BSRR = ioposition;
 800117e:	bf0c      	ite	eq
 8001180:	6104      	streq	r4, [r0, #16]
            GPIOx->BRR = ioposition;
 8001182:	6144      	strne	r4, [r0, #20]
 8001184:	e734      	b.n	8000ff0 <HAL_GPIO_Init+0x7c>
 8001186:	bf00      	nop
 8001188:	40021000 	.word	0x40021000
 800118c:	10220000 	.word	0x10220000
 8001190:	10310000 	.word	0x10310000
 8001194:	10120000 	.word	0x10120000
 8001198:	40010800 	.word	0x40010800
 800119c:	40011000 	.word	0x40011000
 80011a0:	40011400 	.word	0x40011400
 80011a4:	40010400 	.word	0x40010400
 80011a8:	10320000 	.word	0x10320000

080011ac <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80011ac:	6883      	ldr	r3, [r0, #8]
 80011ae:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80011b0:	bf14      	ite	ne
 80011b2:	2001      	movne	r0, #1
 80011b4:	2000      	moveq	r0, #0
 80011b6:	4770      	bx	lr

080011b8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011b8:	b902      	cbnz	r2, 80011bc <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011ba:	0409      	lsls	r1, r1, #16
 80011bc:	6101      	str	r1, [r0, #16]
  }
}
 80011be:	4770      	bx	lr

080011c0 <HAL_GPIO_EXTI_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop

080011c4 <HAL_GPIO_EXTI_IRQHandler>:
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80011c4:	4a04      	ldr	r2, [pc, #16]	@ (80011d8 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80011c6:	6951      	ldr	r1, [r2, #20]
 80011c8:	4201      	tst	r1, r0
 80011ca:	d100      	bne.n	80011ce <HAL_GPIO_EXTI_IRQHandler+0xa>
 80011cc:	4770      	bx	lr
{
 80011ce:	b508      	push	{r3, lr}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80011d0:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80011d2:	f7ff fff5 	bl	80011c0 <HAL_GPIO_EXTI_Callback>
}
 80011d6:	bd08      	pop	{r3, pc}
 80011d8:	40010400 	.word	0x40010400

080011dc <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011dc:	2800      	cmp	r0, #0
 80011de:	f000 81e4 	beq.w	80015aa <HAL_RCC_OscConfig+0x3ce>
{
 80011e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011e6:	6803      	ldr	r3, [r0, #0]
 80011e8:	4604      	mov	r4, r0
 80011ea:	07dd      	lsls	r5, r3, #31
{
 80011ec:	b082      	sub	sp, #8
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011ee:	d535      	bpl.n	800125c <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80011f0:	4999      	ldr	r1, [pc, #612]	@ (8001458 <HAL_RCC_OscConfig+0x27c>)
 80011f2:	684a      	ldr	r2, [r1, #4]
 80011f4:	f002 020c 	and.w	r2, r2, #12
 80011f8:	2a04      	cmp	r2, #4
 80011fa:	f000 80ed 	beq.w	80013d8 <HAL_RCC_OscConfig+0x1fc>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011fe:	684a      	ldr	r2, [r1, #4]
 8001200:	f002 020c 	and.w	r2, r2, #12
 8001204:	2a08      	cmp	r2, #8
 8001206:	f000 80e3 	beq.w	80013d0 <HAL_RCC_OscConfig+0x1f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800120a:	6863      	ldr	r3, [r4, #4]
 800120c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001210:	d010      	beq.n	8001234 <HAL_RCC_OscConfig+0x58>
 8001212:	2b00      	cmp	r3, #0
 8001214:	f000 810a 	beq.w	800142c <HAL_RCC_OscConfig+0x250>
 8001218:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800121c:	f000 8180 	beq.w	8001520 <HAL_RCC_OscConfig+0x344>
 8001220:	4b8d      	ldr	r3, [pc, #564]	@ (8001458 <HAL_RCC_OscConfig+0x27c>)
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001230:	601a      	str	r2, [r3, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001232:	e004      	b.n	800123e <HAL_RCC_OscConfig+0x62>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001234:	4a88      	ldr	r2, [pc, #544]	@ (8001458 <HAL_RCC_OscConfig+0x27c>)
 8001236:	6813      	ldr	r3, [r2, #0]
 8001238:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800123c:	6013      	str	r3, [r2, #0]
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800123e:	f7ff fe1f 	bl	8000e80 <HAL_GetTick>

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001242:	4e85      	ldr	r6, [pc, #532]	@ (8001458 <HAL_RCC_OscConfig+0x27c>)
        tickstart = HAL_GetTick();
 8001244:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001246:	e005      	b.n	8001254 <HAL_RCC_OscConfig+0x78>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001248:	f7ff fe1a 	bl	8000e80 <HAL_GetTick>
 800124c:	1b40      	subs	r0, r0, r5
 800124e:	2864      	cmp	r0, #100	@ 0x64
 8001250:	f200 80e8 	bhi.w	8001424 <HAL_RCC_OscConfig+0x248>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001254:	6833      	ldr	r3, [r6, #0]
 8001256:	039a      	lsls	r2, r3, #14
 8001258:	d5f6      	bpl.n	8001248 <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800125a:	6823      	ldr	r3, [r4, #0]
 800125c:	079f      	lsls	r7, r3, #30
 800125e:	d528      	bpl.n	80012b2 <HAL_RCC_OscConfig+0xd6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001260:	4a7d      	ldr	r2, [pc, #500]	@ (8001458 <HAL_RCC_OscConfig+0x27c>)
 8001262:	6851      	ldr	r1, [r2, #4]
 8001264:	f011 0f0c 	tst.w	r1, #12
 8001268:	f000 8096 	beq.w	8001398 <HAL_RCC_OscConfig+0x1bc>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800126c:	6851      	ldr	r1, [r2, #4]
 800126e:	f001 010c 	and.w	r1, r1, #12
 8001272:	2908      	cmp	r1, #8
 8001274:	f000 808c 	beq.w	8001390 <HAL_RCC_OscConfig+0x1b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001278:	6923      	ldr	r3, [r4, #16]
 800127a:	2b00      	cmp	r3, #0
 800127c:	f000 8116 	beq.w	80014ac <HAL_RCC_OscConfig+0x2d0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001280:	2201      	movs	r2, #1
 8001282:	4b76      	ldr	r3, [pc, #472]	@ (800145c <HAL_RCC_OscConfig+0x280>)

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001284:	4e74      	ldr	r6, [pc, #464]	@ (8001458 <HAL_RCC_OscConfig+0x27c>)
        __HAL_RCC_HSI_ENABLE();
 8001286:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001288:	f7ff fdfa 	bl	8000e80 <HAL_GetTick>
 800128c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800128e:	e005      	b.n	800129c <HAL_RCC_OscConfig+0xc0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001290:	f7ff fdf6 	bl	8000e80 <HAL_GetTick>
 8001294:	1b40      	subs	r0, r0, r5
 8001296:	2802      	cmp	r0, #2
 8001298:	f200 80c4 	bhi.w	8001424 <HAL_RCC_OscConfig+0x248>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800129c:	6833      	ldr	r3, [r6, #0]
 800129e:	0798      	lsls	r0, r3, #30
 80012a0:	d5f6      	bpl.n	8001290 <HAL_RCC_OscConfig+0xb4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012a2:	6833      	ldr	r3, [r6, #0]
 80012a4:	6962      	ldr	r2, [r4, #20]
 80012a6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80012aa:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80012ae:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012b0:	6823      	ldr	r3, [r4, #0]
 80012b2:	071a      	lsls	r2, r3, #28
 80012b4:	d429      	bmi.n	800130a <HAL_RCC_OscConfig+0x12e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012b6:	075d      	lsls	r5, r3, #29
 80012b8:	d54b      	bpl.n	8001352 <HAL_RCC_OscConfig+0x176>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012ba:	4b67      	ldr	r3, [pc, #412]	@ (8001458 <HAL_RCC_OscConfig+0x27c>)
 80012bc:	69da      	ldr	r2, [r3, #28]
 80012be:	00d0      	lsls	r0, r2, #3
 80012c0:	f100 8084 	bmi.w	80013cc <HAL_RCC_OscConfig+0x1f0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 80012c4:	2501      	movs	r5, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80012c6:	69da      	ldr	r2, [r3, #28]
 80012c8:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80012cc:	61da      	str	r2, [r3, #28]
 80012ce:	69db      	ldr	r3, [r3, #28]
 80012d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012d4:	9300      	str	r3, [sp, #0]
 80012d6:	9b00      	ldr	r3, [sp, #0]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012d8:	4e61      	ldr	r6, [pc, #388]	@ (8001460 <HAL_RCC_OscConfig+0x284>)
 80012da:	6833      	ldr	r3, [r6, #0]
 80012dc:	05d9      	lsls	r1, r3, #23
 80012de:	f140 8091 	bpl.w	8001404 <HAL_RCC_OscConfig+0x228>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012e2:	68e3      	ldr	r3, [r4, #12]
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	f000 80f2 	beq.w	80014ce <HAL_RCC_OscConfig+0x2f2>
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	f000 80be 	beq.w	800146c <HAL_RCC_OscConfig+0x290>
 80012f0:	2b05      	cmp	r3, #5
 80012f2:	4b59      	ldr	r3, [pc, #356]	@ (8001458 <HAL_RCC_OscConfig+0x27c>)
 80012f4:	6a1a      	ldr	r2, [r3, #32]
 80012f6:	f000 8120 	beq.w	800153a <HAL_RCC_OscConfig+0x35e>
 80012fa:	f022 0201 	bic.w	r2, r2, #1
 80012fe:	621a      	str	r2, [r3, #32]
 8001300:	6a1a      	ldr	r2, [r3, #32]
 8001302:	f022 0204 	bic.w	r2, r2, #4
 8001306:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001308:	e0e6      	b.n	80014d8 <HAL_RCC_OscConfig+0x2fc>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800130a:	69a3      	ldr	r3, [r4, #24]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d04c      	beq.n	80013aa <HAL_RCC_OscConfig+0x1ce>
      __HAL_RCC_LSI_ENABLE();
 8001310:	2201      	movs	r2, #1
 8001312:	4b52      	ldr	r3, [pc, #328]	@ (800145c <HAL_RCC_OscConfig+0x280>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001314:	4e50      	ldr	r6, [pc, #320]	@ (8001458 <HAL_RCC_OscConfig+0x27c>)
      __HAL_RCC_LSI_ENABLE();
 8001316:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 800131a:	f7ff fdb1 	bl	8000e80 <HAL_GetTick>
 800131e:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001320:	e004      	b.n	800132c <HAL_RCC_OscConfig+0x150>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001322:	f7ff fdad 	bl	8000e80 <HAL_GetTick>
 8001326:	1b40      	subs	r0, r0, r5
 8001328:	2802      	cmp	r0, #2
 800132a:	d87b      	bhi.n	8001424 <HAL_RCC_OscConfig+0x248>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800132c:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 800132e:	079b      	lsls	r3, r3, #30
 8001330:	d5f7      	bpl.n	8001322 <HAL_RCC_OscConfig+0x146>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001332:	4b4c      	ldr	r3, [pc, #304]	@ (8001464 <HAL_RCC_OscConfig+0x288>)
 8001334:	4a4c      	ldr	r2, [pc, #304]	@ (8001468 <HAL_RCC_OscConfig+0x28c>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	fba2 2303 	umull	r2, r3, r2, r3
 800133c:	0a5b      	lsrs	r3, r3, #9
 800133e:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8001340:	bf00      	nop
  }
  while (Delay --);
 8001342:	9b01      	ldr	r3, [sp, #4]
 8001344:	1e5a      	subs	r2, r3, #1
 8001346:	9201      	str	r2, [sp, #4]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d1f9      	bne.n	8001340 <HAL_RCC_OscConfig+0x164>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800134c:	6823      	ldr	r3, [r4, #0]
 800134e:	075d      	lsls	r5, r3, #29
 8001350:	d4b3      	bmi.n	80012ba <HAL_RCC_OscConfig+0xde>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001352:	69e3      	ldr	r3, [r4, #28]
 8001354:	b1c3      	cbz	r3, 8001388 <HAL_RCC_OscConfig+0x1ac>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001356:	4d40      	ldr	r5, [pc, #256]	@ (8001458 <HAL_RCC_OscConfig+0x27c>)
 8001358:	686a      	ldr	r2, [r5, #4]
 800135a:	f002 020c 	and.w	r2, r2, #12
 800135e:	2a08      	cmp	r2, #8
 8001360:	f000 80cd 	beq.w	80014fe <HAL_RCC_OscConfig+0x322>
        __HAL_RCC_PLL_DISABLE();
 8001364:	2200      	movs	r2, #0
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001366:	2b02      	cmp	r3, #2
        __HAL_RCC_PLL_DISABLE();
 8001368:	4b3c      	ldr	r3, [pc, #240]	@ (800145c <HAL_RCC_OscConfig+0x280>)
 800136a:	661a      	str	r2, [r3, #96]	@ 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800136c:	f000 80ed 	beq.w	800154a <HAL_RCC_OscConfig+0x36e>
        tickstart = HAL_GetTick();
 8001370:	f7ff fd86 	bl	8000e80 <HAL_GetTick>
 8001374:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001376:	e004      	b.n	8001382 <HAL_RCC_OscConfig+0x1a6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001378:	f7ff fd82 	bl	8000e80 <HAL_GetTick>
 800137c:	1b00      	subs	r0, r0, r4
 800137e:	2802      	cmp	r0, #2
 8001380:	d850      	bhi.n	8001424 <HAL_RCC_OscConfig+0x248>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001382:	682b      	ldr	r3, [r5, #0]
 8001384:	019b      	lsls	r3, r3, #6
 8001386:	d4f7      	bmi.n	8001378 <HAL_RCC_OscConfig+0x19c>
  return HAL_OK;
 8001388:	2000      	movs	r0, #0
}
 800138a:	b002      	add	sp, #8
 800138c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001390:	6852      	ldr	r2, [r2, #4]
 8001392:	03d6      	lsls	r6, r2, #15
 8001394:	f53f af70 	bmi.w	8001278 <HAL_RCC_OscConfig+0x9c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001398:	4a2f      	ldr	r2, [pc, #188]	@ (8001458 <HAL_RCC_OscConfig+0x27c>)
 800139a:	6812      	ldr	r2, [r2, #0]
 800139c:	0795      	lsls	r5, r2, #30
 800139e:	d525      	bpl.n	80013ec <HAL_RCC_OscConfig+0x210>
 80013a0:	6922      	ldr	r2, [r4, #16]
 80013a2:	2a01      	cmp	r2, #1
 80013a4:	d022      	beq.n	80013ec <HAL_RCC_OscConfig+0x210>
    return HAL_ERROR;
 80013a6:	2001      	movs	r0, #1
 80013a8:	e7ef      	b.n	800138a <HAL_RCC_OscConfig+0x1ae>
      __HAL_RCC_LSI_DISABLE();
 80013aa:	4a2c      	ldr	r2, [pc, #176]	@ (800145c <HAL_RCC_OscConfig+0x280>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013ac:	4e2a      	ldr	r6, [pc, #168]	@ (8001458 <HAL_RCC_OscConfig+0x27c>)
      __HAL_RCC_LSI_DISABLE();
 80013ae:	f8c2 3480 	str.w	r3, [r2, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 80013b2:	f7ff fd65 	bl	8000e80 <HAL_GetTick>
 80013b6:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013b8:	e004      	b.n	80013c4 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013ba:	f7ff fd61 	bl	8000e80 <HAL_GetTick>
 80013be:	1b40      	subs	r0, r0, r5
 80013c0:	2802      	cmp	r0, #2
 80013c2:	d82f      	bhi.n	8001424 <HAL_RCC_OscConfig+0x248>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013c4:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 80013c6:	079f      	lsls	r7, r3, #30
 80013c8:	d4f7      	bmi.n	80013ba <HAL_RCC_OscConfig+0x1de>
 80013ca:	e7bf      	b.n	800134c <HAL_RCC_OscConfig+0x170>
    FlagStatus       pwrclkchanged = RESET;
 80013cc:	2500      	movs	r5, #0
 80013ce:	e783      	b.n	80012d8 <HAL_RCC_OscConfig+0xfc>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013d0:	684a      	ldr	r2, [r1, #4]
 80013d2:	03d0      	lsls	r0, r2, #15
 80013d4:	f57f af19 	bpl.w	800120a <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013d8:	4a1f      	ldr	r2, [pc, #124]	@ (8001458 <HAL_RCC_OscConfig+0x27c>)
 80013da:	6812      	ldr	r2, [r2, #0]
 80013dc:	0391      	lsls	r1, r2, #14
 80013de:	f57f af3d 	bpl.w	800125c <HAL_RCC_OscConfig+0x80>
 80013e2:	6862      	ldr	r2, [r4, #4]
 80013e4:	2a00      	cmp	r2, #0
 80013e6:	f47f af39 	bne.w	800125c <HAL_RCC_OscConfig+0x80>
 80013ea:	e7dc      	b.n	80013a6 <HAL_RCC_OscConfig+0x1ca>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ec:	491a      	ldr	r1, [pc, #104]	@ (8001458 <HAL_RCC_OscConfig+0x27c>)
 80013ee:	6960      	ldr	r0, [r4, #20]
 80013f0:	680a      	ldr	r2, [r1, #0]
 80013f2:	f022 02f8 	bic.w	r2, r2, #248	@ 0xf8
 80013f6:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 80013fa:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013fc:	071a      	lsls	r2, r3, #28
 80013fe:	f57f af5a 	bpl.w	80012b6 <HAL_RCC_OscConfig+0xda>
 8001402:	e782      	b.n	800130a <HAL_RCC_OscConfig+0x12e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001404:	6833      	ldr	r3, [r6, #0]
 8001406:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800140a:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800140c:	f7ff fd38 	bl	8000e80 <HAL_GetTick>
 8001410:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001412:	6833      	ldr	r3, [r6, #0]
 8001414:	05da      	lsls	r2, r3, #23
 8001416:	f53f af64 	bmi.w	80012e2 <HAL_RCC_OscConfig+0x106>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800141a:	f7ff fd31 	bl	8000e80 <HAL_GetTick>
 800141e:	1bc0      	subs	r0, r0, r7
 8001420:	2864      	cmp	r0, #100	@ 0x64
 8001422:	d9f6      	bls.n	8001412 <HAL_RCC_OscConfig+0x236>
            return HAL_TIMEOUT;
 8001424:	2003      	movs	r0, #3
}
 8001426:	b002      	add	sp, #8
 8001428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800142c:	4d0a      	ldr	r5, [pc, #40]	@ (8001458 <HAL_RCC_OscConfig+0x27c>)
 800142e:	682b      	ldr	r3, [r5, #0]
 8001430:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001434:	602b      	str	r3, [r5, #0]
 8001436:	682b      	ldr	r3, [r5, #0]
 8001438:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800143c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800143e:	f7ff fd1f 	bl	8000e80 <HAL_GetTick>
 8001442:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001444:	e004      	b.n	8001450 <HAL_RCC_OscConfig+0x274>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001446:	f7ff fd1b 	bl	8000e80 <HAL_GetTick>
 800144a:	1b80      	subs	r0, r0, r6
 800144c:	2864      	cmp	r0, #100	@ 0x64
 800144e:	d8e9      	bhi.n	8001424 <HAL_RCC_OscConfig+0x248>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001450:	682b      	ldr	r3, [r5, #0]
 8001452:	039b      	lsls	r3, r3, #14
 8001454:	d4f7      	bmi.n	8001446 <HAL_RCC_OscConfig+0x26a>
 8001456:	e700      	b.n	800125a <HAL_RCC_OscConfig+0x7e>
 8001458:	40021000 	.word	0x40021000
 800145c:	42420000 	.word	0x42420000
 8001460:	40007000 	.word	0x40007000
 8001464:	20000000 	.word	0x20000000
 8001468:	10624dd3 	.word	0x10624dd3
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800146c:	4e50      	ldr	r6, [pc, #320]	@ (80015b0 <HAL_RCC_OscConfig+0x3d4>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800146e:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001472:	6a33      	ldr	r3, [r6, #32]
 8001474:	f023 0301 	bic.w	r3, r3, #1
 8001478:	6233      	str	r3, [r6, #32]
 800147a:	6a33      	ldr	r3, [r6, #32]
 800147c:	f023 0304 	bic.w	r3, r3, #4
 8001480:	6233      	str	r3, [r6, #32]
      tickstart = HAL_GetTick();
 8001482:	f7ff fcfd 	bl	8000e80 <HAL_GetTick>
 8001486:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001488:	e004      	b.n	8001494 <HAL_RCC_OscConfig+0x2b8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800148a:	f7ff fcf9 	bl	8000e80 <HAL_GetTick>
 800148e:	1bc0      	subs	r0, r0, r7
 8001490:	4540      	cmp	r0, r8
 8001492:	d8c7      	bhi.n	8001424 <HAL_RCC_OscConfig+0x248>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001494:	6a33      	ldr	r3, [r6, #32]
 8001496:	0798      	lsls	r0, r3, #30
 8001498:	d4f7      	bmi.n	800148a <HAL_RCC_OscConfig+0x2ae>
    if (pwrclkchanged == SET)
 800149a:	2d00      	cmp	r5, #0
 800149c:	f43f af59 	beq.w	8001352 <HAL_RCC_OscConfig+0x176>
      __HAL_RCC_PWR_CLK_DISABLE();
 80014a0:	4a43      	ldr	r2, [pc, #268]	@ (80015b0 <HAL_RCC_OscConfig+0x3d4>)
 80014a2:	69d3      	ldr	r3, [r2, #28]
 80014a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80014a8:	61d3      	str	r3, [r2, #28]
 80014aa:	e752      	b.n	8001352 <HAL_RCC_OscConfig+0x176>
        __HAL_RCC_HSI_DISABLE();
 80014ac:	4a41      	ldr	r2, [pc, #260]	@ (80015b4 <HAL_RCC_OscConfig+0x3d8>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ae:	4e40      	ldr	r6, [pc, #256]	@ (80015b0 <HAL_RCC_OscConfig+0x3d4>)
        __HAL_RCC_HSI_DISABLE();
 80014b0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80014b2:	f7ff fce5 	bl	8000e80 <HAL_GetTick>
 80014b6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014b8:	e004      	b.n	80014c4 <HAL_RCC_OscConfig+0x2e8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014ba:	f7ff fce1 	bl	8000e80 <HAL_GetTick>
 80014be:	1b40      	subs	r0, r0, r5
 80014c0:	2802      	cmp	r0, #2
 80014c2:	d8af      	bhi.n	8001424 <HAL_RCC_OscConfig+0x248>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014c4:	6833      	ldr	r3, [r6, #0]
 80014c6:	0799      	lsls	r1, r3, #30
 80014c8:	d4f7      	bmi.n	80014ba <HAL_RCC_OscConfig+0x2de>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014ca:	6823      	ldr	r3, [r4, #0]
 80014cc:	e6f1      	b.n	80012b2 <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014ce:	4a38      	ldr	r2, [pc, #224]	@ (80015b0 <HAL_RCC_OscConfig+0x3d4>)
 80014d0:	6a13      	ldr	r3, [r2, #32]
 80014d2:	f043 0301 	orr.w	r3, r3, #1
 80014d6:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 80014d8:	f7ff fcd2 	bl	8000e80 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014dc:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 80014e0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014e2:	4f33      	ldr	r7, [pc, #204]	@ (80015b0 <HAL_RCC_OscConfig+0x3d4>)
 80014e4:	e004      	b.n	80014f0 <HAL_RCC_OscConfig+0x314>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014e6:	f7ff fccb 	bl	8000e80 <HAL_GetTick>
 80014ea:	1b80      	subs	r0, r0, r6
 80014ec:	4540      	cmp	r0, r8
 80014ee:	d899      	bhi.n	8001424 <HAL_RCC_OscConfig+0x248>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014f0:	6a3b      	ldr	r3, [r7, #32]
 80014f2:	079b      	lsls	r3, r3, #30
 80014f4:	d5f7      	bpl.n	80014e6 <HAL_RCC_OscConfig+0x30a>
    if (pwrclkchanged == SET)
 80014f6:	2d00      	cmp	r5, #0
 80014f8:	f43f af2b 	beq.w	8001352 <HAL_RCC_OscConfig+0x176>
 80014fc:	e7d0      	b.n	80014a0 <HAL_RCC_OscConfig+0x2c4>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014fe:	2b01      	cmp	r3, #1
 8001500:	f43f af51 	beq.w	80013a6 <HAL_RCC_OscConfig+0x1ca>
        pll_config = RCC->CFGR;
 8001504:	686b      	ldr	r3, [r5, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001506:	6a22      	ldr	r2, [r4, #32]
 8001508:	f403 3180 	and.w	r1, r3, #65536	@ 0x10000
 800150c:	4291      	cmp	r1, r2
 800150e:	f47f af4a 	bne.w	80013a6 <HAL_RCC_OscConfig+0x1ca>
 8001512:	6a60      	ldr	r0, [r4, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001514:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001518:	1a18      	subs	r0, r3, r0
 800151a:	bf18      	it	ne
 800151c:	2001      	movne	r0, #1
 800151e:	e734      	b.n	800138a <HAL_RCC_OscConfig+0x1ae>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001520:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001524:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800152e:	601a      	str	r2, [r3, #0]
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8001536:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001538:	e681      	b.n	800123e <HAL_RCC_OscConfig+0x62>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800153a:	f042 0204 	orr.w	r2, r2, #4
 800153e:	621a      	str	r2, [r3, #32]
 8001540:	6a1a      	ldr	r2, [r3, #32]
 8001542:	f042 0201 	orr.w	r2, r2, #1
 8001546:	621a      	str	r2, [r3, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001548:	e7c6      	b.n	80014d8 <HAL_RCC_OscConfig+0x2fc>
        tickstart = HAL_GetTick();
 800154a:	f7ff fc99 	bl	8000e80 <HAL_GetTick>
 800154e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001550:	e005      	b.n	800155e <HAL_RCC_OscConfig+0x382>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001552:	f7ff fc95 	bl	8000e80 <HAL_GetTick>
 8001556:	1b80      	subs	r0, r0, r6
 8001558:	2802      	cmp	r0, #2
 800155a:	f63f af63 	bhi.w	8001424 <HAL_RCC_OscConfig+0x248>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800155e:	682b      	ldr	r3, [r5, #0]
 8001560:	0199      	lsls	r1, r3, #6
 8001562:	d4f6      	bmi.n	8001552 <HAL_RCC_OscConfig+0x376>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001564:	6a23      	ldr	r3, [r4, #32]
 8001566:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800156a:	d105      	bne.n	8001578 <HAL_RCC_OscConfig+0x39c>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800156c:	686a      	ldr	r2, [r5, #4]
 800156e:	68a1      	ldr	r1, [r4, #8]
 8001570:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8001574:	430a      	orrs	r2, r1
 8001576:	606a      	str	r2, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001578:	2001      	movs	r0, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800157a:	4d0d      	ldr	r5, [pc, #52]	@ (80015b0 <HAL_RCC_OscConfig+0x3d4>)
 800157c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800157e:	686a      	ldr	r2, [r5, #4]
 8001580:	430b      	orrs	r3, r1
 8001582:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
        __HAL_RCC_PLL_ENABLE();
 8001586:	490b      	ldr	r1, [pc, #44]	@ (80015b4 <HAL_RCC_OscConfig+0x3d8>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001588:	4313      	orrs	r3, r2
 800158a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800158c:	6608      	str	r0, [r1, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800158e:	f7ff fc77 	bl	8000e80 <HAL_GetTick>
 8001592:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001594:	e005      	b.n	80015a2 <HAL_RCC_OscConfig+0x3c6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001596:	f7ff fc73 	bl	8000e80 <HAL_GetTick>
 800159a:	1b00      	subs	r0, r0, r4
 800159c:	2802      	cmp	r0, #2
 800159e:	f63f af41 	bhi.w	8001424 <HAL_RCC_OscConfig+0x248>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015a2:	682b      	ldr	r3, [r5, #0]
 80015a4:	019a      	lsls	r2, r3, #6
 80015a6:	d5f6      	bpl.n	8001596 <HAL_RCC_OscConfig+0x3ba>
 80015a8:	e6ee      	b.n	8001388 <HAL_RCC_OscConfig+0x1ac>
    return HAL_ERROR;
 80015aa:	2001      	movs	r0, #1
}
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	40021000 	.word	0x40021000
 80015b4:	42420000 	.word	0x42420000

080015b8 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80015b8:	2800      	cmp	r0, #0
 80015ba:	f000 80a1 	beq.w	8001700 <HAL_RCC_ClockConfig+0x148>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015be:	4a56      	ldr	r2, [pc, #344]	@ (8001718 <HAL_RCC_ClockConfig+0x160>)
{
 80015c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015c4:	6813      	ldr	r3, [r2, #0]
 80015c6:	4604      	mov	r4, r0
 80015c8:	f003 0307 	and.w	r3, r3, #7
 80015cc:	428b      	cmp	r3, r1
 80015ce:	460d      	mov	r5, r1
 80015d0:	d20c      	bcs.n	80015ec <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015d2:	6813      	ldr	r3, [r2, #0]
 80015d4:	f023 0307 	bic.w	r3, r3, #7
 80015d8:	430b      	orrs	r3, r1
 80015da:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015dc:	6813      	ldr	r3, [r2, #0]
 80015de:	f003 0307 	and.w	r3, r3, #7
 80015e2:	428b      	cmp	r3, r1
 80015e4:	d002      	beq.n	80015ec <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 80015e6:	2001      	movs	r0, #1
}
 80015e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015ec:	6823      	ldr	r3, [r4, #0]
 80015ee:	079e      	lsls	r6, r3, #30
 80015f0:	d514      	bpl.n	800161c <HAL_RCC_ClockConfig+0x64>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015f2:	0758      	lsls	r0, r3, #29
 80015f4:	d504      	bpl.n	8001600 <HAL_RCC_ClockConfig+0x48>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015f6:	4949      	ldr	r1, [pc, #292]	@ (800171c <HAL_RCC_ClockConfig+0x164>)
 80015f8:	684a      	ldr	r2, [r1, #4]
 80015fa:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 80015fe:	604a      	str	r2, [r1, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001600:	0719      	lsls	r1, r3, #28
 8001602:	d504      	bpl.n	800160e <HAL_RCC_ClockConfig+0x56>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001604:	4945      	ldr	r1, [pc, #276]	@ (800171c <HAL_RCC_ClockConfig+0x164>)
 8001606:	684a      	ldr	r2, [r1, #4]
 8001608:	f442 5260 	orr.w	r2, r2, #14336	@ 0x3800
 800160c:	604a      	str	r2, [r1, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800160e:	4943      	ldr	r1, [pc, #268]	@ (800171c <HAL_RCC_ClockConfig+0x164>)
 8001610:	68a0      	ldr	r0, [r4, #8]
 8001612:	684a      	ldr	r2, [r1, #4]
 8001614:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8001618:	4302      	orrs	r2, r0
 800161a:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800161c:	07da      	lsls	r2, r3, #31
 800161e:	d520      	bpl.n	8001662 <HAL_RCC_ClockConfig+0xaa>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001620:	6862      	ldr	r2, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001622:	4b3e      	ldr	r3, [pc, #248]	@ (800171c <HAL_RCC_ClockConfig+0x164>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001624:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001626:	681b      	ldr	r3, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001628:	d06c      	beq.n	8001704 <HAL_RCC_ClockConfig+0x14c>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800162a:	2a02      	cmp	r2, #2
 800162c:	d065      	beq.n	80016fa <HAL_RCC_ClockConfig+0x142>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800162e:	079e      	lsls	r6, r3, #30
 8001630:	d5d9      	bpl.n	80015e6 <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001632:	4e3a      	ldr	r6, [pc, #232]	@ (800171c <HAL_RCC_ClockConfig+0x164>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001634:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001638:	6873      	ldr	r3, [r6, #4]
 800163a:	f023 0303 	bic.w	r3, r3, #3
 800163e:	4313      	orrs	r3, r2
 8001640:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001642:	f7ff fc1d 	bl	8000e80 <HAL_GetTick>
 8001646:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001648:	e004      	b.n	8001654 <HAL_RCC_ClockConfig+0x9c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800164a:	f7ff fc19 	bl	8000e80 <HAL_GetTick>
 800164e:	1bc0      	subs	r0, r0, r7
 8001650:	4540      	cmp	r0, r8
 8001652:	d85a      	bhi.n	800170a <HAL_RCC_ClockConfig+0x152>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001654:	6873      	ldr	r3, [r6, #4]
 8001656:	6862      	ldr	r2, [r4, #4]
 8001658:	f003 030c 	and.w	r3, r3, #12
 800165c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001660:	d1f3      	bne.n	800164a <HAL_RCC_ClockConfig+0x92>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001662:	4a2d      	ldr	r2, [pc, #180]	@ (8001718 <HAL_RCC_ClockConfig+0x160>)
 8001664:	6813      	ldr	r3, [r2, #0]
 8001666:	f003 0307 	and.w	r3, r3, #7
 800166a:	42ab      	cmp	r3, r5
 800166c:	d909      	bls.n	8001682 <HAL_RCC_ClockConfig+0xca>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800166e:	6813      	ldr	r3, [r2, #0]
 8001670:	f023 0307 	bic.w	r3, r3, #7
 8001674:	432b      	orrs	r3, r5
 8001676:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001678:	6813      	ldr	r3, [r2, #0]
 800167a:	f003 0307 	and.w	r3, r3, #7
 800167e:	42ab      	cmp	r3, r5
 8001680:	d1b1      	bne.n	80015e6 <HAL_RCC_ClockConfig+0x2e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001682:	6823      	ldr	r3, [r4, #0]
 8001684:	0758      	lsls	r0, r3, #29
 8001686:	d506      	bpl.n	8001696 <HAL_RCC_ClockConfig+0xde>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001688:	4924      	ldr	r1, [pc, #144]	@ (800171c <HAL_RCC_ClockConfig+0x164>)
 800168a:	68e0      	ldr	r0, [r4, #12]
 800168c:	684a      	ldr	r2, [r1, #4]
 800168e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001692:	4302      	orrs	r2, r0
 8001694:	604a      	str	r2, [r1, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001696:	0719      	lsls	r1, r3, #28
 8001698:	d507      	bpl.n	80016aa <HAL_RCC_ClockConfig+0xf2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800169a:	4a20      	ldr	r2, [pc, #128]	@ (800171c <HAL_RCC_ClockConfig+0x164>)
 800169c:	6921      	ldr	r1, [r4, #16]
 800169e:	6853      	ldr	r3, [r2, #4]
 80016a0:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 80016a4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80016a8:	6053      	str	r3, [r2, #4]
  tmpreg = RCC->CFGR;
 80016aa:	491c      	ldr	r1, [pc, #112]	@ (800171c <HAL_RCC_ClockConfig+0x164>)
 80016ac:	684a      	ldr	r2, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80016ae:	f002 030c 	and.w	r3, r2, #12
 80016b2:	2b08      	cmp	r3, #8
 80016b4:	d010      	beq.n	80016d8 <HAL_RCC_ClockConfig+0x120>
      sysclockfreq = HSE_VALUE;
 80016b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001720 <HAL_RCC_ClockConfig+0x168>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80016b8:	4a18      	ldr	r2, [pc, #96]	@ (800171c <HAL_RCC_ClockConfig+0x164>)
 80016ba:	481a      	ldr	r0, [pc, #104]	@ (8001724 <HAL_RCC_ClockConfig+0x16c>)
 80016bc:	6852      	ldr	r2, [r2, #4]
  HAL_InitTick(uwTickPrio);
 80016be:	491a      	ldr	r1, [pc, #104]	@ (8001728 <HAL_RCC_ClockConfig+0x170>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80016c0:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80016c4:	5c80      	ldrb	r0, [r0, r2]
 80016c6:	4a19      	ldr	r2, [pc, #100]	@ (800172c <HAL_RCC_ClockConfig+0x174>)
 80016c8:	40c3      	lsrs	r3, r0
  HAL_InitTick(uwTickPrio);
 80016ca:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80016cc:	6013      	str	r3, [r2, #0]
  HAL_InitTick(uwTickPrio);
 80016ce:	f7ff fb95 	bl	8000dfc <HAL_InitTick>
  return HAL_OK;
 80016d2:	2000      	movs	r0, #0
}
 80016d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80016d8:	4815      	ldr	r0, [pc, #84]	@ (8001730 <HAL_RCC_ClockConfig+0x178>)
 80016da:	f3c2 4383 	ubfx	r3, r2, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80016de:	03d2      	lsls	r2, r2, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80016e0:	5cc3      	ldrb	r3, [r0, r3]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80016e2:	d514      	bpl.n	800170e <HAL_RCC_ClockConfig+0x156>
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80016e4:	480e      	ldr	r0, [pc, #56]	@ (8001720 <HAL_RCC_ClockConfig+0x168>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80016e6:	684a      	ldr	r2, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80016e8:	fb00 f303 	mul.w	r3, r0, r3
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80016ec:	4911      	ldr	r1, [pc, #68]	@ (8001734 <HAL_RCC_ClockConfig+0x17c>)
 80016ee:	f3c2 4240 	ubfx	r2, r2, #17, #1
 80016f2:	5c8a      	ldrb	r2, [r1, r2]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80016f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80016f8:	e7de      	b.n	80016b8 <HAL_RCC_ClockConfig+0x100>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016fa:	019f      	lsls	r7, r3, #6
 80016fc:	d499      	bmi.n	8001632 <HAL_RCC_ClockConfig+0x7a>
 80016fe:	e772      	b.n	80015e6 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8001700:	2001      	movs	r0, #1
}
 8001702:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001704:	039b      	lsls	r3, r3, #14
 8001706:	d494      	bmi.n	8001632 <HAL_RCC_ClockConfig+0x7a>
 8001708:	e76d      	b.n	80015e6 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 800170a:	2003      	movs	r0, #3
 800170c:	e76c      	b.n	80015e8 <HAL_RCC_ClockConfig+0x30>
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800170e:	4a0a      	ldr	r2, [pc, #40]	@ (8001738 <HAL_RCC_ClockConfig+0x180>)
 8001710:	fb02 f303 	mul.w	r3, r2, r3
 8001714:	e7d0      	b.n	80016b8 <HAL_RCC_ClockConfig+0x100>
 8001716:	bf00      	nop
 8001718:	40022000 	.word	0x40022000
 800171c:	40021000 	.word	0x40021000
 8001720:	007a1200 	.word	0x007a1200
 8001724:	08003314 	.word	0x08003314
 8001728:	20000008 	.word	0x20000008
 800172c:	20000000 	.word	0x20000000
 8001730:	0800340c 	.word	0x0800340c
 8001734:	08003408 	.word	0x08003408
 8001738:	003d0900 	.word	0x003d0900

0800173c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800173c:	4b04      	ldr	r3, [pc, #16]	@ (8001750 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 800173e:	4a05      	ldr	r2, [pc, #20]	@ (8001754 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	4905      	ldr	r1, [pc, #20]	@ (8001758 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001744:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001748:	5ccb      	ldrb	r3, [r1, r3]
 800174a:	6810      	ldr	r0, [r2, #0]
}
 800174c:	40d8      	lsrs	r0, r3
 800174e:	4770      	bx	lr
 8001750:	40021000 	.word	0x40021000
 8001754:	20000000 	.word	0x20000000
 8001758:	0800330c 	.word	0x0800330c

0800175c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800175c:	4b04      	ldr	r3, [pc, #16]	@ (8001770 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 800175e:	4a05      	ldr	r2, [pc, #20]	@ (8001774 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	4905      	ldr	r1, [pc, #20]	@ (8001778 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001764:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001768:	5ccb      	ldrb	r3, [r1, r3]
 800176a:	6810      	ldr	r0, [r2, #0]
}
 800176c:	40d8      	lsrs	r0, r3
 800176e:	4770      	bx	lr
 8001770:	40021000 	.word	0x40021000
 8001774:	20000000 	.word	0x20000000
 8001778:	0800330c 	.word	0x0800330c

0800177c <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800177c:	2800      	cmp	r0, #0
 800177e:	d068      	beq.n	8001852 <HAL_TIM_Base_Init+0xd6>
{
 8001780:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001782:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8001786:	4604      	mov	r4, r0
 8001788:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800178c:	2b00      	cmp	r3, #0
 800178e:	d04a      	beq.n	8001826 <HAL_TIM_Base_Init+0xaa>

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001790:	e9d4 2100 	ldrd	r2, r1, [r4]
  htim->State = HAL_TIM_STATE_BUSY;
 8001794:	2302      	movs	r3, #2
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001796:	4e30      	ldr	r6, [pc, #192]	@ (8001858 <HAL_TIM_Base_Init+0xdc>)
  htim->State = HAL_TIM_STATE_BUSY;
 8001798:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800179c:	42b2      	cmp	r2, r6
  TIMx->ARR = (uint32_t)Structure->Period ;
 800179e:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80017a0:	69a5      	ldr	r5, [r4, #24]
  tmpcr1 = TIMx->CR1;
 80017a2:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80017a4:	d044      	beq.n	8001830 <HAL_TIM_Base_Init+0xb4>
 80017a6:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 80017aa:	d00e      	beq.n	80017ca <HAL_TIM_Base_Init+0x4e>
 80017ac:	f5a6 3694 	sub.w	r6, r6, #75776	@ 0x12800
 80017b0:	42b2      	cmp	r2, r6
 80017b2:	d00a      	beq.n	80017ca <HAL_TIM_Base_Init+0x4e>
 80017b4:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 80017b8:	42b2      	cmp	r2, r6
 80017ba:	d006      	beq.n	80017ca <HAL_TIM_Base_Init+0x4e>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80017bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80017c0:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80017c2:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80017c4:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80017c6:	6291      	str	r1, [r2, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80017c8:	e00d      	b.n	80017e6 <HAL_TIM_Base_Init+0x6a>
    tmpcr1 |= Structure->CounterMode;
 80017ca:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80017cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80017d0:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80017d2:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 80017d4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80017d8:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80017da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80017de:	431d      	orrs	r5, r3
  TIMx->CR1 = tmpcr1;
 80017e0:	6015      	str	r5, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80017e2:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80017e4:	6291      	str	r1, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80017e6:	2301      	movs	r3, #1
 80017e8:	6153      	str	r3, [r2, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80017ea:	6913      	ldr	r3, [r2, #16]
 80017ec:	07db      	lsls	r3, r3, #31
 80017ee:	d503      	bpl.n	80017f8 <HAL_TIM_Base_Init+0x7c>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80017f0:	6913      	ldr	r3, [r2, #16]
 80017f2:	f023 0301 	bic.w	r3, r3, #1
 80017f6:	6113      	str	r3, [r2, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80017f8:	2301      	movs	r3, #1
 80017fa:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80017fe:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8001802:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8001806:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800180a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800180e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001812:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001816:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800181a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 800181e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8001822:	2000      	movs	r0, #0
}
 8001824:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 8001826:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800182a:	f7fe fff5 	bl	8000818 <HAL_TIM_Base_MspInit>
 800182e:	e7af      	b.n	8001790 <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 8001830:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001832:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8001836:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001838:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800183a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800183e:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001840:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001844:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8001846:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001848:	62d0      	str	r0, [r2, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800184a:	6291      	str	r1, [r2, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800184c:	6963      	ldr	r3, [r4, #20]
 800184e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001850:	e7c9      	b.n	80017e6 <HAL_TIM_Base_Init+0x6a>
    return HAL_ERROR;
 8001852:	2001      	movs	r0, #1
}
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	40012c00 	.word	0x40012c00

0800185c <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 800185c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8001860:	2b01      	cmp	r3, #1
 8001862:	d11c      	bne.n	800189e <HAL_TIM_Base_Start+0x42>
  htim->State = HAL_TIM_STATE_BUSY;
 8001864:	2102      	movs	r1, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001866:	6803      	ldr	r3, [r0, #0]
 8001868:	4a0e      	ldr	r2, [pc, #56]	@ (80018a4 <HAL_TIM_Base_Start+0x48>)
  htim->State = HAL_TIM_STATE_BUSY;
 800186a:	f880 103d 	strb.w	r1, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800186e:	4293      	cmp	r3, r2
 8001870:	d00a      	beq.n	8001888 <HAL_TIM_Base_Start+0x2c>
 8001872:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001876:	d007      	beq.n	8001888 <HAL_TIM_Base_Start+0x2c>
 8001878:	f5a2 3294 	sub.w	r2, r2, #75776	@ 0x12800
 800187c:	4293      	cmp	r3, r2
 800187e:	d003      	beq.n	8001888 <HAL_TIM_Base_Start+0x2c>
 8001880:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8001884:	4293      	cmp	r3, r2
 8001886:	d104      	bne.n	8001892 <HAL_TIM_Base_Start+0x36>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001888:	689a      	ldr	r2, [r3, #8]
 800188a:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800188e:	2a06      	cmp	r2, #6
 8001890:	d003      	beq.n	800189a <HAL_TIM_Base_Start+0x3e>
      __HAL_TIM_ENABLE(htim);
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	f042 0201 	orr.w	r2, r2, #1
 8001898:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800189a:	2000      	movs	r0, #0
 800189c:	4770      	bx	lr
    return HAL_ERROR;
 800189e:	2001      	movs	r0, #1
}
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	40012c00 	.word	0x40012c00

080018a8 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80018a8:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d071      	beq.n	8001994 <HAL_TIM_ConfigClockSource+0xec>
 80018b0:	4602      	mov	r2, r0
  htim->State = HAL_TIM_STATE_BUSY;
 80018b2:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 80018b4:	2001      	movs	r0, #1
{
 80018b6:	b430      	push	{r4, r5}
  tmpsmcr = htim->Instance->SMCR;
 80018b8:	6814      	ldr	r4, [r2, #0]
  __HAL_LOCK(htim);
 80018ba:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80018be:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80018c2:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80018c4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80018c8:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
  htim->Instance->SMCR = tmpsmcr;
 80018cc:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 80018ce:	680b      	ldr	r3, [r1, #0]
 80018d0:	2b60      	cmp	r3, #96	@ 0x60
 80018d2:	d061      	beq.n	8001998 <HAL_TIM_ConfigClockSource+0xf0>
 80018d4:	d824      	bhi.n	8001920 <HAL_TIM_ConfigClockSource+0x78>
 80018d6:	2b40      	cmp	r3, #64	@ 0x40
 80018d8:	d077      	beq.n	80019ca <HAL_TIM_ConfigClockSource+0x122>
 80018da:	d94a      	bls.n	8001972 <HAL_TIM_ConfigClockSource+0xca>
 80018dc:	2b50      	cmp	r3, #80	@ 0x50
 80018de:	d117      	bne.n	8001910 <HAL_TIM_ConfigClockSource+0x68>
                               sClockSourceConfig->ClockPolarity,
 80018e0:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80018e2:	68c8      	ldr	r0, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80018e4:	6a21      	ldr	r1, [r4, #32]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80018e6:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 80018ea:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80018ec:	6a23      	ldr	r3, [r4, #32]
 80018ee:	f023 0301 	bic.w	r3, r3, #1
 80018f2:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 80018f4:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80018f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80018fa:	ea43 1300 	orr.w	r3, r3, r0, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80018fe:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8001900:	6221      	str	r1, [r4, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001902:	68a3      	ldr	r3, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001904:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001908:	f043 0357 	orr.w	r3, r3, #87	@ 0x57
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800190c:	60a3      	str	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800190e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001910:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8001912:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8001914:	f882 103d 	strb.w	r1, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8001918:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
}
 800191c:	bc30      	pop	{r4, r5}
 800191e:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8001920:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001924:	d0f3      	beq.n	800190e <HAL_TIM_ConfigClockSource+0x66>
 8001926:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800192a:	d110      	bne.n	800194e <HAL_TIM_ConfigClockSource+0xa6>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800192c:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8001930:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001932:	432b      	orrs	r3, r5
 8001934:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001936:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800193a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800193e:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001940:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001942:	68a3      	ldr	r3, [r4, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001944:	2000      	movs	r0, #0
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001946:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800194a:	60a3      	str	r3, [r4, #8]
      break;
 800194c:	e7e0      	b.n	8001910 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 800194e:	2b70      	cmp	r3, #112	@ 0x70
 8001950:	d1de      	bne.n	8001910 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001952:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8001956:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001958:	432b      	orrs	r3, r5
 800195a:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800195c:	f420 417f 	bic.w	r1, r0, #65280	@ 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001960:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8001964:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8001966:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 8001968:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800196a:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
      htim->Instance->SMCR = tmpsmcr;
 800196e:	60a3      	str	r3, [r4, #8]
      break;
 8001970:	e7cd      	b.n	800190e <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 8001972:	2b20      	cmp	r3, #32
 8001974:	d002      	beq.n	800197c <HAL_TIM_ConfigClockSource+0xd4>
 8001976:	d909      	bls.n	800198c <HAL_TIM_ConfigClockSource+0xe4>
 8001978:	2b30      	cmp	r3, #48	@ 0x30
 800197a:	d1c9      	bne.n	8001910 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr = TIMx->SMCR;
 800197c:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800197e:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001982:	430b      	orrs	r3, r1
 8001984:	f043 0307 	orr.w	r3, r3, #7
  TIMx->SMCR = tmpsmcr;
 8001988:	60a3      	str	r3, [r4, #8]
}
 800198a:	e7c0      	b.n	800190e <HAL_TIM_ConfigClockSource+0x66>
  switch (sClockSourceConfig->ClockSource)
 800198c:	f033 0110 	bics.w	r1, r3, #16
 8001990:	d1be      	bne.n	8001910 <HAL_TIM_ConfigClockSource+0x68>
 8001992:	e7f3      	b.n	800197c <HAL_TIM_ConfigClockSource+0xd4>
  __HAL_LOCK(htim);
 8001994:	2002      	movs	r0, #2
}
 8001996:	4770      	bx	lr
  tmpccer = TIMx->CCER;
 8001998:	6a23      	ldr	r3, [r4, #32]
                               sClockSourceConfig->ClockPolarity,
 800199a:	684d      	ldr	r5, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 800199c:	68c8      	ldr	r0, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800199e:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80019a0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80019a4:	f021 0110 	bic.w	r1, r1, #16
 80019a8:	6221      	str	r1, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 80019aa:	69a1      	ldr	r1, [r4, #24]
  tmpccer |= (TIM_ICPolarity << 4U);
 80019ac:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80019b0:	f421 4170 	bic.w	r1, r1, #61440	@ 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80019b4:	ea41 3100 	orr.w	r1, r1, r0, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80019b8:	61a1      	str	r1, [r4, #24]
  TIMx->CCER = tmpccer;
 80019ba:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 80019bc:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80019be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80019c2:	f043 0367 	orr.w	r3, r3, #103	@ 0x67
  TIMx->SMCR = tmpsmcr;
 80019c6:	60a3      	str	r3, [r4, #8]
}
 80019c8:	e7a1      	b.n	800190e <HAL_TIM_ConfigClockSource+0x66>
                               sClockSourceConfig->ClockPolarity,
 80019ca:	684b      	ldr	r3, [r1, #4]
                               sClockSourceConfig->ClockFilter);
 80019cc:	68c8      	ldr	r0, [r1, #12]
  tmpccer = TIMx->CCER;
 80019ce:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80019d0:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 80019d4:	4319      	orrs	r1, r3
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80019d6:	6a23      	ldr	r3, [r4, #32]
 80019d8:	f023 0301 	bic.w	r3, r3, #1
 80019dc:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 80019de:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80019e0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80019e4:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80019e8:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 80019ea:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 80019ec:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80019ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80019f2:	f043 0347 	orr.w	r3, r3, #71	@ 0x47
  TIMx->SMCR = tmpsmcr;
 80019f6:	60a3      	str	r3, [r4, #8]
}
 80019f8:	e789      	b.n	800190e <HAL_TIM_ConfigClockSource+0x66>
 80019fa:	bf00      	nop

080019fc <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80019fc:	f890 203c 	ldrb.w	r2, [r0, #60]	@ 0x3c
 8001a00:	2a01      	cmp	r2, #1
 8001a02:	d027      	beq.n	8001a54 <HAL_TIMEx_MasterConfigSynchronization+0x58>
 8001a04:	4603      	mov	r3, r0

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a06:	2002      	movs	r0, #2

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001a08:	681a      	ldr	r2, [r3, #0]
{
 8001a0a:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 8001a0c:	f883 003d 	strb.w	r0, [r3, #61]	@ 0x3d
  tmpcr2 = htim->Instance->CR2;
 8001a10:	6850      	ldr	r0, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001a12:	680c      	ldr	r4, [r1, #0]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a14:	4d10      	ldr	r5, [pc, #64]	@ (8001a58 <HAL_TIMEx_MasterConfigSynchronization+0x5c>)
  tmpcr2 &= ~TIM_CR2_MMS;
 8001a16:	f020 0070 	bic.w	r0, r0, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001a1a:	4320      	orrs	r0, r4
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a1c:	42aa      	cmp	r2, r5
  tmpsmcr = htim->Instance->SMCR;
 8001a1e:	6894      	ldr	r4, [r2, #8]
  htim->Instance->CR2 = tmpcr2;
 8001a20:	6050      	str	r0, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a22:	d009      	beq.n	8001a38 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8001a24:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 8001a28:	d006      	beq.n	8001a38 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8001a2a:	480c      	ldr	r0, [pc, #48]	@ (8001a5c <HAL_TIMEx_MasterConfigSynchronization+0x60>)
 8001a2c:	4282      	cmp	r2, r0
 8001a2e:	d003      	beq.n	8001a38 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8001a30:	f500 6080 	add.w	r0, r0, #1024	@ 0x400
 8001a34:	4282      	cmp	r2, r0
 8001a36:	d104      	bne.n	8001a42 <HAL_TIMEx_MasterConfigSynchronization+0x46>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001a38:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001a3a:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001a3e:	430c      	orrs	r4, r1

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001a40:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8001a42:	2200      	movs	r2, #0
  htim->State = HAL_TIM_STATE_READY;
 8001a44:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 8001a46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  htim->State = HAL_TIM_STATE_READY;
 8001a4a:	f883 103d 	strb.w	r1, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001a4e:	4610      	mov	r0, r2
}
 8001a50:	bc30      	pop	{r4, r5}
 8001a52:	4770      	bx	lr
  __HAL_LOCK(htim);
 8001a54:	2002      	movs	r0, #2
}
 8001a56:	4770      	bx	lr
 8001a58:	40012c00 	.word	0x40012c00
 8001a5c:	40000400 	.word	0x40000400

08001a60 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a60:	2800      	cmp	r0, #0
 8001a62:	d065      	beq.n	8001b30 <HAL_UART_Init+0xd0>
{
 8001a64:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a66:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8001a6a:	4604      	mov	r4, r0
 8001a6c:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d055      	beq.n	8001b20 <HAL_UART_Init+0xc0>
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001a74:	e9d4 2602 	ldrd	r2, r6, [r4, #8]
  huart->gState = HAL_UART_STATE_BUSY;
 8001a78:	2124      	movs	r1, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 8001a7a:	6823      	ldr	r3, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001a7c:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8001a80:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001a82:	6920      	ldr	r0, [r4, #16]
  __HAL_UART_DISABLE(huart);
 8001a84:	f421 5100 	bic.w	r1, r1, #8192	@ 0x2000
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001a88:	69a5      	ldr	r5, [r4, #24]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001a8a:	4302      	orrs	r2, r0
 8001a8c:	6960      	ldr	r0, [r4, #20]
  __HAL_UART_DISABLE(huart);
 8001a8e:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001a90:	6919      	ldr	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001a92:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001a94:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
 8001a98:	4331      	orrs	r1, r6
 8001a9a:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 8001a9c:	68d9      	ldr	r1, [r3, #12]


  if(huart->Instance == USART1)
 8001a9e:	4825      	ldr	r0, [pc, #148]	@ (8001b34 <HAL_UART_Init+0xd4>)
  MODIFY_REG(huart->Instance->CR1,
 8001aa0:	f421 51b0 	bic.w	r1, r1, #5632	@ 0x1600
 8001aa4:	f021 010c 	bic.w	r1, r1, #12
 8001aa8:	430a      	orrs	r2, r1
 8001aaa:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001aac:	695a      	ldr	r2, [r3, #20]
  if(huart->Instance == USART1)
 8001aae:	4283      	cmp	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001ab0:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8001ab4:	ea42 0205 	orr.w	r2, r2, r5
 8001ab8:	615a      	str	r2, [r3, #20]
  if(huart->Instance == USART1)
 8001aba:	d036      	beq.n	8001b2a <HAL_UART_Init+0xca>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001abc:	f7ff fe3e 	bl	800173c <HAL_RCC_GetPCLK1Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001ac0:	6862      	ldr	r2, [r4, #4]
 8001ac2:	eb00 0380 	add.w	r3, r0, r0, lsl #2
 8001ac6:	0092      	lsls	r2, r2, #2
 8001ac8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001acc:	fbb3 f3f2 	udiv	r3, r3, r2
 8001ad0:	f04f 0e64 	mov.w	lr, #100	@ 0x64
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ad4:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 8001ad6:	f04f 0c20 	mov.w	ip, #32
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001ada:	4817      	ldr	r0, [pc, #92]	@ (8001b38 <HAL_UART_Init+0xd8>)
 8001adc:	6821      	ldr	r1, [r4, #0]
 8001ade:	fba0 6203 	umull	r6, r2, r0, r3
 8001ae2:	0952      	lsrs	r2, r2, #5
 8001ae4:	fb0e 3312 	mls	r3, lr, r2, r3
 8001ae8:	011b      	lsls	r3, r3, #4
 8001aea:	3332      	adds	r3, #50	@ 0x32
 8001aec:	fba0 0303 	umull	r0, r3, r0, r3
 8001af0:	0112      	lsls	r2, r2, #4
 8001af2:	eb02 1253 	add.w	r2, r2, r3, lsr #5
 8001af6:	608a      	str	r2, [r1, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001af8:	690b      	ldr	r3, [r1, #16]
  return HAL_OK;
 8001afa:	4628      	mov	r0, r5
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001afc:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8001b00:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b02:	694b      	ldr	r3, [r1, #20]
 8001b04:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8001b08:	614b      	str	r3, [r1, #20]
  __HAL_UART_ENABLE(huart);
 8001b0a:	68cb      	ldr	r3, [r1, #12]
 8001b0c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001b10:	60cb      	str	r3, [r1, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b12:	6465      	str	r5, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001b14:	f884 c041 	strb.w	ip, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001b18:	f884 c042 	strb.w	ip, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001b1c:	6365      	str	r5, [r4, #52]	@ 0x34
}
 8001b1e:	bd70      	pop	{r4, r5, r6, pc}
    huart->Lock = HAL_UNLOCKED;
 8001b20:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8001b24:	f7fe fe8e 	bl	8000844 <HAL_UART_MspInit>
 8001b28:	e7a4      	b.n	8001a74 <HAL_UART_Init+0x14>
    pclk = HAL_RCC_GetPCLK2Freq();
 8001b2a:	f7ff fe17 	bl	800175c <HAL_RCC_GetPCLK2Freq>
 8001b2e:	e7c7      	b.n	8001ac0 <HAL_UART_Init+0x60>
    return HAL_ERROR;
 8001b30:	2001      	movs	r0, #1
}
 8001b32:	4770      	bx	lr
 8001b34:	40013800 	.word	0x40013800
 8001b38:	51eb851f 	.word	0x51eb851f

08001b3c <HAL_UART_Transmit>:
{
 8001b3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001b40:	461d      	mov	r5, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8001b42:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8001b46:	2b20      	cmp	r3, #32
 8001b48:	d14b      	bne.n	8001be2 <HAL_UART_Transmit+0xa6>
    if ((pData == NULL) || (Size == 0U))
 8001b4a:	4688      	mov	r8, r1
 8001b4c:	b109      	cbz	r1, 8001b52 <HAL_UART_Transmit+0x16>
 8001b4e:	4617      	mov	r7, r2
 8001b50:	b912      	cbnz	r2, 8001b58 <HAL_UART_Transmit+0x1c>
      return  HAL_ERROR;
 8001b52:	2001      	movs	r0, #1
}
 8001b54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b58:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b5a:	f04f 0900 	mov.w	r9, #0
 8001b5e:	4604      	mov	r4, r0
 8001b60:	f8c0 9044 	str.w	r9, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b64:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 8001b68:	f7ff f98a 	bl	8000e80 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b6c:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8001b6e:	4606      	mov	r6, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->TxXferSize = Size;
 8001b74:	84a7      	strh	r7, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001b76:	84e7      	strh	r7, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b78:	d042      	beq.n	8001c00 <HAL_UART_Transmit+0xc4>
    while (huart->TxXferCount > 0U)
 8001b7a:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b7c:	6823      	ldr	r3, [r4, #0]
    while (huart->TxXferCount > 0U)
 8001b7e:	b292      	uxth	r2, r2
 8001b80:	b192      	cbz	r2, 8001ba8 <HAL_UART_Transmit+0x6c>
 8001b82:	1c68      	adds	r0, r5, #1
 8001b84:	d122      	bne.n	8001bcc <HAL_UART_Transmit+0x90>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	0612      	lsls	r2, r2, #24
 8001b8a:	d5fc      	bpl.n	8001b86 <HAL_UART_Transmit+0x4a>
      if (pdata8bits == NULL)
 8001b8c:	f1b8 0f00 	cmp.w	r8, #0
 8001b90:	d022      	beq.n	8001bd8 <HAL_UART_Transmit+0x9c>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001b92:	f818 2b01 	ldrb.w	r2, [r8], #1
 8001b96:	605a      	str	r2, [r3, #4]
      huart->TxXferCount--;
 8001b98:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 8001b9a:	3a01      	subs	r2, #1
 8001b9c:	b292      	uxth	r2, r2
 8001b9e:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001ba0:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 8001ba2:	b292      	uxth	r2, r2
 8001ba4:	2a00      	cmp	r2, #0
 8001ba6:	d1ec      	bne.n	8001b82 <HAL_UART_Transmit+0x46>
 8001ba8:	1c69      	adds	r1, r5, #1
 8001baa:	d125      	bne.n	8001bf8 <HAL_UART_Transmit+0xbc>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	0652      	lsls	r2, r2, #25
 8001bb0:	d5fc      	bpl.n	8001bac <HAL_UART_Transmit+0x70>
    huart->gState = HAL_UART_STATE_READY;
 8001bb2:	2320      	movs	r3, #32
    return HAL_OK;
 8001bb4:	2000      	movs	r0, #0
    huart->gState = HAL_UART_STATE_READY;
 8001bb6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 8001bba:	e7cb      	b.n	8001b54 <HAL_UART_Transmit+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bbc:	f7ff f960 	bl	8000e80 <HAL_GetTick>
 8001bc0:	1b80      	subs	r0, r0, r6
 8001bc2:	4285      	cmp	r5, r0
 8001bc4:	d322      	bcc.n	8001c0c <HAL_UART_Transmit+0xd0>
 8001bc6:	b30d      	cbz	r5, 8001c0c <HAL_UART_Transmit+0xd0>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001bc8:	6823      	ldr	r3, [r4, #0]
 8001bca:	68da      	ldr	r2, [r3, #12]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	0617      	lsls	r7, r2, #24
 8001bd0:	d5f4      	bpl.n	8001bbc <HAL_UART_Transmit+0x80>
      if (pdata8bits == NULL)
 8001bd2:	f1b8 0f00 	cmp.w	r8, #0
 8001bd6:	d1dc      	bne.n	8001b92 <HAL_UART_Transmit+0x56>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001bd8:	f839 2b02 	ldrh.w	r2, [r9], #2
 8001bdc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001be0:	e7d9      	b.n	8001b96 <HAL_UART_Transmit+0x5a>
    return HAL_BUSY;
 8001be2:	2002      	movs	r0, #2
}
 8001be4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001be8:	f7ff f94a 	bl	8000e80 <HAL_GetTick>
 8001bec:	1b83      	subs	r3, r0, r6
 8001bee:	429d      	cmp	r5, r3
 8001bf0:	d30c      	bcc.n	8001c0c <HAL_UART_Transmit+0xd0>
 8001bf2:	b15d      	cbz	r5, 8001c0c <HAL_UART_Transmit+0xd0>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001bf4:	6823      	ldr	r3, [r4, #0]
 8001bf6:	68da      	ldr	r2, [r3, #12]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	065b      	lsls	r3, r3, #25
 8001bfc:	d5f4      	bpl.n	8001be8 <HAL_UART_Transmit+0xac>
 8001bfe:	e7d8      	b.n	8001bb2 <HAL_UART_Transmit+0x76>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c00:	6923      	ldr	r3, [r4, #16]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d1b9      	bne.n	8001b7a <HAL_UART_Transmit+0x3e>
 8001c06:	46c1      	mov	r9, r8
      pdata8bits  = NULL;
 8001c08:	4698      	mov	r8, r3
 8001c0a:	e7b6      	b.n	8001b7a <HAL_UART_Transmit+0x3e>
        huart->gState = HAL_UART_STATE_READY;
 8001c0c:	2320      	movs	r3, #32
 8001c0e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 8001c12:	2003      	movs	r0, #3
}
 8001c14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001c18 <HAL_UART_Receive>:
{
 8001c18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001c1c:	461f      	mov	r7, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8001c1e:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
{
 8001c22:	b083      	sub	sp, #12
  if (huart->RxState == HAL_UART_STATE_READY)
 8001c24:	2b20      	cmp	r3, #32
 8001c26:	f040 809e 	bne.w	8001d66 <HAL_UART_Receive+0x14e>
    if ((pData == NULL) || (Size == 0U))
 8001c2a:	4688      	mov	r8, r1
 8001c2c:	b109      	cbz	r1, 8001c32 <HAL_UART_Receive+0x1a>
 8001c2e:	4616      	mov	r6, r2
 8001c30:	b91a      	cbnz	r2, 8001c3a <HAL_UART_Receive+0x22>
      return  HAL_ERROR;
 8001c32:	2001      	movs	r0, #1
}
 8001c34:	b003      	add	sp, #12
 8001c36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001c3a:	2322      	movs	r3, #34	@ 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c3c:	f04f 0900 	mov.w	r9, #0
 8001c40:	4604      	mov	r4, r0
 8001c42:	f8c0 9044 	str.w	r9, [r0, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001c46:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001c4a:	f8c0 9030 	str.w	r9, [r0, #48]	@ 0x30
    tickstart = HAL_GetTick();
 8001c4e:	f7ff f917 	bl	8000e80 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c52:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8001c54:	4605      	mov	r5, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->RxXferSize = Size;
 8001c5a:	85a6      	strh	r6, [r4, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8001c5c:	85e6      	strh	r6, [r4, #46]	@ 0x2e
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001c5e:	f000 8086 	beq.w	8001d6e <HAL_UART_Receive+0x156>
      pdata16bits = NULL;
 8001c62:	464e      	mov	r6, r9
    while (huart->RxXferCount > 0U)
 8001c64:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	b1eb      	cbz	r3, 8001ca6 <HAL_UART_Receive+0x8e>
 8001c6a:	1c7a      	adds	r2, r7, #1
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c6c:	6823      	ldr	r3, [r4, #0]
 8001c6e:	d121      	bne.n	8001cb4 <HAL_UART_Receive+0x9c>
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	0691      	lsls	r1, r2, #26
 8001c74:	d5fc      	bpl.n	8001c70 <HAL_UART_Receive+0x58>
      if (pdata8bits == NULL)
 8001c76:	f1b8 0f00 	cmp.w	r8, #0
 8001c7a:	d06e      	beq.n	8001d5a <HAL_UART_Receive+0x142>
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001c7c:	68a2      	ldr	r2, [r4, #8]
 8001c7e:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
 8001c82:	d004      	beq.n	8001c8e <HAL_UART_Receive+0x76>
 8001c84:	2a00      	cmp	r2, #0
 8001c86:	d164      	bne.n	8001d52 <HAL_UART_Receive+0x13a>
 8001c88:	6922      	ldr	r2, [r4, #16]
 8001c8a:	2a00      	cmp	r2, #0
 8001c8c:	d161      	bne.n	8001d52 <HAL_UART_Receive+0x13a>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	f808 3b01 	strb.w	r3, [r8], #1
      huart->RxXferCount--;
 8001c96:	8de2      	ldrh	r2, [r4, #46]	@ 0x2e
 8001c98:	3a01      	subs	r2, #1
 8001c9a:	b292      	uxth	r2, r2
 8001c9c:	85e2      	strh	r2, [r4, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8001c9e:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d1e1      	bne.n	8001c6a <HAL_UART_Receive+0x52>
    huart->RxState = HAL_UART_STATE_READY;
 8001ca6:	2320      	movs	r3, #32
    return HAL_OK;
 8001ca8:	2000      	movs	r0, #0
    huart->RxState = HAL_UART_STATE_READY;
 8001caa:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
}
 8001cae:	b003      	add	sp, #12
 8001cb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	f012 0920 	ands.w	r9, r2, #32
 8001cba:	d1dc      	bne.n	8001c76 <HAL_UART_Receive+0x5e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cbc:	f7ff f8e0 	bl	8000e80 <HAL_GetTick>
 8001cc0:	1b40      	subs	r0, r0, r5
 8001cc2:	4287      	cmp	r7, r0
 8001cc4:	d33e      	bcc.n	8001d44 <HAL_UART_Receive+0x12c>
 8001cc6:	2f00      	cmp	r7, #0
 8001cc8:	d03c      	beq.n	8001d44 <HAL_UART_Receive+0x12c>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001cca:	6823      	ldr	r3, [r4, #0]
 8001ccc:	68da      	ldr	r2, [r3, #12]
 8001cce:	4619      	mov	r1, r3
 8001cd0:	0752      	lsls	r2, r2, #29
 8001cd2:	d5ef      	bpl.n	8001cb4 <HAL_UART_Receive+0x9c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	0710      	lsls	r0, r2, #28
 8001cd8:	d5ec      	bpl.n	8001cb4 <HAL_UART_Receive+0x9c>
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001cda:	f8cd 9004 	str.w	r9, [sp, #4]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	9201      	str	r2, [sp, #4]
 8001ce2:	685a      	ldr	r2, [r3, #4]
 8001ce4:	9201      	str	r2, [sp, #4]
 8001ce6:	9a01      	ldr	r2, [sp, #4]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001ce8:	f103 020c 	add.w	r2, r3, #12
 8001cec:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001cf0:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001cf4:	330c      	adds	r3, #12
 8001cf6:	e843 2000 	strex	r0, r2, [r3]
 8001cfa:	b158      	cbz	r0, 8001d14 <HAL_UART_Receive+0xfc>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001cfc:	f101 030c 	add.w	r3, r1, #12
 8001d00:	e853 3f00 	ldrex	r3, [r3]
 8001d04:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d08:	f101 000c 	add.w	r0, r1, #12
 8001d0c:	e840 3200 	strex	r2, r3, [r0]
 8001d10:	2a00      	cmp	r2, #0
 8001d12:	d1f3      	bne.n	8001cfc <HAL_UART_Receive+0xe4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d14:	f101 0314 	add.w	r3, r1, #20
 8001d18:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d1c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d20:	f101 0014 	add.w	r0, r1, #20
 8001d24:	e840 3200 	strex	r2, r3, [r0]
 8001d28:	2a00      	cmp	r2, #0
 8001d2a:	d1f3      	bne.n	8001d14 <HAL_UART_Receive+0xfc>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001d2c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d024      	beq.n	8001d7c <HAL_UART_Receive+0x164>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001d32:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 8001d34:	2120      	movs	r1, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001d36:	2208      	movs	r2, #8
  huart->RxState = HAL_UART_STATE_READY;
 8001d38:	f884 1042 	strb.w	r1, [r4, #66]	@ 0x42
          __HAL_UNLOCK(huart);
 8001d3c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001d40:	6323      	str	r3, [r4, #48]	@ 0x30
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001d42:	6462      	str	r2, [r4, #68]	@ 0x44
        huart->RxState = HAL_UART_STATE_READY;
 8001d44:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 8001d46:	2003      	movs	r0, #3
        huart->RxState = HAL_UART_STATE_READY;
 8001d48:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
}
 8001d4c:	b003      	add	sp, #12
 8001d4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001d58:	e79b      	b.n	8001c92 <HAL_UART_Receive+0x7a>
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d60:	f826 3b02 	strh.w	r3, [r6], #2
        pdata16bits++;
 8001d64:	e797      	b.n	8001c96 <HAL_UART_Receive+0x7e>
    return HAL_BUSY;
 8001d66:	2002      	movs	r0, #2
}
 8001d68:	b003      	add	sp, #12
 8001d6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d6e:	6923      	ldr	r3, [r4, #16]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	f47f af76 	bne.w	8001c62 <HAL_UART_Receive+0x4a>
 8001d76:	4646      	mov	r6, r8
      pdata8bits  = NULL;
 8001d78:	4698      	mov	r8, r3
 8001d7a:	e773      	b.n	8001c64 <HAL_UART_Receive+0x4c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d7c:	f101 030c 	add.w	r3, r1, #12
 8001d80:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001d84:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d88:	f101 000c 	add.w	r0, r1, #12
 8001d8c:	e840 3200 	strex	r2, r3, [r0]
 8001d90:	2a00      	cmp	r2, #0
 8001d92:	d1f3      	bne.n	8001d7c <HAL_UART_Receive+0x164>
 8001d94:	e7cd      	b.n	8001d32 <HAL_UART_Receive+0x11a>
 8001d96:	bf00      	nop

08001d98 <rand>:
 8001d98:	4b16      	ldr	r3, [pc, #88]	@ (8001df4 <rand+0x5c>)
 8001d9a:	b510      	push	{r4, lr}
 8001d9c:	681c      	ldr	r4, [r3, #0]
 8001d9e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8001da0:	b9b3      	cbnz	r3, 8001dd0 <rand+0x38>
 8001da2:	2018      	movs	r0, #24
 8001da4:	f000 fa3e 	bl	8002224 <malloc>
 8001da8:	4602      	mov	r2, r0
 8001daa:	6320      	str	r0, [r4, #48]	@ 0x30
 8001dac:	b920      	cbnz	r0, 8001db8 <rand+0x20>
 8001dae:	2152      	movs	r1, #82	@ 0x52
 8001db0:	4b11      	ldr	r3, [pc, #68]	@ (8001df8 <rand+0x60>)
 8001db2:	4812      	ldr	r0, [pc, #72]	@ (8001dfc <rand+0x64>)
 8001db4:	f000 f9d0 	bl	8002158 <__assert_func>
 8001db8:	4911      	ldr	r1, [pc, #68]	@ (8001e00 <rand+0x68>)
 8001dba:	4b12      	ldr	r3, [pc, #72]	@ (8001e04 <rand+0x6c>)
 8001dbc:	e9c0 1300 	strd	r1, r3, [r0]
 8001dc0:	4b11      	ldr	r3, [pc, #68]	@ (8001e08 <rand+0x70>)
 8001dc2:	2100      	movs	r1, #0
 8001dc4:	6083      	str	r3, [r0, #8]
 8001dc6:	230b      	movs	r3, #11
 8001dc8:	8183      	strh	r3, [r0, #12]
 8001dca:	2001      	movs	r0, #1
 8001dcc:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8001dd0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8001dd2:	480e      	ldr	r0, [pc, #56]	@ (8001e0c <rand+0x74>)
 8001dd4:	690b      	ldr	r3, [r1, #16]
 8001dd6:	694c      	ldr	r4, [r1, #20]
 8001dd8:	4358      	muls	r0, r3
 8001dda:	4a0d      	ldr	r2, [pc, #52]	@ (8001e10 <rand+0x78>)
 8001ddc:	fb02 0004 	mla	r0, r2, r4, r0
 8001de0:	fba3 3202 	umull	r3, r2, r3, r2
 8001de4:	3301      	adds	r3, #1
 8001de6:	eb40 0002 	adc.w	r0, r0, r2
 8001dea:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8001dee:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8001df2:	bd10      	pop	{r4, pc}
 8001df4:	20000018 	.word	0x20000018
 8001df8:	0800341c 	.word	0x0800341c
 8001dfc:	08003433 	.word	0x08003433
 8001e00:	abcd330e 	.word	0xabcd330e
 8001e04:	e66d1234 	.word	0xe66d1234
 8001e08:	0005deec 	.word	0x0005deec
 8001e0c:	5851f42d 	.word	0x5851f42d
 8001e10:	4c957f2d 	.word	0x4c957f2d

08001e14 <std>:
 8001e14:	2300      	movs	r3, #0
 8001e16:	b510      	push	{r4, lr}
 8001e18:	4604      	mov	r4, r0
 8001e1a:	e9c0 3300 	strd	r3, r3, [r0]
 8001e1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001e22:	6083      	str	r3, [r0, #8]
 8001e24:	8181      	strh	r1, [r0, #12]
 8001e26:	6643      	str	r3, [r0, #100]	@ 0x64
 8001e28:	81c2      	strh	r2, [r0, #14]
 8001e2a:	6183      	str	r3, [r0, #24]
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	2208      	movs	r2, #8
 8001e30:	305c      	adds	r0, #92	@ 0x5c
 8001e32:	f000 f914 	bl	800205e <memset>
 8001e36:	4b0d      	ldr	r3, [pc, #52]	@ (8001e6c <std+0x58>)
 8001e38:	6224      	str	r4, [r4, #32]
 8001e3a:	6263      	str	r3, [r4, #36]	@ 0x24
 8001e3c:	4b0c      	ldr	r3, [pc, #48]	@ (8001e70 <std+0x5c>)
 8001e3e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001e40:	4b0c      	ldr	r3, [pc, #48]	@ (8001e74 <std+0x60>)
 8001e42:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001e44:	4b0c      	ldr	r3, [pc, #48]	@ (8001e78 <std+0x64>)
 8001e46:	6323      	str	r3, [r4, #48]	@ 0x30
 8001e48:	4b0c      	ldr	r3, [pc, #48]	@ (8001e7c <std+0x68>)
 8001e4a:	429c      	cmp	r4, r3
 8001e4c:	d006      	beq.n	8001e5c <std+0x48>
 8001e4e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001e52:	4294      	cmp	r4, r2
 8001e54:	d002      	beq.n	8001e5c <std+0x48>
 8001e56:	33d0      	adds	r3, #208	@ 0xd0
 8001e58:	429c      	cmp	r4, r3
 8001e5a:	d105      	bne.n	8001e68 <std+0x54>
 8001e5c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001e60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001e64:	f000 b974 	b.w	8002150 <__retarget_lock_init_recursive>
 8001e68:	bd10      	pop	{r4, pc}
 8001e6a:	bf00      	nop
 8001e6c:	08001fd9 	.word	0x08001fd9
 8001e70:	08001ffb 	.word	0x08001ffb
 8001e74:	08002033 	.word	0x08002033
 8001e78:	08002057 	.word	0x08002057
 8001e7c:	20000188 	.word	0x20000188

08001e80 <stdio_exit_handler>:
 8001e80:	4a02      	ldr	r2, [pc, #8]	@ (8001e8c <stdio_exit_handler+0xc>)
 8001e82:	4903      	ldr	r1, [pc, #12]	@ (8001e90 <stdio_exit_handler+0x10>)
 8001e84:	4803      	ldr	r0, [pc, #12]	@ (8001e94 <stdio_exit_handler+0x14>)
 8001e86:	f000 b869 	b.w	8001f5c <_fwalk_sglue>
 8001e8a:	bf00      	nop
 8001e8c:	2000000c 	.word	0x2000000c
 8001e90:	08002a65 	.word	0x08002a65
 8001e94:	2000001c 	.word	0x2000001c

08001e98 <cleanup_stdio>:
 8001e98:	6841      	ldr	r1, [r0, #4]
 8001e9a:	4b0c      	ldr	r3, [pc, #48]	@ (8001ecc <cleanup_stdio+0x34>)
 8001e9c:	b510      	push	{r4, lr}
 8001e9e:	4299      	cmp	r1, r3
 8001ea0:	4604      	mov	r4, r0
 8001ea2:	d001      	beq.n	8001ea8 <cleanup_stdio+0x10>
 8001ea4:	f000 fdde 	bl	8002a64 <_fflush_r>
 8001ea8:	68a1      	ldr	r1, [r4, #8]
 8001eaa:	4b09      	ldr	r3, [pc, #36]	@ (8001ed0 <cleanup_stdio+0x38>)
 8001eac:	4299      	cmp	r1, r3
 8001eae:	d002      	beq.n	8001eb6 <cleanup_stdio+0x1e>
 8001eb0:	4620      	mov	r0, r4
 8001eb2:	f000 fdd7 	bl	8002a64 <_fflush_r>
 8001eb6:	68e1      	ldr	r1, [r4, #12]
 8001eb8:	4b06      	ldr	r3, [pc, #24]	@ (8001ed4 <cleanup_stdio+0x3c>)
 8001eba:	4299      	cmp	r1, r3
 8001ebc:	d004      	beq.n	8001ec8 <cleanup_stdio+0x30>
 8001ebe:	4620      	mov	r0, r4
 8001ec0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001ec4:	f000 bdce 	b.w	8002a64 <_fflush_r>
 8001ec8:	bd10      	pop	{r4, pc}
 8001eca:	bf00      	nop
 8001ecc:	20000188 	.word	0x20000188
 8001ed0:	200001f0 	.word	0x200001f0
 8001ed4:	20000258 	.word	0x20000258

08001ed8 <global_stdio_init.part.0>:
 8001ed8:	b510      	push	{r4, lr}
 8001eda:	4b0b      	ldr	r3, [pc, #44]	@ (8001f08 <global_stdio_init.part.0+0x30>)
 8001edc:	4c0b      	ldr	r4, [pc, #44]	@ (8001f0c <global_stdio_init.part.0+0x34>)
 8001ede:	4a0c      	ldr	r2, [pc, #48]	@ (8001f10 <global_stdio_init.part.0+0x38>)
 8001ee0:	4620      	mov	r0, r4
 8001ee2:	601a      	str	r2, [r3, #0]
 8001ee4:	2104      	movs	r1, #4
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	f7ff ff94 	bl	8001e14 <std>
 8001eec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	2109      	movs	r1, #9
 8001ef4:	f7ff ff8e 	bl	8001e14 <std>
 8001ef8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001efc:	2202      	movs	r2, #2
 8001efe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001f02:	2112      	movs	r1, #18
 8001f04:	f7ff bf86 	b.w	8001e14 <std>
 8001f08:	200002c0 	.word	0x200002c0
 8001f0c:	20000188 	.word	0x20000188
 8001f10:	08001e81 	.word	0x08001e81

08001f14 <__sfp_lock_acquire>:
 8001f14:	4801      	ldr	r0, [pc, #4]	@ (8001f1c <__sfp_lock_acquire+0x8>)
 8001f16:	f000 b91c 	b.w	8002152 <__retarget_lock_acquire_recursive>
 8001f1a:	bf00      	nop
 8001f1c:	200002c9 	.word	0x200002c9

08001f20 <__sfp_lock_release>:
 8001f20:	4801      	ldr	r0, [pc, #4]	@ (8001f28 <__sfp_lock_release+0x8>)
 8001f22:	f000 b917 	b.w	8002154 <__retarget_lock_release_recursive>
 8001f26:	bf00      	nop
 8001f28:	200002c9 	.word	0x200002c9

08001f2c <__sinit>:
 8001f2c:	b510      	push	{r4, lr}
 8001f2e:	4604      	mov	r4, r0
 8001f30:	f7ff fff0 	bl	8001f14 <__sfp_lock_acquire>
 8001f34:	6a23      	ldr	r3, [r4, #32]
 8001f36:	b11b      	cbz	r3, 8001f40 <__sinit+0x14>
 8001f38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001f3c:	f7ff bff0 	b.w	8001f20 <__sfp_lock_release>
 8001f40:	4b04      	ldr	r3, [pc, #16]	@ (8001f54 <__sinit+0x28>)
 8001f42:	6223      	str	r3, [r4, #32]
 8001f44:	4b04      	ldr	r3, [pc, #16]	@ (8001f58 <__sinit+0x2c>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d1f5      	bne.n	8001f38 <__sinit+0xc>
 8001f4c:	f7ff ffc4 	bl	8001ed8 <global_stdio_init.part.0>
 8001f50:	e7f2      	b.n	8001f38 <__sinit+0xc>
 8001f52:	bf00      	nop
 8001f54:	08001e99 	.word	0x08001e99
 8001f58:	200002c0 	.word	0x200002c0

08001f5c <_fwalk_sglue>:
 8001f5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001f60:	4607      	mov	r7, r0
 8001f62:	4688      	mov	r8, r1
 8001f64:	4614      	mov	r4, r2
 8001f66:	2600      	movs	r6, #0
 8001f68:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001f6c:	f1b9 0901 	subs.w	r9, r9, #1
 8001f70:	d505      	bpl.n	8001f7e <_fwalk_sglue+0x22>
 8001f72:	6824      	ldr	r4, [r4, #0]
 8001f74:	2c00      	cmp	r4, #0
 8001f76:	d1f7      	bne.n	8001f68 <_fwalk_sglue+0xc>
 8001f78:	4630      	mov	r0, r6
 8001f7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001f7e:	89ab      	ldrh	r3, [r5, #12]
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d907      	bls.n	8001f94 <_fwalk_sglue+0x38>
 8001f84:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001f88:	3301      	adds	r3, #1
 8001f8a:	d003      	beq.n	8001f94 <_fwalk_sglue+0x38>
 8001f8c:	4629      	mov	r1, r5
 8001f8e:	4638      	mov	r0, r7
 8001f90:	47c0      	blx	r8
 8001f92:	4306      	orrs	r6, r0
 8001f94:	3568      	adds	r5, #104	@ 0x68
 8001f96:	e7e9      	b.n	8001f6c <_fwalk_sglue+0x10>

08001f98 <siprintf>:
 8001f98:	b40e      	push	{r1, r2, r3}
 8001f9a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8001f9e:	b500      	push	{lr}
 8001fa0:	b09c      	sub	sp, #112	@ 0x70
 8001fa2:	ab1d      	add	r3, sp, #116	@ 0x74
 8001fa4:	9002      	str	r0, [sp, #8]
 8001fa6:	9006      	str	r0, [sp, #24]
 8001fa8:	9107      	str	r1, [sp, #28]
 8001faa:	9104      	str	r1, [sp, #16]
 8001fac:	4808      	ldr	r0, [pc, #32]	@ (8001fd0 <siprintf+0x38>)
 8001fae:	4909      	ldr	r1, [pc, #36]	@ (8001fd4 <siprintf+0x3c>)
 8001fb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8001fb4:	9105      	str	r1, [sp, #20]
 8001fb6:	6800      	ldr	r0, [r0, #0]
 8001fb8:	a902      	add	r1, sp, #8
 8001fba:	9301      	str	r3, [sp, #4]
 8001fbc:	f000 fa44 	bl	8002448 <_svfiprintf_r>
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	9b02      	ldr	r3, [sp, #8]
 8001fc4:	701a      	strb	r2, [r3, #0]
 8001fc6:	b01c      	add	sp, #112	@ 0x70
 8001fc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8001fcc:	b003      	add	sp, #12
 8001fce:	4770      	bx	lr
 8001fd0:	20000018 	.word	0x20000018
 8001fd4:	ffff0208 	.word	0xffff0208

08001fd8 <__sread>:
 8001fd8:	b510      	push	{r4, lr}
 8001fda:	460c      	mov	r4, r1
 8001fdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001fe0:	f000 f868 	bl	80020b4 <_read_r>
 8001fe4:	2800      	cmp	r0, #0
 8001fe6:	bfab      	itete	ge
 8001fe8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8001fea:	89a3      	ldrhlt	r3, [r4, #12]
 8001fec:	181b      	addge	r3, r3, r0
 8001fee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001ff2:	bfac      	ite	ge
 8001ff4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8001ff6:	81a3      	strhlt	r3, [r4, #12]
 8001ff8:	bd10      	pop	{r4, pc}

08001ffa <__swrite>:
 8001ffa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ffe:	461f      	mov	r7, r3
 8002000:	898b      	ldrh	r3, [r1, #12]
 8002002:	4605      	mov	r5, r0
 8002004:	05db      	lsls	r3, r3, #23
 8002006:	460c      	mov	r4, r1
 8002008:	4616      	mov	r6, r2
 800200a:	d505      	bpl.n	8002018 <__swrite+0x1e>
 800200c:	2302      	movs	r3, #2
 800200e:	2200      	movs	r2, #0
 8002010:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002014:	f000 f83c 	bl	8002090 <_lseek_r>
 8002018:	89a3      	ldrh	r3, [r4, #12]
 800201a:	4632      	mov	r2, r6
 800201c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002020:	81a3      	strh	r3, [r4, #12]
 8002022:	4628      	mov	r0, r5
 8002024:	463b      	mov	r3, r7
 8002026:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800202a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800202e:	f000 b853 	b.w	80020d8 <_write_r>

08002032 <__sseek>:
 8002032:	b510      	push	{r4, lr}
 8002034:	460c      	mov	r4, r1
 8002036:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800203a:	f000 f829 	bl	8002090 <_lseek_r>
 800203e:	1c43      	adds	r3, r0, #1
 8002040:	89a3      	ldrh	r3, [r4, #12]
 8002042:	bf15      	itete	ne
 8002044:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002046:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800204a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800204e:	81a3      	strheq	r3, [r4, #12]
 8002050:	bf18      	it	ne
 8002052:	81a3      	strhne	r3, [r4, #12]
 8002054:	bd10      	pop	{r4, pc}

08002056 <__sclose>:
 8002056:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800205a:	f000 b809 	b.w	8002070 <_close_r>

0800205e <memset>:
 800205e:	4603      	mov	r3, r0
 8002060:	4402      	add	r2, r0
 8002062:	4293      	cmp	r3, r2
 8002064:	d100      	bne.n	8002068 <memset+0xa>
 8002066:	4770      	bx	lr
 8002068:	f803 1b01 	strb.w	r1, [r3], #1
 800206c:	e7f9      	b.n	8002062 <memset+0x4>
	...

08002070 <_close_r>:
 8002070:	b538      	push	{r3, r4, r5, lr}
 8002072:	2300      	movs	r3, #0
 8002074:	4d05      	ldr	r5, [pc, #20]	@ (800208c <_close_r+0x1c>)
 8002076:	4604      	mov	r4, r0
 8002078:	4608      	mov	r0, r1
 800207a:	602b      	str	r3, [r5, #0]
 800207c:	f7fe fc5a 	bl	8000934 <_close>
 8002080:	1c43      	adds	r3, r0, #1
 8002082:	d102      	bne.n	800208a <_close_r+0x1a>
 8002084:	682b      	ldr	r3, [r5, #0]
 8002086:	b103      	cbz	r3, 800208a <_close_r+0x1a>
 8002088:	6023      	str	r3, [r4, #0]
 800208a:	bd38      	pop	{r3, r4, r5, pc}
 800208c:	200002c4 	.word	0x200002c4

08002090 <_lseek_r>:
 8002090:	b538      	push	{r3, r4, r5, lr}
 8002092:	4604      	mov	r4, r0
 8002094:	4608      	mov	r0, r1
 8002096:	4611      	mov	r1, r2
 8002098:	2200      	movs	r2, #0
 800209a:	4d05      	ldr	r5, [pc, #20]	@ (80020b0 <_lseek_r+0x20>)
 800209c:	602a      	str	r2, [r5, #0]
 800209e:	461a      	mov	r2, r3
 80020a0:	f7fe fc54 	bl	800094c <_lseek>
 80020a4:	1c43      	adds	r3, r0, #1
 80020a6:	d102      	bne.n	80020ae <_lseek_r+0x1e>
 80020a8:	682b      	ldr	r3, [r5, #0]
 80020aa:	b103      	cbz	r3, 80020ae <_lseek_r+0x1e>
 80020ac:	6023      	str	r3, [r4, #0]
 80020ae:	bd38      	pop	{r3, r4, r5, pc}
 80020b0:	200002c4 	.word	0x200002c4

080020b4 <_read_r>:
 80020b4:	b538      	push	{r3, r4, r5, lr}
 80020b6:	4604      	mov	r4, r0
 80020b8:	4608      	mov	r0, r1
 80020ba:	4611      	mov	r1, r2
 80020bc:	2200      	movs	r2, #0
 80020be:	4d05      	ldr	r5, [pc, #20]	@ (80020d4 <_read_r+0x20>)
 80020c0:	602a      	str	r2, [r5, #0]
 80020c2:	461a      	mov	r2, r3
 80020c4:	f7fe fc1a 	bl	80008fc <_read>
 80020c8:	1c43      	adds	r3, r0, #1
 80020ca:	d102      	bne.n	80020d2 <_read_r+0x1e>
 80020cc:	682b      	ldr	r3, [r5, #0]
 80020ce:	b103      	cbz	r3, 80020d2 <_read_r+0x1e>
 80020d0:	6023      	str	r3, [r4, #0]
 80020d2:	bd38      	pop	{r3, r4, r5, pc}
 80020d4:	200002c4 	.word	0x200002c4

080020d8 <_write_r>:
 80020d8:	b538      	push	{r3, r4, r5, lr}
 80020da:	4604      	mov	r4, r0
 80020dc:	4608      	mov	r0, r1
 80020de:	4611      	mov	r1, r2
 80020e0:	2200      	movs	r2, #0
 80020e2:	4d05      	ldr	r5, [pc, #20]	@ (80020f8 <_write_r+0x20>)
 80020e4:	602a      	str	r2, [r5, #0]
 80020e6:	461a      	mov	r2, r3
 80020e8:	f7fe fc16 	bl	8000918 <_write>
 80020ec:	1c43      	adds	r3, r0, #1
 80020ee:	d102      	bne.n	80020f6 <_write_r+0x1e>
 80020f0:	682b      	ldr	r3, [r5, #0]
 80020f2:	b103      	cbz	r3, 80020f6 <_write_r+0x1e>
 80020f4:	6023      	str	r3, [r4, #0]
 80020f6:	bd38      	pop	{r3, r4, r5, pc}
 80020f8:	200002c4 	.word	0x200002c4

080020fc <__errno>:
 80020fc:	4b01      	ldr	r3, [pc, #4]	@ (8002104 <__errno+0x8>)
 80020fe:	6818      	ldr	r0, [r3, #0]
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	20000018 	.word	0x20000018

08002108 <__libc_init_array>:
 8002108:	b570      	push	{r4, r5, r6, lr}
 800210a:	2600      	movs	r6, #0
 800210c:	4d0c      	ldr	r5, [pc, #48]	@ (8002140 <__libc_init_array+0x38>)
 800210e:	4c0d      	ldr	r4, [pc, #52]	@ (8002144 <__libc_init_array+0x3c>)
 8002110:	1b64      	subs	r4, r4, r5
 8002112:	10a4      	asrs	r4, r4, #2
 8002114:	42a6      	cmp	r6, r4
 8002116:	d109      	bne.n	800212c <__libc_init_array+0x24>
 8002118:	f000 fffc 	bl	8003114 <_init>
 800211c:	2600      	movs	r6, #0
 800211e:	4d0a      	ldr	r5, [pc, #40]	@ (8002148 <__libc_init_array+0x40>)
 8002120:	4c0a      	ldr	r4, [pc, #40]	@ (800214c <__libc_init_array+0x44>)
 8002122:	1b64      	subs	r4, r4, r5
 8002124:	10a4      	asrs	r4, r4, #2
 8002126:	42a6      	cmp	r6, r4
 8002128:	d105      	bne.n	8002136 <__libc_init_array+0x2e>
 800212a:	bd70      	pop	{r4, r5, r6, pc}
 800212c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002130:	4798      	blx	r3
 8002132:	3601      	adds	r6, #1
 8002134:	e7ee      	b.n	8002114 <__libc_init_array+0xc>
 8002136:	f855 3b04 	ldr.w	r3, [r5], #4
 800213a:	4798      	blx	r3
 800213c:	3601      	adds	r6, #1
 800213e:	e7f2      	b.n	8002126 <__libc_init_array+0x1e>
 8002140:	08003504 	.word	0x08003504
 8002144:	08003504 	.word	0x08003504
 8002148:	08003504 	.word	0x08003504
 800214c:	08003508 	.word	0x08003508

08002150 <__retarget_lock_init_recursive>:
 8002150:	4770      	bx	lr

08002152 <__retarget_lock_acquire_recursive>:
 8002152:	4770      	bx	lr

08002154 <__retarget_lock_release_recursive>:
 8002154:	4770      	bx	lr
	...

08002158 <__assert_func>:
 8002158:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800215a:	4614      	mov	r4, r2
 800215c:	461a      	mov	r2, r3
 800215e:	4b09      	ldr	r3, [pc, #36]	@ (8002184 <__assert_func+0x2c>)
 8002160:	4605      	mov	r5, r0
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	68d8      	ldr	r0, [r3, #12]
 8002166:	b954      	cbnz	r4, 800217e <__assert_func+0x26>
 8002168:	4b07      	ldr	r3, [pc, #28]	@ (8002188 <__assert_func+0x30>)
 800216a:	461c      	mov	r4, r3
 800216c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8002170:	9100      	str	r1, [sp, #0]
 8002172:	462b      	mov	r3, r5
 8002174:	4905      	ldr	r1, [pc, #20]	@ (800218c <__assert_func+0x34>)
 8002176:	f000 fc9d 	bl	8002ab4 <fiprintf>
 800217a:	f000 fcf3 	bl	8002b64 <abort>
 800217e:	4b04      	ldr	r3, [pc, #16]	@ (8002190 <__assert_func+0x38>)
 8002180:	e7f4      	b.n	800216c <__assert_func+0x14>
 8002182:	bf00      	nop
 8002184:	20000018 	.word	0x20000018
 8002188:	080034c6 	.word	0x080034c6
 800218c:	08003498 	.word	0x08003498
 8002190:	0800348b 	.word	0x0800348b

08002194 <_free_r>:
 8002194:	b538      	push	{r3, r4, r5, lr}
 8002196:	4605      	mov	r5, r0
 8002198:	2900      	cmp	r1, #0
 800219a:	d040      	beq.n	800221e <_free_r+0x8a>
 800219c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80021a0:	1f0c      	subs	r4, r1, #4
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	bfb8      	it	lt
 80021a6:	18e4      	addlt	r4, r4, r3
 80021a8:	f000 f8e6 	bl	8002378 <__malloc_lock>
 80021ac:	4a1c      	ldr	r2, [pc, #112]	@ (8002220 <_free_r+0x8c>)
 80021ae:	6813      	ldr	r3, [r2, #0]
 80021b0:	b933      	cbnz	r3, 80021c0 <_free_r+0x2c>
 80021b2:	6063      	str	r3, [r4, #4]
 80021b4:	6014      	str	r4, [r2, #0]
 80021b6:	4628      	mov	r0, r5
 80021b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80021bc:	f000 b8e2 	b.w	8002384 <__malloc_unlock>
 80021c0:	42a3      	cmp	r3, r4
 80021c2:	d908      	bls.n	80021d6 <_free_r+0x42>
 80021c4:	6820      	ldr	r0, [r4, #0]
 80021c6:	1821      	adds	r1, r4, r0
 80021c8:	428b      	cmp	r3, r1
 80021ca:	bf01      	itttt	eq
 80021cc:	6819      	ldreq	r1, [r3, #0]
 80021ce:	685b      	ldreq	r3, [r3, #4]
 80021d0:	1809      	addeq	r1, r1, r0
 80021d2:	6021      	streq	r1, [r4, #0]
 80021d4:	e7ed      	b.n	80021b2 <_free_r+0x1e>
 80021d6:	461a      	mov	r2, r3
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	b10b      	cbz	r3, 80021e0 <_free_r+0x4c>
 80021dc:	42a3      	cmp	r3, r4
 80021de:	d9fa      	bls.n	80021d6 <_free_r+0x42>
 80021e0:	6811      	ldr	r1, [r2, #0]
 80021e2:	1850      	adds	r0, r2, r1
 80021e4:	42a0      	cmp	r0, r4
 80021e6:	d10b      	bne.n	8002200 <_free_r+0x6c>
 80021e8:	6820      	ldr	r0, [r4, #0]
 80021ea:	4401      	add	r1, r0
 80021ec:	1850      	adds	r0, r2, r1
 80021ee:	4283      	cmp	r3, r0
 80021f0:	6011      	str	r1, [r2, #0]
 80021f2:	d1e0      	bne.n	80021b6 <_free_r+0x22>
 80021f4:	6818      	ldr	r0, [r3, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	4408      	add	r0, r1
 80021fa:	6010      	str	r0, [r2, #0]
 80021fc:	6053      	str	r3, [r2, #4]
 80021fe:	e7da      	b.n	80021b6 <_free_r+0x22>
 8002200:	d902      	bls.n	8002208 <_free_r+0x74>
 8002202:	230c      	movs	r3, #12
 8002204:	602b      	str	r3, [r5, #0]
 8002206:	e7d6      	b.n	80021b6 <_free_r+0x22>
 8002208:	6820      	ldr	r0, [r4, #0]
 800220a:	1821      	adds	r1, r4, r0
 800220c:	428b      	cmp	r3, r1
 800220e:	bf01      	itttt	eq
 8002210:	6819      	ldreq	r1, [r3, #0]
 8002212:	685b      	ldreq	r3, [r3, #4]
 8002214:	1809      	addeq	r1, r1, r0
 8002216:	6021      	streq	r1, [r4, #0]
 8002218:	6063      	str	r3, [r4, #4]
 800221a:	6054      	str	r4, [r2, #4]
 800221c:	e7cb      	b.n	80021b6 <_free_r+0x22>
 800221e:	bd38      	pop	{r3, r4, r5, pc}
 8002220:	200002d0 	.word	0x200002d0

08002224 <malloc>:
 8002224:	4b02      	ldr	r3, [pc, #8]	@ (8002230 <malloc+0xc>)
 8002226:	4601      	mov	r1, r0
 8002228:	6818      	ldr	r0, [r3, #0]
 800222a:	f000 b825 	b.w	8002278 <_malloc_r>
 800222e:	bf00      	nop
 8002230:	20000018 	.word	0x20000018

08002234 <sbrk_aligned>:
 8002234:	b570      	push	{r4, r5, r6, lr}
 8002236:	4e0f      	ldr	r6, [pc, #60]	@ (8002274 <sbrk_aligned+0x40>)
 8002238:	460c      	mov	r4, r1
 800223a:	6831      	ldr	r1, [r6, #0]
 800223c:	4605      	mov	r5, r0
 800223e:	b911      	cbnz	r1, 8002246 <sbrk_aligned+0x12>
 8002240:	f000 fc64 	bl	8002b0c <_sbrk_r>
 8002244:	6030      	str	r0, [r6, #0]
 8002246:	4621      	mov	r1, r4
 8002248:	4628      	mov	r0, r5
 800224a:	f000 fc5f 	bl	8002b0c <_sbrk_r>
 800224e:	1c43      	adds	r3, r0, #1
 8002250:	d103      	bne.n	800225a <sbrk_aligned+0x26>
 8002252:	f04f 34ff 	mov.w	r4, #4294967295
 8002256:	4620      	mov	r0, r4
 8002258:	bd70      	pop	{r4, r5, r6, pc}
 800225a:	1cc4      	adds	r4, r0, #3
 800225c:	f024 0403 	bic.w	r4, r4, #3
 8002260:	42a0      	cmp	r0, r4
 8002262:	d0f8      	beq.n	8002256 <sbrk_aligned+0x22>
 8002264:	1a21      	subs	r1, r4, r0
 8002266:	4628      	mov	r0, r5
 8002268:	f000 fc50 	bl	8002b0c <_sbrk_r>
 800226c:	3001      	adds	r0, #1
 800226e:	d1f2      	bne.n	8002256 <sbrk_aligned+0x22>
 8002270:	e7ef      	b.n	8002252 <sbrk_aligned+0x1e>
 8002272:	bf00      	nop
 8002274:	200002cc 	.word	0x200002cc

08002278 <_malloc_r>:
 8002278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800227c:	1ccd      	adds	r5, r1, #3
 800227e:	f025 0503 	bic.w	r5, r5, #3
 8002282:	3508      	adds	r5, #8
 8002284:	2d0c      	cmp	r5, #12
 8002286:	bf38      	it	cc
 8002288:	250c      	movcc	r5, #12
 800228a:	2d00      	cmp	r5, #0
 800228c:	4606      	mov	r6, r0
 800228e:	db01      	blt.n	8002294 <_malloc_r+0x1c>
 8002290:	42a9      	cmp	r1, r5
 8002292:	d904      	bls.n	800229e <_malloc_r+0x26>
 8002294:	230c      	movs	r3, #12
 8002296:	6033      	str	r3, [r6, #0]
 8002298:	2000      	movs	r0, #0
 800229a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800229e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002374 <_malloc_r+0xfc>
 80022a2:	f000 f869 	bl	8002378 <__malloc_lock>
 80022a6:	f8d8 3000 	ldr.w	r3, [r8]
 80022aa:	461c      	mov	r4, r3
 80022ac:	bb44      	cbnz	r4, 8002300 <_malloc_r+0x88>
 80022ae:	4629      	mov	r1, r5
 80022b0:	4630      	mov	r0, r6
 80022b2:	f7ff ffbf 	bl	8002234 <sbrk_aligned>
 80022b6:	1c43      	adds	r3, r0, #1
 80022b8:	4604      	mov	r4, r0
 80022ba:	d158      	bne.n	800236e <_malloc_r+0xf6>
 80022bc:	f8d8 4000 	ldr.w	r4, [r8]
 80022c0:	4627      	mov	r7, r4
 80022c2:	2f00      	cmp	r7, #0
 80022c4:	d143      	bne.n	800234e <_malloc_r+0xd6>
 80022c6:	2c00      	cmp	r4, #0
 80022c8:	d04b      	beq.n	8002362 <_malloc_r+0xea>
 80022ca:	6823      	ldr	r3, [r4, #0]
 80022cc:	4639      	mov	r1, r7
 80022ce:	4630      	mov	r0, r6
 80022d0:	eb04 0903 	add.w	r9, r4, r3
 80022d4:	f000 fc1a 	bl	8002b0c <_sbrk_r>
 80022d8:	4581      	cmp	r9, r0
 80022da:	d142      	bne.n	8002362 <_malloc_r+0xea>
 80022dc:	6821      	ldr	r1, [r4, #0]
 80022de:	4630      	mov	r0, r6
 80022e0:	1a6d      	subs	r5, r5, r1
 80022e2:	4629      	mov	r1, r5
 80022e4:	f7ff ffa6 	bl	8002234 <sbrk_aligned>
 80022e8:	3001      	adds	r0, #1
 80022ea:	d03a      	beq.n	8002362 <_malloc_r+0xea>
 80022ec:	6823      	ldr	r3, [r4, #0]
 80022ee:	442b      	add	r3, r5
 80022f0:	6023      	str	r3, [r4, #0]
 80022f2:	f8d8 3000 	ldr.w	r3, [r8]
 80022f6:	685a      	ldr	r2, [r3, #4]
 80022f8:	bb62      	cbnz	r2, 8002354 <_malloc_r+0xdc>
 80022fa:	f8c8 7000 	str.w	r7, [r8]
 80022fe:	e00f      	b.n	8002320 <_malloc_r+0xa8>
 8002300:	6822      	ldr	r2, [r4, #0]
 8002302:	1b52      	subs	r2, r2, r5
 8002304:	d420      	bmi.n	8002348 <_malloc_r+0xd0>
 8002306:	2a0b      	cmp	r2, #11
 8002308:	d917      	bls.n	800233a <_malloc_r+0xc2>
 800230a:	1961      	adds	r1, r4, r5
 800230c:	42a3      	cmp	r3, r4
 800230e:	6025      	str	r5, [r4, #0]
 8002310:	bf18      	it	ne
 8002312:	6059      	strne	r1, [r3, #4]
 8002314:	6863      	ldr	r3, [r4, #4]
 8002316:	bf08      	it	eq
 8002318:	f8c8 1000 	streq.w	r1, [r8]
 800231c:	5162      	str	r2, [r4, r5]
 800231e:	604b      	str	r3, [r1, #4]
 8002320:	4630      	mov	r0, r6
 8002322:	f000 f82f 	bl	8002384 <__malloc_unlock>
 8002326:	f104 000b 	add.w	r0, r4, #11
 800232a:	1d23      	adds	r3, r4, #4
 800232c:	f020 0007 	bic.w	r0, r0, #7
 8002330:	1ac2      	subs	r2, r0, r3
 8002332:	bf1c      	itt	ne
 8002334:	1a1b      	subne	r3, r3, r0
 8002336:	50a3      	strne	r3, [r4, r2]
 8002338:	e7af      	b.n	800229a <_malloc_r+0x22>
 800233a:	6862      	ldr	r2, [r4, #4]
 800233c:	42a3      	cmp	r3, r4
 800233e:	bf0c      	ite	eq
 8002340:	f8c8 2000 	streq.w	r2, [r8]
 8002344:	605a      	strne	r2, [r3, #4]
 8002346:	e7eb      	b.n	8002320 <_malloc_r+0xa8>
 8002348:	4623      	mov	r3, r4
 800234a:	6864      	ldr	r4, [r4, #4]
 800234c:	e7ae      	b.n	80022ac <_malloc_r+0x34>
 800234e:	463c      	mov	r4, r7
 8002350:	687f      	ldr	r7, [r7, #4]
 8002352:	e7b6      	b.n	80022c2 <_malloc_r+0x4a>
 8002354:	461a      	mov	r2, r3
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	42a3      	cmp	r3, r4
 800235a:	d1fb      	bne.n	8002354 <_malloc_r+0xdc>
 800235c:	2300      	movs	r3, #0
 800235e:	6053      	str	r3, [r2, #4]
 8002360:	e7de      	b.n	8002320 <_malloc_r+0xa8>
 8002362:	230c      	movs	r3, #12
 8002364:	4630      	mov	r0, r6
 8002366:	6033      	str	r3, [r6, #0]
 8002368:	f000 f80c 	bl	8002384 <__malloc_unlock>
 800236c:	e794      	b.n	8002298 <_malloc_r+0x20>
 800236e:	6005      	str	r5, [r0, #0]
 8002370:	e7d6      	b.n	8002320 <_malloc_r+0xa8>
 8002372:	bf00      	nop
 8002374:	200002d0 	.word	0x200002d0

08002378 <__malloc_lock>:
 8002378:	4801      	ldr	r0, [pc, #4]	@ (8002380 <__malloc_lock+0x8>)
 800237a:	f7ff beea 	b.w	8002152 <__retarget_lock_acquire_recursive>
 800237e:	bf00      	nop
 8002380:	200002c8 	.word	0x200002c8

08002384 <__malloc_unlock>:
 8002384:	4801      	ldr	r0, [pc, #4]	@ (800238c <__malloc_unlock+0x8>)
 8002386:	f7ff bee5 	b.w	8002154 <__retarget_lock_release_recursive>
 800238a:	bf00      	nop
 800238c:	200002c8 	.word	0x200002c8

08002390 <__ssputs_r>:
 8002390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002394:	461f      	mov	r7, r3
 8002396:	688e      	ldr	r6, [r1, #8]
 8002398:	4682      	mov	sl, r0
 800239a:	42be      	cmp	r6, r7
 800239c:	460c      	mov	r4, r1
 800239e:	4690      	mov	r8, r2
 80023a0:	680b      	ldr	r3, [r1, #0]
 80023a2:	d82d      	bhi.n	8002400 <__ssputs_r+0x70>
 80023a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80023a8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80023ac:	d026      	beq.n	80023fc <__ssputs_r+0x6c>
 80023ae:	6965      	ldr	r5, [r4, #20]
 80023b0:	6909      	ldr	r1, [r1, #16]
 80023b2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80023b6:	eba3 0901 	sub.w	r9, r3, r1
 80023ba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80023be:	1c7b      	adds	r3, r7, #1
 80023c0:	444b      	add	r3, r9
 80023c2:	106d      	asrs	r5, r5, #1
 80023c4:	429d      	cmp	r5, r3
 80023c6:	bf38      	it	cc
 80023c8:	461d      	movcc	r5, r3
 80023ca:	0553      	lsls	r3, r2, #21
 80023cc:	d527      	bpl.n	800241e <__ssputs_r+0x8e>
 80023ce:	4629      	mov	r1, r5
 80023d0:	f7ff ff52 	bl	8002278 <_malloc_r>
 80023d4:	4606      	mov	r6, r0
 80023d6:	b360      	cbz	r0, 8002432 <__ssputs_r+0xa2>
 80023d8:	464a      	mov	r2, r9
 80023da:	6921      	ldr	r1, [r4, #16]
 80023dc:	f000 fbb4 	bl	8002b48 <memcpy>
 80023e0:	89a3      	ldrh	r3, [r4, #12]
 80023e2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80023e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80023ea:	81a3      	strh	r3, [r4, #12]
 80023ec:	6126      	str	r6, [r4, #16]
 80023ee:	444e      	add	r6, r9
 80023f0:	6026      	str	r6, [r4, #0]
 80023f2:	463e      	mov	r6, r7
 80023f4:	6165      	str	r5, [r4, #20]
 80023f6:	eba5 0509 	sub.w	r5, r5, r9
 80023fa:	60a5      	str	r5, [r4, #8]
 80023fc:	42be      	cmp	r6, r7
 80023fe:	d900      	bls.n	8002402 <__ssputs_r+0x72>
 8002400:	463e      	mov	r6, r7
 8002402:	4632      	mov	r2, r6
 8002404:	4641      	mov	r1, r8
 8002406:	6820      	ldr	r0, [r4, #0]
 8002408:	f000 fb66 	bl	8002ad8 <memmove>
 800240c:	2000      	movs	r0, #0
 800240e:	68a3      	ldr	r3, [r4, #8]
 8002410:	1b9b      	subs	r3, r3, r6
 8002412:	60a3      	str	r3, [r4, #8]
 8002414:	6823      	ldr	r3, [r4, #0]
 8002416:	4433      	add	r3, r6
 8002418:	6023      	str	r3, [r4, #0]
 800241a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800241e:	462a      	mov	r2, r5
 8002420:	f000 fba7 	bl	8002b72 <_realloc_r>
 8002424:	4606      	mov	r6, r0
 8002426:	2800      	cmp	r0, #0
 8002428:	d1e0      	bne.n	80023ec <__ssputs_r+0x5c>
 800242a:	4650      	mov	r0, sl
 800242c:	6921      	ldr	r1, [r4, #16]
 800242e:	f7ff feb1 	bl	8002194 <_free_r>
 8002432:	230c      	movs	r3, #12
 8002434:	f8ca 3000 	str.w	r3, [sl]
 8002438:	89a3      	ldrh	r3, [r4, #12]
 800243a:	f04f 30ff 	mov.w	r0, #4294967295
 800243e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002442:	81a3      	strh	r3, [r4, #12]
 8002444:	e7e9      	b.n	800241a <__ssputs_r+0x8a>
	...

08002448 <_svfiprintf_r>:
 8002448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800244c:	4698      	mov	r8, r3
 800244e:	898b      	ldrh	r3, [r1, #12]
 8002450:	4607      	mov	r7, r0
 8002452:	061b      	lsls	r3, r3, #24
 8002454:	460d      	mov	r5, r1
 8002456:	4614      	mov	r4, r2
 8002458:	b09d      	sub	sp, #116	@ 0x74
 800245a:	d510      	bpl.n	800247e <_svfiprintf_r+0x36>
 800245c:	690b      	ldr	r3, [r1, #16]
 800245e:	b973      	cbnz	r3, 800247e <_svfiprintf_r+0x36>
 8002460:	2140      	movs	r1, #64	@ 0x40
 8002462:	f7ff ff09 	bl	8002278 <_malloc_r>
 8002466:	6028      	str	r0, [r5, #0]
 8002468:	6128      	str	r0, [r5, #16]
 800246a:	b930      	cbnz	r0, 800247a <_svfiprintf_r+0x32>
 800246c:	230c      	movs	r3, #12
 800246e:	603b      	str	r3, [r7, #0]
 8002470:	f04f 30ff 	mov.w	r0, #4294967295
 8002474:	b01d      	add	sp, #116	@ 0x74
 8002476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800247a:	2340      	movs	r3, #64	@ 0x40
 800247c:	616b      	str	r3, [r5, #20]
 800247e:	2300      	movs	r3, #0
 8002480:	9309      	str	r3, [sp, #36]	@ 0x24
 8002482:	2320      	movs	r3, #32
 8002484:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002488:	2330      	movs	r3, #48	@ 0x30
 800248a:	f04f 0901 	mov.w	r9, #1
 800248e:	f8cd 800c 	str.w	r8, [sp, #12]
 8002492:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800262c <_svfiprintf_r+0x1e4>
 8002496:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800249a:	4623      	mov	r3, r4
 800249c:	469a      	mov	sl, r3
 800249e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80024a2:	b10a      	cbz	r2, 80024a8 <_svfiprintf_r+0x60>
 80024a4:	2a25      	cmp	r2, #37	@ 0x25
 80024a6:	d1f9      	bne.n	800249c <_svfiprintf_r+0x54>
 80024a8:	ebba 0b04 	subs.w	fp, sl, r4
 80024ac:	d00b      	beq.n	80024c6 <_svfiprintf_r+0x7e>
 80024ae:	465b      	mov	r3, fp
 80024b0:	4622      	mov	r2, r4
 80024b2:	4629      	mov	r1, r5
 80024b4:	4638      	mov	r0, r7
 80024b6:	f7ff ff6b 	bl	8002390 <__ssputs_r>
 80024ba:	3001      	adds	r0, #1
 80024bc:	f000 80a7 	beq.w	800260e <_svfiprintf_r+0x1c6>
 80024c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80024c2:	445a      	add	r2, fp
 80024c4:	9209      	str	r2, [sp, #36]	@ 0x24
 80024c6:	f89a 3000 	ldrb.w	r3, [sl]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	f000 809f 	beq.w	800260e <_svfiprintf_r+0x1c6>
 80024d0:	2300      	movs	r3, #0
 80024d2:	f04f 32ff 	mov.w	r2, #4294967295
 80024d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80024da:	f10a 0a01 	add.w	sl, sl, #1
 80024de:	9304      	str	r3, [sp, #16]
 80024e0:	9307      	str	r3, [sp, #28]
 80024e2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80024e6:	931a      	str	r3, [sp, #104]	@ 0x68
 80024e8:	4654      	mov	r4, sl
 80024ea:	2205      	movs	r2, #5
 80024ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80024f0:	484e      	ldr	r0, [pc, #312]	@ (800262c <_svfiprintf_r+0x1e4>)
 80024f2:	f000 fb1b 	bl	8002b2c <memchr>
 80024f6:	9a04      	ldr	r2, [sp, #16]
 80024f8:	b9d8      	cbnz	r0, 8002532 <_svfiprintf_r+0xea>
 80024fa:	06d0      	lsls	r0, r2, #27
 80024fc:	bf44      	itt	mi
 80024fe:	2320      	movmi	r3, #32
 8002500:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002504:	0711      	lsls	r1, r2, #28
 8002506:	bf44      	itt	mi
 8002508:	232b      	movmi	r3, #43	@ 0x2b
 800250a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800250e:	f89a 3000 	ldrb.w	r3, [sl]
 8002512:	2b2a      	cmp	r3, #42	@ 0x2a
 8002514:	d015      	beq.n	8002542 <_svfiprintf_r+0xfa>
 8002516:	4654      	mov	r4, sl
 8002518:	2000      	movs	r0, #0
 800251a:	f04f 0c0a 	mov.w	ip, #10
 800251e:	9a07      	ldr	r2, [sp, #28]
 8002520:	4621      	mov	r1, r4
 8002522:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002526:	3b30      	subs	r3, #48	@ 0x30
 8002528:	2b09      	cmp	r3, #9
 800252a:	d94b      	bls.n	80025c4 <_svfiprintf_r+0x17c>
 800252c:	b1b0      	cbz	r0, 800255c <_svfiprintf_r+0x114>
 800252e:	9207      	str	r2, [sp, #28]
 8002530:	e014      	b.n	800255c <_svfiprintf_r+0x114>
 8002532:	eba0 0308 	sub.w	r3, r0, r8
 8002536:	fa09 f303 	lsl.w	r3, r9, r3
 800253a:	4313      	orrs	r3, r2
 800253c:	46a2      	mov	sl, r4
 800253e:	9304      	str	r3, [sp, #16]
 8002540:	e7d2      	b.n	80024e8 <_svfiprintf_r+0xa0>
 8002542:	9b03      	ldr	r3, [sp, #12]
 8002544:	1d19      	adds	r1, r3, #4
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	9103      	str	r1, [sp, #12]
 800254a:	2b00      	cmp	r3, #0
 800254c:	bfbb      	ittet	lt
 800254e:	425b      	neglt	r3, r3
 8002550:	f042 0202 	orrlt.w	r2, r2, #2
 8002554:	9307      	strge	r3, [sp, #28]
 8002556:	9307      	strlt	r3, [sp, #28]
 8002558:	bfb8      	it	lt
 800255a:	9204      	strlt	r2, [sp, #16]
 800255c:	7823      	ldrb	r3, [r4, #0]
 800255e:	2b2e      	cmp	r3, #46	@ 0x2e
 8002560:	d10a      	bne.n	8002578 <_svfiprintf_r+0x130>
 8002562:	7863      	ldrb	r3, [r4, #1]
 8002564:	2b2a      	cmp	r3, #42	@ 0x2a
 8002566:	d132      	bne.n	80025ce <_svfiprintf_r+0x186>
 8002568:	9b03      	ldr	r3, [sp, #12]
 800256a:	3402      	adds	r4, #2
 800256c:	1d1a      	adds	r2, r3, #4
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	9203      	str	r2, [sp, #12]
 8002572:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002576:	9305      	str	r3, [sp, #20]
 8002578:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8002630 <_svfiprintf_r+0x1e8>
 800257c:	2203      	movs	r2, #3
 800257e:	4650      	mov	r0, sl
 8002580:	7821      	ldrb	r1, [r4, #0]
 8002582:	f000 fad3 	bl	8002b2c <memchr>
 8002586:	b138      	cbz	r0, 8002598 <_svfiprintf_r+0x150>
 8002588:	2240      	movs	r2, #64	@ 0x40
 800258a:	9b04      	ldr	r3, [sp, #16]
 800258c:	eba0 000a 	sub.w	r0, r0, sl
 8002590:	4082      	lsls	r2, r0
 8002592:	4313      	orrs	r3, r2
 8002594:	3401      	adds	r4, #1
 8002596:	9304      	str	r3, [sp, #16]
 8002598:	f814 1b01 	ldrb.w	r1, [r4], #1
 800259c:	2206      	movs	r2, #6
 800259e:	4825      	ldr	r0, [pc, #148]	@ (8002634 <_svfiprintf_r+0x1ec>)
 80025a0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80025a4:	f000 fac2 	bl	8002b2c <memchr>
 80025a8:	2800      	cmp	r0, #0
 80025aa:	d036      	beq.n	800261a <_svfiprintf_r+0x1d2>
 80025ac:	4b22      	ldr	r3, [pc, #136]	@ (8002638 <_svfiprintf_r+0x1f0>)
 80025ae:	bb1b      	cbnz	r3, 80025f8 <_svfiprintf_r+0x1b0>
 80025b0:	9b03      	ldr	r3, [sp, #12]
 80025b2:	3307      	adds	r3, #7
 80025b4:	f023 0307 	bic.w	r3, r3, #7
 80025b8:	3308      	adds	r3, #8
 80025ba:	9303      	str	r3, [sp, #12]
 80025bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80025be:	4433      	add	r3, r6
 80025c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80025c2:	e76a      	b.n	800249a <_svfiprintf_r+0x52>
 80025c4:	460c      	mov	r4, r1
 80025c6:	2001      	movs	r0, #1
 80025c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80025cc:	e7a8      	b.n	8002520 <_svfiprintf_r+0xd8>
 80025ce:	2300      	movs	r3, #0
 80025d0:	f04f 0c0a 	mov.w	ip, #10
 80025d4:	4619      	mov	r1, r3
 80025d6:	3401      	adds	r4, #1
 80025d8:	9305      	str	r3, [sp, #20]
 80025da:	4620      	mov	r0, r4
 80025dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80025e0:	3a30      	subs	r2, #48	@ 0x30
 80025e2:	2a09      	cmp	r2, #9
 80025e4:	d903      	bls.n	80025ee <_svfiprintf_r+0x1a6>
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d0c6      	beq.n	8002578 <_svfiprintf_r+0x130>
 80025ea:	9105      	str	r1, [sp, #20]
 80025ec:	e7c4      	b.n	8002578 <_svfiprintf_r+0x130>
 80025ee:	4604      	mov	r4, r0
 80025f0:	2301      	movs	r3, #1
 80025f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80025f6:	e7f0      	b.n	80025da <_svfiprintf_r+0x192>
 80025f8:	ab03      	add	r3, sp, #12
 80025fa:	9300      	str	r3, [sp, #0]
 80025fc:	462a      	mov	r2, r5
 80025fe:	4638      	mov	r0, r7
 8002600:	4b0e      	ldr	r3, [pc, #56]	@ (800263c <_svfiprintf_r+0x1f4>)
 8002602:	a904      	add	r1, sp, #16
 8002604:	f3af 8000 	nop.w
 8002608:	1c42      	adds	r2, r0, #1
 800260a:	4606      	mov	r6, r0
 800260c:	d1d6      	bne.n	80025bc <_svfiprintf_r+0x174>
 800260e:	89ab      	ldrh	r3, [r5, #12]
 8002610:	065b      	lsls	r3, r3, #25
 8002612:	f53f af2d 	bmi.w	8002470 <_svfiprintf_r+0x28>
 8002616:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002618:	e72c      	b.n	8002474 <_svfiprintf_r+0x2c>
 800261a:	ab03      	add	r3, sp, #12
 800261c:	9300      	str	r3, [sp, #0]
 800261e:	462a      	mov	r2, r5
 8002620:	4638      	mov	r0, r7
 8002622:	4b06      	ldr	r3, [pc, #24]	@ (800263c <_svfiprintf_r+0x1f4>)
 8002624:	a904      	add	r1, sp, #16
 8002626:	f000 f87d 	bl	8002724 <_printf_i>
 800262a:	e7ed      	b.n	8002608 <_svfiprintf_r+0x1c0>
 800262c:	080034c7 	.word	0x080034c7
 8002630:	080034cd 	.word	0x080034cd
 8002634:	080034d1 	.word	0x080034d1
 8002638:	00000000 	.word	0x00000000
 800263c:	08002391 	.word	0x08002391

08002640 <_printf_common>:
 8002640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002644:	4616      	mov	r6, r2
 8002646:	4698      	mov	r8, r3
 8002648:	688a      	ldr	r2, [r1, #8]
 800264a:	690b      	ldr	r3, [r1, #16]
 800264c:	4607      	mov	r7, r0
 800264e:	4293      	cmp	r3, r2
 8002650:	bfb8      	it	lt
 8002652:	4613      	movlt	r3, r2
 8002654:	6033      	str	r3, [r6, #0]
 8002656:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800265a:	460c      	mov	r4, r1
 800265c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002660:	b10a      	cbz	r2, 8002666 <_printf_common+0x26>
 8002662:	3301      	adds	r3, #1
 8002664:	6033      	str	r3, [r6, #0]
 8002666:	6823      	ldr	r3, [r4, #0]
 8002668:	0699      	lsls	r1, r3, #26
 800266a:	bf42      	ittt	mi
 800266c:	6833      	ldrmi	r3, [r6, #0]
 800266e:	3302      	addmi	r3, #2
 8002670:	6033      	strmi	r3, [r6, #0]
 8002672:	6825      	ldr	r5, [r4, #0]
 8002674:	f015 0506 	ands.w	r5, r5, #6
 8002678:	d106      	bne.n	8002688 <_printf_common+0x48>
 800267a:	f104 0a19 	add.w	sl, r4, #25
 800267e:	68e3      	ldr	r3, [r4, #12]
 8002680:	6832      	ldr	r2, [r6, #0]
 8002682:	1a9b      	subs	r3, r3, r2
 8002684:	42ab      	cmp	r3, r5
 8002686:	dc2b      	bgt.n	80026e0 <_printf_common+0xa0>
 8002688:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800268c:	6822      	ldr	r2, [r4, #0]
 800268e:	3b00      	subs	r3, #0
 8002690:	bf18      	it	ne
 8002692:	2301      	movne	r3, #1
 8002694:	0692      	lsls	r2, r2, #26
 8002696:	d430      	bmi.n	80026fa <_printf_common+0xba>
 8002698:	4641      	mov	r1, r8
 800269a:	4638      	mov	r0, r7
 800269c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80026a0:	47c8      	blx	r9
 80026a2:	3001      	adds	r0, #1
 80026a4:	d023      	beq.n	80026ee <_printf_common+0xae>
 80026a6:	6823      	ldr	r3, [r4, #0]
 80026a8:	6922      	ldr	r2, [r4, #16]
 80026aa:	f003 0306 	and.w	r3, r3, #6
 80026ae:	2b04      	cmp	r3, #4
 80026b0:	bf14      	ite	ne
 80026b2:	2500      	movne	r5, #0
 80026b4:	6833      	ldreq	r3, [r6, #0]
 80026b6:	f04f 0600 	mov.w	r6, #0
 80026ba:	bf08      	it	eq
 80026bc:	68e5      	ldreq	r5, [r4, #12]
 80026be:	f104 041a 	add.w	r4, r4, #26
 80026c2:	bf08      	it	eq
 80026c4:	1aed      	subeq	r5, r5, r3
 80026c6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80026ca:	bf08      	it	eq
 80026cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80026d0:	4293      	cmp	r3, r2
 80026d2:	bfc4      	itt	gt
 80026d4:	1a9b      	subgt	r3, r3, r2
 80026d6:	18ed      	addgt	r5, r5, r3
 80026d8:	42b5      	cmp	r5, r6
 80026da:	d11a      	bne.n	8002712 <_printf_common+0xd2>
 80026dc:	2000      	movs	r0, #0
 80026de:	e008      	b.n	80026f2 <_printf_common+0xb2>
 80026e0:	2301      	movs	r3, #1
 80026e2:	4652      	mov	r2, sl
 80026e4:	4641      	mov	r1, r8
 80026e6:	4638      	mov	r0, r7
 80026e8:	47c8      	blx	r9
 80026ea:	3001      	adds	r0, #1
 80026ec:	d103      	bne.n	80026f6 <_printf_common+0xb6>
 80026ee:	f04f 30ff 	mov.w	r0, #4294967295
 80026f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80026f6:	3501      	adds	r5, #1
 80026f8:	e7c1      	b.n	800267e <_printf_common+0x3e>
 80026fa:	2030      	movs	r0, #48	@ 0x30
 80026fc:	18e1      	adds	r1, r4, r3
 80026fe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002702:	1c5a      	adds	r2, r3, #1
 8002704:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002708:	4422      	add	r2, r4
 800270a:	3302      	adds	r3, #2
 800270c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002710:	e7c2      	b.n	8002698 <_printf_common+0x58>
 8002712:	2301      	movs	r3, #1
 8002714:	4622      	mov	r2, r4
 8002716:	4641      	mov	r1, r8
 8002718:	4638      	mov	r0, r7
 800271a:	47c8      	blx	r9
 800271c:	3001      	adds	r0, #1
 800271e:	d0e6      	beq.n	80026ee <_printf_common+0xae>
 8002720:	3601      	adds	r6, #1
 8002722:	e7d9      	b.n	80026d8 <_printf_common+0x98>

08002724 <_printf_i>:
 8002724:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002728:	7e0f      	ldrb	r7, [r1, #24]
 800272a:	4691      	mov	r9, r2
 800272c:	2f78      	cmp	r7, #120	@ 0x78
 800272e:	4680      	mov	r8, r0
 8002730:	460c      	mov	r4, r1
 8002732:	469a      	mov	sl, r3
 8002734:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002736:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800273a:	d807      	bhi.n	800274c <_printf_i+0x28>
 800273c:	2f62      	cmp	r7, #98	@ 0x62
 800273e:	d80a      	bhi.n	8002756 <_printf_i+0x32>
 8002740:	2f00      	cmp	r7, #0
 8002742:	f000 80d3 	beq.w	80028ec <_printf_i+0x1c8>
 8002746:	2f58      	cmp	r7, #88	@ 0x58
 8002748:	f000 80ba 	beq.w	80028c0 <_printf_i+0x19c>
 800274c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002750:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002754:	e03a      	b.n	80027cc <_printf_i+0xa8>
 8002756:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800275a:	2b15      	cmp	r3, #21
 800275c:	d8f6      	bhi.n	800274c <_printf_i+0x28>
 800275e:	a101      	add	r1, pc, #4	@ (adr r1, 8002764 <_printf_i+0x40>)
 8002760:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002764:	080027bd 	.word	0x080027bd
 8002768:	080027d1 	.word	0x080027d1
 800276c:	0800274d 	.word	0x0800274d
 8002770:	0800274d 	.word	0x0800274d
 8002774:	0800274d 	.word	0x0800274d
 8002778:	0800274d 	.word	0x0800274d
 800277c:	080027d1 	.word	0x080027d1
 8002780:	0800274d 	.word	0x0800274d
 8002784:	0800274d 	.word	0x0800274d
 8002788:	0800274d 	.word	0x0800274d
 800278c:	0800274d 	.word	0x0800274d
 8002790:	080028d3 	.word	0x080028d3
 8002794:	080027fb 	.word	0x080027fb
 8002798:	0800288d 	.word	0x0800288d
 800279c:	0800274d 	.word	0x0800274d
 80027a0:	0800274d 	.word	0x0800274d
 80027a4:	080028f5 	.word	0x080028f5
 80027a8:	0800274d 	.word	0x0800274d
 80027ac:	080027fb 	.word	0x080027fb
 80027b0:	0800274d 	.word	0x0800274d
 80027b4:	0800274d 	.word	0x0800274d
 80027b8:	08002895 	.word	0x08002895
 80027bc:	6833      	ldr	r3, [r6, #0]
 80027be:	1d1a      	adds	r2, r3, #4
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	6032      	str	r2, [r6, #0]
 80027c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80027c8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80027cc:	2301      	movs	r3, #1
 80027ce:	e09e      	b.n	800290e <_printf_i+0x1ea>
 80027d0:	6833      	ldr	r3, [r6, #0]
 80027d2:	6820      	ldr	r0, [r4, #0]
 80027d4:	1d19      	adds	r1, r3, #4
 80027d6:	6031      	str	r1, [r6, #0]
 80027d8:	0606      	lsls	r6, r0, #24
 80027da:	d501      	bpl.n	80027e0 <_printf_i+0xbc>
 80027dc:	681d      	ldr	r5, [r3, #0]
 80027de:	e003      	b.n	80027e8 <_printf_i+0xc4>
 80027e0:	0645      	lsls	r5, r0, #25
 80027e2:	d5fb      	bpl.n	80027dc <_printf_i+0xb8>
 80027e4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80027e8:	2d00      	cmp	r5, #0
 80027ea:	da03      	bge.n	80027f4 <_printf_i+0xd0>
 80027ec:	232d      	movs	r3, #45	@ 0x2d
 80027ee:	426d      	negs	r5, r5
 80027f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80027f4:	230a      	movs	r3, #10
 80027f6:	4859      	ldr	r0, [pc, #356]	@ (800295c <_printf_i+0x238>)
 80027f8:	e011      	b.n	800281e <_printf_i+0xfa>
 80027fa:	6821      	ldr	r1, [r4, #0]
 80027fc:	6833      	ldr	r3, [r6, #0]
 80027fe:	0608      	lsls	r0, r1, #24
 8002800:	f853 5b04 	ldr.w	r5, [r3], #4
 8002804:	d402      	bmi.n	800280c <_printf_i+0xe8>
 8002806:	0649      	lsls	r1, r1, #25
 8002808:	bf48      	it	mi
 800280a:	b2ad      	uxthmi	r5, r5
 800280c:	2f6f      	cmp	r7, #111	@ 0x6f
 800280e:	6033      	str	r3, [r6, #0]
 8002810:	bf14      	ite	ne
 8002812:	230a      	movne	r3, #10
 8002814:	2308      	moveq	r3, #8
 8002816:	4851      	ldr	r0, [pc, #324]	@ (800295c <_printf_i+0x238>)
 8002818:	2100      	movs	r1, #0
 800281a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800281e:	6866      	ldr	r6, [r4, #4]
 8002820:	2e00      	cmp	r6, #0
 8002822:	bfa8      	it	ge
 8002824:	6821      	ldrge	r1, [r4, #0]
 8002826:	60a6      	str	r6, [r4, #8]
 8002828:	bfa4      	itt	ge
 800282a:	f021 0104 	bicge.w	r1, r1, #4
 800282e:	6021      	strge	r1, [r4, #0]
 8002830:	b90d      	cbnz	r5, 8002836 <_printf_i+0x112>
 8002832:	2e00      	cmp	r6, #0
 8002834:	d04b      	beq.n	80028ce <_printf_i+0x1aa>
 8002836:	4616      	mov	r6, r2
 8002838:	fbb5 f1f3 	udiv	r1, r5, r3
 800283c:	fb03 5711 	mls	r7, r3, r1, r5
 8002840:	5dc7      	ldrb	r7, [r0, r7]
 8002842:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002846:	462f      	mov	r7, r5
 8002848:	42bb      	cmp	r3, r7
 800284a:	460d      	mov	r5, r1
 800284c:	d9f4      	bls.n	8002838 <_printf_i+0x114>
 800284e:	2b08      	cmp	r3, #8
 8002850:	d10b      	bne.n	800286a <_printf_i+0x146>
 8002852:	6823      	ldr	r3, [r4, #0]
 8002854:	07df      	lsls	r7, r3, #31
 8002856:	d508      	bpl.n	800286a <_printf_i+0x146>
 8002858:	6923      	ldr	r3, [r4, #16]
 800285a:	6861      	ldr	r1, [r4, #4]
 800285c:	4299      	cmp	r1, r3
 800285e:	bfde      	ittt	le
 8002860:	2330      	movle	r3, #48	@ 0x30
 8002862:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002866:	f106 36ff 	addle.w	r6, r6, #4294967295
 800286a:	1b92      	subs	r2, r2, r6
 800286c:	6122      	str	r2, [r4, #16]
 800286e:	464b      	mov	r3, r9
 8002870:	4621      	mov	r1, r4
 8002872:	4640      	mov	r0, r8
 8002874:	f8cd a000 	str.w	sl, [sp]
 8002878:	aa03      	add	r2, sp, #12
 800287a:	f7ff fee1 	bl	8002640 <_printf_common>
 800287e:	3001      	adds	r0, #1
 8002880:	d14a      	bne.n	8002918 <_printf_i+0x1f4>
 8002882:	f04f 30ff 	mov.w	r0, #4294967295
 8002886:	b004      	add	sp, #16
 8002888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800288c:	6823      	ldr	r3, [r4, #0]
 800288e:	f043 0320 	orr.w	r3, r3, #32
 8002892:	6023      	str	r3, [r4, #0]
 8002894:	2778      	movs	r7, #120	@ 0x78
 8002896:	4832      	ldr	r0, [pc, #200]	@ (8002960 <_printf_i+0x23c>)
 8002898:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800289c:	6823      	ldr	r3, [r4, #0]
 800289e:	6831      	ldr	r1, [r6, #0]
 80028a0:	061f      	lsls	r7, r3, #24
 80028a2:	f851 5b04 	ldr.w	r5, [r1], #4
 80028a6:	d402      	bmi.n	80028ae <_printf_i+0x18a>
 80028a8:	065f      	lsls	r7, r3, #25
 80028aa:	bf48      	it	mi
 80028ac:	b2ad      	uxthmi	r5, r5
 80028ae:	6031      	str	r1, [r6, #0]
 80028b0:	07d9      	lsls	r1, r3, #31
 80028b2:	bf44      	itt	mi
 80028b4:	f043 0320 	orrmi.w	r3, r3, #32
 80028b8:	6023      	strmi	r3, [r4, #0]
 80028ba:	b11d      	cbz	r5, 80028c4 <_printf_i+0x1a0>
 80028bc:	2310      	movs	r3, #16
 80028be:	e7ab      	b.n	8002818 <_printf_i+0xf4>
 80028c0:	4826      	ldr	r0, [pc, #152]	@ (800295c <_printf_i+0x238>)
 80028c2:	e7e9      	b.n	8002898 <_printf_i+0x174>
 80028c4:	6823      	ldr	r3, [r4, #0]
 80028c6:	f023 0320 	bic.w	r3, r3, #32
 80028ca:	6023      	str	r3, [r4, #0]
 80028cc:	e7f6      	b.n	80028bc <_printf_i+0x198>
 80028ce:	4616      	mov	r6, r2
 80028d0:	e7bd      	b.n	800284e <_printf_i+0x12a>
 80028d2:	6833      	ldr	r3, [r6, #0]
 80028d4:	6825      	ldr	r5, [r4, #0]
 80028d6:	1d18      	adds	r0, r3, #4
 80028d8:	6961      	ldr	r1, [r4, #20]
 80028da:	6030      	str	r0, [r6, #0]
 80028dc:	062e      	lsls	r6, r5, #24
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	d501      	bpl.n	80028e6 <_printf_i+0x1c2>
 80028e2:	6019      	str	r1, [r3, #0]
 80028e4:	e002      	b.n	80028ec <_printf_i+0x1c8>
 80028e6:	0668      	lsls	r0, r5, #25
 80028e8:	d5fb      	bpl.n	80028e2 <_printf_i+0x1be>
 80028ea:	8019      	strh	r1, [r3, #0]
 80028ec:	2300      	movs	r3, #0
 80028ee:	4616      	mov	r6, r2
 80028f0:	6123      	str	r3, [r4, #16]
 80028f2:	e7bc      	b.n	800286e <_printf_i+0x14a>
 80028f4:	6833      	ldr	r3, [r6, #0]
 80028f6:	2100      	movs	r1, #0
 80028f8:	1d1a      	adds	r2, r3, #4
 80028fa:	6032      	str	r2, [r6, #0]
 80028fc:	681e      	ldr	r6, [r3, #0]
 80028fe:	6862      	ldr	r2, [r4, #4]
 8002900:	4630      	mov	r0, r6
 8002902:	f000 f913 	bl	8002b2c <memchr>
 8002906:	b108      	cbz	r0, 800290c <_printf_i+0x1e8>
 8002908:	1b80      	subs	r0, r0, r6
 800290a:	6060      	str	r0, [r4, #4]
 800290c:	6863      	ldr	r3, [r4, #4]
 800290e:	6123      	str	r3, [r4, #16]
 8002910:	2300      	movs	r3, #0
 8002912:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002916:	e7aa      	b.n	800286e <_printf_i+0x14a>
 8002918:	4632      	mov	r2, r6
 800291a:	4649      	mov	r1, r9
 800291c:	4640      	mov	r0, r8
 800291e:	6923      	ldr	r3, [r4, #16]
 8002920:	47d0      	blx	sl
 8002922:	3001      	adds	r0, #1
 8002924:	d0ad      	beq.n	8002882 <_printf_i+0x15e>
 8002926:	6823      	ldr	r3, [r4, #0]
 8002928:	079b      	lsls	r3, r3, #30
 800292a:	d413      	bmi.n	8002954 <_printf_i+0x230>
 800292c:	68e0      	ldr	r0, [r4, #12]
 800292e:	9b03      	ldr	r3, [sp, #12]
 8002930:	4298      	cmp	r0, r3
 8002932:	bfb8      	it	lt
 8002934:	4618      	movlt	r0, r3
 8002936:	e7a6      	b.n	8002886 <_printf_i+0x162>
 8002938:	2301      	movs	r3, #1
 800293a:	4632      	mov	r2, r6
 800293c:	4649      	mov	r1, r9
 800293e:	4640      	mov	r0, r8
 8002940:	47d0      	blx	sl
 8002942:	3001      	adds	r0, #1
 8002944:	d09d      	beq.n	8002882 <_printf_i+0x15e>
 8002946:	3501      	adds	r5, #1
 8002948:	68e3      	ldr	r3, [r4, #12]
 800294a:	9903      	ldr	r1, [sp, #12]
 800294c:	1a5b      	subs	r3, r3, r1
 800294e:	42ab      	cmp	r3, r5
 8002950:	dcf2      	bgt.n	8002938 <_printf_i+0x214>
 8002952:	e7eb      	b.n	800292c <_printf_i+0x208>
 8002954:	2500      	movs	r5, #0
 8002956:	f104 0619 	add.w	r6, r4, #25
 800295a:	e7f5      	b.n	8002948 <_printf_i+0x224>
 800295c:	080034d8 	.word	0x080034d8
 8002960:	080034e9 	.word	0x080034e9

08002964 <__sflush_r>:
 8002964:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800296a:	0716      	lsls	r6, r2, #28
 800296c:	4605      	mov	r5, r0
 800296e:	460c      	mov	r4, r1
 8002970:	d454      	bmi.n	8002a1c <__sflush_r+0xb8>
 8002972:	684b      	ldr	r3, [r1, #4]
 8002974:	2b00      	cmp	r3, #0
 8002976:	dc02      	bgt.n	800297e <__sflush_r+0x1a>
 8002978:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800297a:	2b00      	cmp	r3, #0
 800297c:	dd48      	ble.n	8002a10 <__sflush_r+0xac>
 800297e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002980:	2e00      	cmp	r6, #0
 8002982:	d045      	beq.n	8002a10 <__sflush_r+0xac>
 8002984:	2300      	movs	r3, #0
 8002986:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800298a:	682f      	ldr	r7, [r5, #0]
 800298c:	6a21      	ldr	r1, [r4, #32]
 800298e:	602b      	str	r3, [r5, #0]
 8002990:	d030      	beq.n	80029f4 <__sflush_r+0x90>
 8002992:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002994:	89a3      	ldrh	r3, [r4, #12]
 8002996:	0759      	lsls	r1, r3, #29
 8002998:	d505      	bpl.n	80029a6 <__sflush_r+0x42>
 800299a:	6863      	ldr	r3, [r4, #4]
 800299c:	1ad2      	subs	r2, r2, r3
 800299e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80029a0:	b10b      	cbz	r3, 80029a6 <__sflush_r+0x42>
 80029a2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80029a4:	1ad2      	subs	r2, r2, r3
 80029a6:	2300      	movs	r3, #0
 80029a8:	4628      	mov	r0, r5
 80029aa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80029ac:	6a21      	ldr	r1, [r4, #32]
 80029ae:	47b0      	blx	r6
 80029b0:	1c43      	adds	r3, r0, #1
 80029b2:	89a3      	ldrh	r3, [r4, #12]
 80029b4:	d106      	bne.n	80029c4 <__sflush_r+0x60>
 80029b6:	6829      	ldr	r1, [r5, #0]
 80029b8:	291d      	cmp	r1, #29
 80029ba:	d82b      	bhi.n	8002a14 <__sflush_r+0xb0>
 80029bc:	4a28      	ldr	r2, [pc, #160]	@ (8002a60 <__sflush_r+0xfc>)
 80029be:	410a      	asrs	r2, r1
 80029c0:	07d6      	lsls	r6, r2, #31
 80029c2:	d427      	bmi.n	8002a14 <__sflush_r+0xb0>
 80029c4:	2200      	movs	r2, #0
 80029c6:	6062      	str	r2, [r4, #4]
 80029c8:	6922      	ldr	r2, [r4, #16]
 80029ca:	04d9      	lsls	r1, r3, #19
 80029cc:	6022      	str	r2, [r4, #0]
 80029ce:	d504      	bpl.n	80029da <__sflush_r+0x76>
 80029d0:	1c42      	adds	r2, r0, #1
 80029d2:	d101      	bne.n	80029d8 <__sflush_r+0x74>
 80029d4:	682b      	ldr	r3, [r5, #0]
 80029d6:	b903      	cbnz	r3, 80029da <__sflush_r+0x76>
 80029d8:	6560      	str	r0, [r4, #84]	@ 0x54
 80029da:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80029dc:	602f      	str	r7, [r5, #0]
 80029de:	b1b9      	cbz	r1, 8002a10 <__sflush_r+0xac>
 80029e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80029e4:	4299      	cmp	r1, r3
 80029e6:	d002      	beq.n	80029ee <__sflush_r+0x8a>
 80029e8:	4628      	mov	r0, r5
 80029ea:	f7ff fbd3 	bl	8002194 <_free_r>
 80029ee:	2300      	movs	r3, #0
 80029f0:	6363      	str	r3, [r4, #52]	@ 0x34
 80029f2:	e00d      	b.n	8002a10 <__sflush_r+0xac>
 80029f4:	2301      	movs	r3, #1
 80029f6:	4628      	mov	r0, r5
 80029f8:	47b0      	blx	r6
 80029fa:	4602      	mov	r2, r0
 80029fc:	1c50      	adds	r0, r2, #1
 80029fe:	d1c9      	bne.n	8002994 <__sflush_r+0x30>
 8002a00:	682b      	ldr	r3, [r5, #0]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d0c6      	beq.n	8002994 <__sflush_r+0x30>
 8002a06:	2b1d      	cmp	r3, #29
 8002a08:	d001      	beq.n	8002a0e <__sflush_r+0xaa>
 8002a0a:	2b16      	cmp	r3, #22
 8002a0c:	d11d      	bne.n	8002a4a <__sflush_r+0xe6>
 8002a0e:	602f      	str	r7, [r5, #0]
 8002a10:	2000      	movs	r0, #0
 8002a12:	e021      	b.n	8002a58 <__sflush_r+0xf4>
 8002a14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a18:	b21b      	sxth	r3, r3
 8002a1a:	e01a      	b.n	8002a52 <__sflush_r+0xee>
 8002a1c:	690f      	ldr	r7, [r1, #16]
 8002a1e:	2f00      	cmp	r7, #0
 8002a20:	d0f6      	beq.n	8002a10 <__sflush_r+0xac>
 8002a22:	0793      	lsls	r3, r2, #30
 8002a24:	bf18      	it	ne
 8002a26:	2300      	movne	r3, #0
 8002a28:	680e      	ldr	r6, [r1, #0]
 8002a2a:	bf08      	it	eq
 8002a2c:	694b      	ldreq	r3, [r1, #20]
 8002a2e:	1bf6      	subs	r6, r6, r7
 8002a30:	600f      	str	r7, [r1, #0]
 8002a32:	608b      	str	r3, [r1, #8]
 8002a34:	2e00      	cmp	r6, #0
 8002a36:	ddeb      	ble.n	8002a10 <__sflush_r+0xac>
 8002a38:	4633      	mov	r3, r6
 8002a3a:	463a      	mov	r2, r7
 8002a3c:	4628      	mov	r0, r5
 8002a3e:	6a21      	ldr	r1, [r4, #32]
 8002a40:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8002a44:	47e0      	blx	ip
 8002a46:	2800      	cmp	r0, #0
 8002a48:	dc07      	bgt.n	8002a5a <__sflush_r+0xf6>
 8002a4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002a4e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a52:	f04f 30ff 	mov.w	r0, #4294967295
 8002a56:	81a3      	strh	r3, [r4, #12]
 8002a58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a5a:	4407      	add	r7, r0
 8002a5c:	1a36      	subs	r6, r6, r0
 8002a5e:	e7e9      	b.n	8002a34 <__sflush_r+0xd0>
 8002a60:	dfbffffe 	.word	0xdfbffffe

08002a64 <_fflush_r>:
 8002a64:	b538      	push	{r3, r4, r5, lr}
 8002a66:	690b      	ldr	r3, [r1, #16]
 8002a68:	4605      	mov	r5, r0
 8002a6a:	460c      	mov	r4, r1
 8002a6c:	b913      	cbnz	r3, 8002a74 <_fflush_r+0x10>
 8002a6e:	2500      	movs	r5, #0
 8002a70:	4628      	mov	r0, r5
 8002a72:	bd38      	pop	{r3, r4, r5, pc}
 8002a74:	b118      	cbz	r0, 8002a7e <_fflush_r+0x1a>
 8002a76:	6a03      	ldr	r3, [r0, #32]
 8002a78:	b90b      	cbnz	r3, 8002a7e <_fflush_r+0x1a>
 8002a7a:	f7ff fa57 	bl	8001f2c <__sinit>
 8002a7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d0f3      	beq.n	8002a6e <_fflush_r+0xa>
 8002a86:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002a88:	07d0      	lsls	r0, r2, #31
 8002a8a:	d404      	bmi.n	8002a96 <_fflush_r+0x32>
 8002a8c:	0599      	lsls	r1, r3, #22
 8002a8e:	d402      	bmi.n	8002a96 <_fflush_r+0x32>
 8002a90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002a92:	f7ff fb5e 	bl	8002152 <__retarget_lock_acquire_recursive>
 8002a96:	4628      	mov	r0, r5
 8002a98:	4621      	mov	r1, r4
 8002a9a:	f7ff ff63 	bl	8002964 <__sflush_r>
 8002a9e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002aa0:	4605      	mov	r5, r0
 8002aa2:	07da      	lsls	r2, r3, #31
 8002aa4:	d4e4      	bmi.n	8002a70 <_fflush_r+0xc>
 8002aa6:	89a3      	ldrh	r3, [r4, #12]
 8002aa8:	059b      	lsls	r3, r3, #22
 8002aaa:	d4e1      	bmi.n	8002a70 <_fflush_r+0xc>
 8002aac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002aae:	f7ff fb51 	bl	8002154 <__retarget_lock_release_recursive>
 8002ab2:	e7dd      	b.n	8002a70 <_fflush_r+0xc>

08002ab4 <fiprintf>:
 8002ab4:	b40e      	push	{r1, r2, r3}
 8002ab6:	b503      	push	{r0, r1, lr}
 8002ab8:	4601      	mov	r1, r0
 8002aba:	ab03      	add	r3, sp, #12
 8002abc:	4805      	ldr	r0, [pc, #20]	@ (8002ad4 <fiprintf+0x20>)
 8002abe:	f853 2b04 	ldr.w	r2, [r3], #4
 8002ac2:	6800      	ldr	r0, [r0, #0]
 8002ac4:	9301      	str	r3, [sp, #4]
 8002ac6:	f000 f8a9 	bl	8002c1c <_vfiprintf_r>
 8002aca:	b002      	add	sp, #8
 8002acc:	f85d eb04 	ldr.w	lr, [sp], #4
 8002ad0:	b003      	add	sp, #12
 8002ad2:	4770      	bx	lr
 8002ad4:	20000018 	.word	0x20000018

08002ad8 <memmove>:
 8002ad8:	4288      	cmp	r0, r1
 8002ada:	b510      	push	{r4, lr}
 8002adc:	eb01 0402 	add.w	r4, r1, r2
 8002ae0:	d902      	bls.n	8002ae8 <memmove+0x10>
 8002ae2:	4284      	cmp	r4, r0
 8002ae4:	4623      	mov	r3, r4
 8002ae6:	d807      	bhi.n	8002af8 <memmove+0x20>
 8002ae8:	1e43      	subs	r3, r0, #1
 8002aea:	42a1      	cmp	r1, r4
 8002aec:	d008      	beq.n	8002b00 <memmove+0x28>
 8002aee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002af2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002af6:	e7f8      	b.n	8002aea <memmove+0x12>
 8002af8:	4601      	mov	r1, r0
 8002afa:	4402      	add	r2, r0
 8002afc:	428a      	cmp	r2, r1
 8002afe:	d100      	bne.n	8002b02 <memmove+0x2a>
 8002b00:	bd10      	pop	{r4, pc}
 8002b02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002b06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002b0a:	e7f7      	b.n	8002afc <memmove+0x24>

08002b0c <_sbrk_r>:
 8002b0c:	b538      	push	{r3, r4, r5, lr}
 8002b0e:	2300      	movs	r3, #0
 8002b10:	4d05      	ldr	r5, [pc, #20]	@ (8002b28 <_sbrk_r+0x1c>)
 8002b12:	4604      	mov	r4, r0
 8002b14:	4608      	mov	r0, r1
 8002b16:	602b      	str	r3, [r5, #0]
 8002b18:	f7fd ff1a 	bl	8000950 <_sbrk>
 8002b1c:	1c43      	adds	r3, r0, #1
 8002b1e:	d102      	bne.n	8002b26 <_sbrk_r+0x1a>
 8002b20:	682b      	ldr	r3, [r5, #0]
 8002b22:	b103      	cbz	r3, 8002b26 <_sbrk_r+0x1a>
 8002b24:	6023      	str	r3, [r4, #0]
 8002b26:	bd38      	pop	{r3, r4, r5, pc}
 8002b28:	200002c4 	.word	0x200002c4

08002b2c <memchr>:
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	b510      	push	{r4, lr}
 8002b30:	b2c9      	uxtb	r1, r1
 8002b32:	4402      	add	r2, r0
 8002b34:	4293      	cmp	r3, r2
 8002b36:	4618      	mov	r0, r3
 8002b38:	d101      	bne.n	8002b3e <memchr+0x12>
 8002b3a:	2000      	movs	r0, #0
 8002b3c:	e003      	b.n	8002b46 <memchr+0x1a>
 8002b3e:	7804      	ldrb	r4, [r0, #0]
 8002b40:	3301      	adds	r3, #1
 8002b42:	428c      	cmp	r4, r1
 8002b44:	d1f6      	bne.n	8002b34 <memchr+0x8>
 8002b46:	bd10      	pop	{r4, pc}

08002b48 <memcpy>:
 8002b48:	440a      	add	r2, r1
 8002b4a:	4291      	cmp	r1, r2
 8002b4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8002b50:	d100      	bne.n	8002b54 <memcpy+0xc>
 8002b52:	4770      	bx	lr
 8002b54:	b510      	push	{r4, lr}
 8002b56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002b5a:	4291      	cmp	r1, r2
 8002b5c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002b60:	d1f9      	bne.n	8002b56 <memcpy+0xe>
 8002b62:	bd10      	pop	{r4, pc}

08002b64 <abort>:
 8002b64:	2006      	movs	r0, #6
 8002b66:	b508      	push	{r3, lr}
 8002b68:	f000 fa2c 	bl	8002fc4 <raise>
 8002b6c:	2001      	movs	r0, #1
 8002b6e:	f7fd febf 	bl	80008f0 <_exit>

08002b72 <_realloc_r>:
 8002b72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b76:	4680      	mov	r8, r0
 8002b78:	4615      	mov	r5, r2
 8002b7a:	460c      	mov	r4, r1
 8002b7c:	b921      	cbnz	r1, 8002b88 <_realloc_r+0x16>
 8002b7e:	4611      	mov	r1, r2
 8002b80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002b84:	f7ff bb78 	b.w	8002278 <_malloc_r>
 8002b88:	b92a      	cbnz	r2, 8002b96 <_realloc_r+0x24>
 8002b8a:	f7ff fb03 	bl	8002194 <_free_r>
 8002b8e:	2400      	movs	r4, #0
 8002b90:	4620      	mov	r0, r4
 8002b92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b96:	f000 fa31 	bl	8002ffc <_malloc_usable_size_r>
 8002b9a:	4285      	cmp	r5, r0
 8002b9c:	4606      	mov	r6, r0
 8002b9e:	d802      	bhi.n	8002ba6 <_realloc_r+0x34>
 8002ba0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8002ba4:	d8f4      	bhi.n	8002b90 <_realloc_r+0x1e>
 8002ba6:	4629      	mov	r1, r5
 8002ba8:	4640      	mov	r0, r8
 8002baa:	f7ff fb65 	bl	8002278 <_malloc_r>
 8002bae:	4607      	mov	r7, r0
 8002bb0:	2800      	cmp	r0, #0
 8002bb2:	d0ec      	beq.n	8002b8e <_realloc_r+0x1c>
 8002bb4:	42b5      	cmp	r5, r6
 8002bb6:	462a      	mov	r2, r5
 8002bb8:	4621      	mov	r1, r4
 8002bba:	bf28      	it	cs
 8002bbc:	4632      	movcs	r2, r6
 8002bbe:	f7ff ffc3 	bl	8002b48 <memcpy>
 8002bc2:	4621      	mov	r1, r4
 8002bc4:	4640      	mov	r0, r8
 8002bc6:	f7ff fae5 	bl	8002194 <_free_r>
 8002bca:	463c      	mov	r4, r7
 8002bcc:	e7e0      	b.n	8002b90 <_realloc_r+0x1e>

08002bce <__sfputc_r>:
 8002bce:	6893      	ldr	r3, [r2, #8]
 8002bd0:	b410      	push	{r4}
 8002bd2:	3b01      	subs	r3, #1
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	6093      	str	r3, [r2, #8]
 8002bd8:	da07      	bge.n	8002bea <__sfputc_r+0x1c>
 8002bda:	6994      	ldr	r4, [r2, #24]
 8002bdc:	42a3      	cmp	r3, r4
 8002bde:	db01      	blt.n	8002be4 <__sfputc_r+0x16>
 8002be0:	290a      	cmp	r1, #10
 8002be2:	d102      	bne.n	8002bea <__sfputc_r+0x1c>
 8002be4:	bc10      	pop	{r4}
 8002be6:	f000 b931 	b.w	8002e4c <__swbuf_r>
 8002bea:	6813      	ldr	r3, [r2, #0]
 8002bec:	1c58      	adds	r0, r3, #1
 8002bee:	6010      	str	r0, [r2, #0]
 8002bf0:	7019      	strb	r1, [r3, #0]
 8002bf2:	4608      	mov	r0, r1
 8002bf4:	bc10      	pop	{r4}
 8002bf6:	4770      	bx	lr

08002bf8 <__sfputs_r>:
 8002bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bfa:	4606      	mov	r6, r0
 8002bfc:	460f      	mov	r7, r1
 8002bfe:	4614      	mov	r4, r2
 8002c00:	18d5      	adds	r5, r2, r3
 8002c02:	42ac      	cmp	r4, r5
 8002c04:	d101      	bne.n	8002c0a <__sfputs_r+0x12>
 8002c06:	2000      	movs	r0, #0
 8002c08:	e007      	b.n	8002c1a <__sfputs_r+0x22>
 8002c0a:	463a      	mov	r2, r7
 8002c0c:	4630      	mov	r0, r6
 8002c0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c12:	f7ff ffdc 	bl	8002bce <__sfputc_r>
 8002c16:	1c43      	adds	r3, r0, #1
 8002c18:	d1f3      	bne.n	8002c02 <__sfputs_r+0xa>
 8002c1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002c1c <_vfiprintf_r>:
 8002c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c20:	460d      	mov	r5, r1
 8002c22:	4614      	mov	r4, r2
 8002c24:	4698      	mov	r8, r3
 8002c26:	4606      	mov	r6, r0
 8002c28:	b09d      	sub	sp, #116	@ 0x74
 8002c2a:	b118      	cbz	r0, 8002c34 <_vfiprintf_r+0x18>
 8002c2c:	6a03      	ldr	r3, [r0, #32]
 8002c2e:	b90b      	cbnz	r3, 8002c34 <_vfiprintf_r+0x18>
 8002c30:	f7ff f97c 	bl	8001f2c <__sinit>
 8002c34:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002c36:	07d9      	lsls	r1, r3, #31
 8002c38:	d405      	bmi.n	8002c46 <_vfiprintf_r+0x2a>
 8002c3a:	89ab      	ldrh	r3, [r5, #12]
 8002c3c:	059a      	lsls	r2, r3, #22
 8002c3e:	d402      	bmi.n	8002c46 <_vfiprintf_r+0x2a>
 8002c40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002c42:	f7ff fa86 	bl	8002152 <__retarget_lock_acquire_recursive>
 8002c46:	89ab      	ldrh	r3, [r5, #12]
 8002c48:	071b      	lsls	r3, r3, #28
 8002c4a:	d501      	bpl.n	8002c50 <_vfiprintf_r+0x34>
 8002c4c:	692b      	ldr	r3, [r5, #16]
 8002c4e:	b99b      	cbnz	r3, 8002c78 <_vfiprintf_r+0x5c>
 8002c50:	4629      	mov	r1, r5
 8002c52:	4630      	mov	r0, r6
 8002c54:	f000 f938 	bl	8002ec8 <__swsetup_r>
 8002c58:	b170      	cbz	r0, 8002c78 <_vfiprintf_r+0x5c>
 8002c5a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002c5c:	07dc      	lsls	r4, r3, #31
 8002c5e:	d504      	bpl.n	8002c6a <_vfiprintf_r+0x4e>
 8002c60:	f04f 30ff 	mov.w	r0, #4294967295
 8002c64:	b01d      	add	sp, #116	@ 0x74
 8002c66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c6a:	89ab      	ldrh	r3, [r5, #12]
 8002c6c:	0598      	lsls	r0, r3, #22
 8002c6e:	d4f7      	bmi.n	8002c60 <_vfiprintf_r+0x44>
 8002c70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002c72:	f7ff fa6f 	bl	8002154 <__retarget_lock_release_recursive>
 8002c76:	e7f3      	b.n	8002c60 <_vfiprintf_r+0x44>
 8002c78:	2300      	movs	r3, #0
 8002c7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8002c7c:	2320      	movs	r3, #32
 8002c7e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002c82:	2330      	movs	r3, #48	@ 0x30
 8002c84:	f04f 0901 	mov.w	r9, #1
 8002c88:	f8cd 800c 	str.w	r8, [sp, #12]
 8002c8c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8002e38 <_vfiprintf_r+0x21c>
 8002c90:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002c94:	4623      	mov	r3, r4
 8002c96:	469a      	mov	sl, r3
 8002c98:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002c9c:	b10a      	cbz	r2, 8002ca2 <_vfiprintf_r+0x86>
 8002c9e:	2a25      	cmp	r2, #37	@ 0x25
 8002ca0:	d1f9      	bne.n	8002c96 <_vfiprintf_r+0x7a>
 8002ca2:	ebba 0b04 	subs.w	fp, sl, r4
 8002ca6:	d00b      	beq.n	8002cc0 <_vfiprintf_r+0xa4>
 8002ca8:	465b      	mov	r3, fp
 8002caa:	4622      	mov	r2, r4
 8002cac:	4629      	mov	r1, r5
 8002cae:	4630      	mov	r0, r6
 8002cb0:	f7ff ffa2 	bl	8002bf8 <__sfputs_r>
 8002cb4:	3001      	adds	r0, #1
 8002cb6:	f000 80a7 	beq.w	8002e08 <_vfiprintf_r+0x1ec>
 8002cba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002cbc:	445a      	add	r2, fp
 8002cbe:	9209      	str	r2, [sp, #36]	@ 0x24
 8002cc0:	f89a 3000 	ldrb.w	r3, [sl]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	f000 809f 	beq.w	8002e08 <_vfiprintf_r+0x1ec>
 8002cca:	2300      	movs	r3, #0
 8002ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8002cd0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002cd4:	f10a 0a01 	add.w	sl, sl, #1
 8002cd8:	9304      	str	r3, [sp, #16]
 8002cda:	9307      	str	r3, [sp, #28]
 8002cdc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002ce0:	931a      	str	r3, [sp, #104]	@ 0x68
 8002ce2:	4654      	mov	r4, sl
 8002ce4:	2205      	movs	r2, #5
 8002ce6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002cea:	4853      	ldr	r0, [pc, #332]	@ (8002e38 <_vfiprintf_r+0x21c>)
 8002cec:	f7ff ff1e 	bl	8002b2c <memchr>
 8002cf0:	9a04      	ldr	r2, [sp, #16]
 8002cf2:	b9d8      	cbnz	r0, 8002d2c <_vfiprintf_r+0x110>
 8002cf4:	06d1      	lsls	r1, r2, #27
 8002cf6:	bf44      	itt	mi
 8002cf8:	2320      	movmi	r3, #32
 8002cfa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002cfe:	0713      	lsls	r3, r2, #28
 8002d00:	bf44      	itt	mi
 8002d02:	232b      	movmi	r3, #43	@ 0x2b
 8002d04:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002d08:	f89a 3000 	ldrb.w	r3, [sl]
 8002d0c:	2b2a      	cmp	r3, #42	@ 0x2a
 8002d0e:	d015      	beq.n	8002d3c <_vfiprintf_r+0x120>
 8002d10:	4654      	mov	r4, sl
 8002d12:	2000      	movs	r0, #0
 8002d14:	f04f 0c0a 	mov.w	ip, #10
 8002d18:	9a07      	ldr	r2, [sp, #28]
 8002d1a:	4621      	mov	r1, r4
 8002d1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002d20:	3b30      	subs	r3, #48	@ 0x30
 8002d22:	2b09      	cmp	r3, #9
 8002d24:	d94b      	bls.n	8002dbe <_vfiprintf_r+0x1a2>
 8002d26:	b1b0      	cbz	r0, 8002d56 <_vfiprintf_r+0x13a>
 8002d28:	9207      	str	r2, [sp, #28]
 8002d2a:	e014      	b.n	8002d56 <_vfiprintf_r+0x13a>
 8002d2c:	eba0 0308 	sub.w	r3, r0, r8
 8002d30:	fa09 f303 	lsl.w	r3, r9, r3
 8002d34:	4313      	orrs	r3, r2
 8002d36:	46a2      	mov	sl, r4
 8002d38:	9304      	str	r3, [sp, #16]
 8002d3a:	e7d2      	b.n	8002ce2 <_vfiprintf_r+0xc6>
 8002d3c:	9b03      	ldr	r3, [sp, #12]
 8002d3e:	1d19      	adds	r1, r3, #4
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	9103      	str	r1, [sp, #12]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	bfbb      	ittet	lt
 8002d48:	425b      	neglt	r3, r3
 8002d4a:	f042 0202 	orrlt.w	r2, r2, #2
 8002d4e:	9307      	strge	r3, [sp, #28]
 8002d50:	9307      	strlt	r3, [sp, #28]
 8002d52:	bfb8      	it	lt
 8002d54:	9204      	strlt	r2, [sp, #16]
 8002d56:	7823      	ldrb	r3, [r4, #0]
 8002d58:	2b2e      	cmp	r3, #46	@ 0x2e
 8002d5a:	d10a      	bne.n	8002d72 <_vfiprintf_r+0x156>
 8002d5c:	7863      	ldrb	r3, [r4, #1]
 8002d5e:	2b2a      	cmp	r3, #42	@ 0x2a
 8002d60:	d132      	bne.n	8002dc8 <_vfiprintf_r+0x1ac>
 8002d62:	9b03      	ldr	r3, [sp, #12]
 8002d64:	3402      	adds	r4, #2
 8002d66:	1d1a      	adds	r2, r3, #4
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	9203      	str	r2, [sp, #12]
 8002d6c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002d70:	9305      	str	r3, [sp, #20]
 8002d72:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8002e3c <_vfiprintf_r+0x220>
 8002d76:	2203      	movs	r2, #3
 8002d78:	4650      	mov	r0, sl
 8002d7a:	7821      	ldrb	r1, [r4, #0]
 8002d7c:	f7ff fed6 	bl	8002b2c <memchr>
 8002d80:	b138      	cbz	r0, 8002d92 <_vfiprintf_r+0x176>
 8002d82:	2240      	movs	r2, #64	@ 0x40
 8002d84:	9b04      	ldr	r3, [sp, #16]
 8002d86:	eba0 000a 	sub.w	r0, r0, sl
 8002d8a:	4082      	lsls	r2, r0
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	3401      	adds	r4, #1
 8002d90:	9304      	str	r3, [sp, #16]
 8002d92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d96:	2206      	movs	r2, #6
 8002d98:	4829      	ldr	r0, [pc, #164]	@ (8002e40 <_vfiprintf_r+0x224>)
 8002d9a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002d9e:	f7ff fec5 	bl	8002b2c <memchr>
 8002da2:	2800      	cmp	r0, #0
 8002da4:	d03f      	beq.n	8002e26 <_vfiprintf_r+0x20a>
 8002da6:	4b27      	ldr	r3, [pc, #156]	@ (8002e44 <_vfiprintf_r+0x228>)
 8002da8:	bb1b      	cbnz	r3, 8002df2 <_vfiprintf_r+0x1d6>
 8002daa:	9b03      	ldr	r3, [sp, #12]
 8002dac:	3307      	adds	r3, #7
 8002dae:	f023 0307 	bic.w	r3, r3, #7
 8002db2:	3308      	adds	r3, #8
 8002db4:	9303      	str	r3, [sp, #12]
 8002db6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002db8:	443b      	add	r3, r7
 8002dba:	9309      	str	r3, [sp, #36]	@ 0x24
 8002dbc:	e76a      	b.n	8002c94 <_vfiprintf_r+0x78>
 8002dbe:	460c      	mov	r4, r1
 8002dc0:	2001      	movs	r0, #1
 8002dc2:	fb0c 3202 	mla	r2, ip, r2, r3
 8002dc6:	e7a8      	b.n	8002d1a <_vfiprintf_r+0xfe>
 8002dc8:	2300      	movs	r3, #0
 8002dca:	f04f 0c0a 	mov.w	ip, #10
 8002dce:	4619      	mov	r1, r3
 8002dd0:	3401      	adds	r4, #1
 8002dd2:	9305      	str	r3, [sp, #20]
 8002dd4:	4620      	mov	r0, r4
 8002dd6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002dda:	3a30      	subs	r2, #48	@ 0x30
 8002ddc:	2a09      	cmp	r2, #9
 8002dde:	d903      	bls.n	8002de8 <_vfiprintf_r+0x1cc>
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d0c6      	beq.n	8002d72 <_vfiprintf_r+0x156>
 8002de4:	9105      	str	r1, [sp, #20]
 8002de6:	e7c4      	b.n	8002d72 <_vfiprintf_r+0x156>
 8002de8:	4604      	mov	r4, r0
 8002dea:	2301      	movs	r3, #1
 8002dec:	fb0c 2101 	mla	r1, ip, r1, r2
 8002df0:	e7f0      	b.n	8002dd4 <_vfiprintf_r+0x1b8>
 8002df2:	ab03      	add	r3, sp, #12
 8002df4:	9300      	str	r3, [sp, #0]
 8002df6:	462a      	mov	r2, r5
 8002df8:	4630      	mov	r0, r6
 8002dfa:	4b13      	ldr	r3, [pc, #76]	@ (8002e48 <_vfiprintf_r+0x22c>)
 8002dfc:	a904      	add	r1, sp, #16
 8002dfe:	f3af 8000 	nop.w
 8002e02:	4607      	mov	r7, r0
 8002e04:	1c78      	adds	r0, r7, #1
 8002e06:	d1d6      	bne.n	8002db6 <_vfiprintf_r+0x19a>
 8002e08:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002e0a:	07d9      	lsls	r1, r3, #31
 8002e0c:	d405      	bmi.n	8002e1a <_vfiprintf_r+0x1fe>
 8002e0e:	89ab      	ldrh	r3, [r5, #12]
 8002e10:	059a      	lsls	r2, r3, #22
 8002e12:	d402      	bmi.n	8002e1a <_vfiprintf_r+0x1fe>
 8002e14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002e16:	f7ff f99d 	bl	8002154 <__retarget_lock_release_recursive>
 8002e1a:	89ab      	ldrh	r3, [r5, #12]
 8002e1c:	065b      	lsls	r3, r3, #25
 8002e1e:	f53f af1f 	bmi.w	8002c60 <_vfiprintf_r+0x44>
 8002e22:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002e24:	e71e      	b.n	8002c64 <_vfiprintf_r+0x48>
 8002e26:	ab03      	add	r3, sp, #12
 8002e28:	9300      	str	r3, [sp, #0]
 8002e2a:	462a      	mov	r2, r5
 8002e2c:	4630      	mov	r0, r6
 8002e2e:	4b06      	ldr	r3, [pc, #24]	@ (8002e48 <_vfiprintf_r+0x22c>)
 8002e30:	a904      	add	r1, sp, #16
 8002e32:	f7ff fc77 	bl	8002724 <_printf_i>
 8002e36:	e7e4      	b.n	8002e02 <_vfiprintf_r+0x1e6>
 8002e38:	080034c7 	.word	0x080034c7
 8002e3c:	080034cd 	.word	0x080034cd
 8002e40:	080034d1 	.word	0x080034d1
 8002e44:	00000000 	.word	0x00000000
 8002e48:	08002bf9 	.word	0x08002bf9

08002e4c <__swbuf_r>:
 8002e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e4e:	460e      	mov	r6, r1
 8002e50:	4614      	mov	r4, r2
 8002e52:	4605      	mov	r5, r0
 8002e54:	b118      	cbz	r0, 8002e5e <__swbuf_r+0x12>
 8002e56:	6a03      	ldr	r3, [r0, #32]
 8002e58:	b90b      	cbnz	r3, 8002e5e <__swbuf_r+0x12>
 8002e5a:	f7ff f867 	bl	8001f2c <__sinit>
 8002e5e:	69a3      	ldr	r3, [r4, #24]
 8002e60:	60a3      	str	r3, [r4, #8]
 8002e62:	89a3      	ldrh	r3, [r4, #12]
 8002e64:	071a      	lsls	r2, r3, #28
 8002e66:	d501      	bpl.n	8002e6c <__swbuf_r+0x20>
 8002e68:	6923      	ldr	r3, [r4, #16]
 8002e6a:	b943      	cbnz	r3, 8002e7e <__swbuf_r+0x32>
 8002e6c:	4621      	mov	r1, r4
 8002e6e:	4628      	mov	r0, r5
 8002e70:	f000 f82a 	bl	8002ec8 <__swsetup_r>
 8002e74:	b118      	cbz	r0, 8002e7e <__swbuf_r+0x32>
 8002e76:	f04f 37ff 	mov.w	r7, #4294967295
 8002e7a:	4638      	mov	r0, r7
 8002e7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e7e:	6823      	ldr	r3, [r4, #0]
 8002e80:	6922      	ldr	r2, [r4, #16]
 8002e82:	b2f6      	uxtb	r6, r6
 8002e84:	1a98      	subs	r0, r3, r2
 8002e86:	6963      	ldr	r3, [r4, #20]
 8002e88:	4637      	mov	r7, r6
 8002e8a:	4283      	cmp	r3, r0
 8002e8c:	dc05      	bgt.n	8002e9a <__swbuf_r+0x4e>
 8002e8e:	4621      	mov	r1, r4
 8002e90:	4628      	mov	r0, r5
 8002e92:	f7ff fde7 	bl	8002a64 <_fflush_r>
 8002e96:	2800      	cmp	r0, #0
 8002e98:	d1ed      	bne.n	8002e76 <__swbuf_r+0x2a>
 8002e9a:	68a3      	ldr	r3, [r4, #8]
 8002e9c:	3b01      	subs	r3, #1
 8002e9e:	60a3      	str	r3, [r4, #8]
 8002ea0:	6823      	ldr	r3, [r4, #0]
 8002ea2:	1c5a      	adds	r2, r3, #1
 8002ea4:	6022      	str	r2, [r4, #0]
 8002ea6:	701e      	strb	r6, [r3, #0]
 8002ea8:	6962      	ldr	r2, [r4, #20]
 8002eaa:	1c43      	adds	r3, r0, #1
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d004      	beq.n	8002eba <__swbuf_r+0x6e>
 8002eb0:	89a3      	ldrh	r3, [r4, #12]
 8002eb2:	07db      	lsls	r3, r3, #31
 8002eb4:	d5e1      	bpl.n	8002e7a <__swbuf_r+0x2e>
 8002eb6:	2e0a      	cmp	r6, #10
 8002eb8:	d1df      	bne.n	8002e7a <__swbuf_r+0x2e>
 8002eba:	4621      	mov	r1, r4
 8002ebc:	4628      	mov	r0, r5
 8002ebe:	f7ff fdd1 	bl	8002a64 <_fflush_r>
 8002ec2:	2800      	cmp	r0, #0
 8002ec4:	d0d9      	beq.n	8002e7a <__swbuf_r+0x2e>
 8002ec6:	e7d6      	b.n	8002e76 <__swbuf_r+0x2a>

08002ec8 <__swsetup_r>:
 8002ec8:	b538      	push	{r3, r4, r5, lr}
 8002eca:	4b29      	ldr	r3, [pc, #164]	@ (8002f70 <__swsetup_r+0xa8>)
 8002ecc:	4605      	mov	r5, r0
 8002ece:	6818      	ldr	r0, [r3, #0]
 8002ed0:	460c      	mov	r4, r1
 8002ed2:	b118      	cbz	r0, 8002edc <__swsetup_r+0x14>
 8002ed4:	6a03      	ldr	r3, [r0, #32]
 8002ed6:	b90b      	cbnz	r3, 8002edc <__swsetup_r+0x14>
 8002ed8:	f7ff f828 	bl	8001f2c <__sinit>
 8002edc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ee0:	0719      	lsls	r1, r3, #28
 8002ee2:	d422      	bmi.n	8002f2a <__swsetup_r+0x62>
 8002ee4:	06da      	lsls	r2, r3, #27
 8002ee6:	d407      	bmi.n	8002ef8 <__swsetup_r+0x30>
 8002ee8:	2209      	movs	r2, #9
 8002eea:	602a      	str	r2, [r5, #0]
 8002eec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ef4:	81a3      	strh	r3, [r4, #12]
 8002ef6:	e033      	b.n	8002f60 <__swsetup_r+0x98>
 8002ef8:	0758      	lsls	r0, r3, #29
 8002efa:	d512      	bpl.n	8002f22 <__swsetup_r+0x5a>
 8002efc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002efe:	b141      	cbz	r1, 8002f12 <__swsetup_r+0x4a>
 8002f00:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002f04:	4299      	cmp	r1, r3
 8002f06:	d002      	beq.n	8002f0e <__swsetup_r+0x46>
 8002f08:	4628      	mov	r0, r5
 8002f0a:	f7ff f943 	bl	8002194 <_free_r>
 8002f0e:	2300      	movs	r3, #0
 8002f10:	6363      	str	r3, [r4, #52]	@ 0x34
 8002f12:	89a3      	ldrh	r3, [r4, #12]
 8002f14:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002f18:	81a3      	strh	r3, [r4, #12]
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	6063      	str	r3, [r4, #4]
 8002f1e:	6923      	ldr	r3, [r4, #16]
 8002f20:	6023      	str	r3, [r4, #0]
 8002f22:	89a3      	ldrh	r3, [r4, #12]
 8002f24:	f043 0308 	orr.w	r3, r3, #8
 8002f28:	81a3      	strh	r3, [r4, #12]
 8002f2a:	6923      	ldr	r3, [r4, #16]
 8002f2c:	b94b      	cbnz	r3, 8002f42 <__swsetup_r+0x7a>
 8002f2e:	89a3      	ldrh	r3, [r4, #12]
 8002f30:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002f34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f38:	d003      	beq.n	8002f42 <__swsetup_r+0x7a>
 8002f3a:	4621      	mov	r1, r4
 8002f3c:	4628      	mov	r0, r5
 8002f3e:	f000 f88a 	bl	8003056 <__smakebuf_r>
 8002f42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f46:	f013 0201 	ands.w	r2, r3, #1
 8002f4a:	d00a      	beq.n	8002f62 <__swsetup_r+0x9a>
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	60a2      	str	r2, [r4, #8]
 8002f50:	6962      	ldr	r2, [r4, #20]
 8002f52:	4252      	negs	r2, r2
 8002f54:	61a2      	str	r2, [r4, #24]
 8002f56:	6922      	ldr	r2, [r4, #16]
 8002f58:	b942      	cbnz	r2, 8002f6c <__swsetup_r+0xa4>
 8002f5a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8002f5e:	d1c5      	bne.n	8002eec <__swsetup_r+0x24>
 8002f60:	bd38      	pop	{r3, r4, r5, pc}
 8002f62:	0799      	lsls	r1, r3, #30
 8002f64:	bf58      	it	pl
 8002f66:	6962      	ldrpl	r2, [r4, #20]
 8002f68:	60a2      	str	r2, [r4, #8]
 8002f6a:	e7f4      	b.n	8002f56 <__swsetup_r+0x8e>
 8002f6c:	2000      	movs	r0, #0
 8002f6e:	e7f7      	b.n	8002f60 <__swsetup_r+0x98>
 8002f70:	20000018 	.word	0x20000018

08002f74 <_raise_r>:
 8002f74:	291f      	cmp	r1, #31
 8002f76:	b538      	push	{r3, r4, r5, lr}
 8002f78:	4605      	mov	r5, r0
 8002f7a:	460c      	mov	r4, r1
 8002f7c:	d904      	bls.n	8002f88 <_raise_r+0x14>
 8002f7e:	2316      	movs	r3, #22
 8002f80:	6003      	str	r3, [r0, #0]
 8002f82:	f04f 30ff 	mov.w	r0, #4294967295
 8002f86:	bd38      	pop	{r3, r4, r5, pc}
 8002f88:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8002f8a:	b112      	cbz	r2, 8002f92 <_raise_r+0x1e>
 8002f8c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8002f90:	b94b      	cbnz	r3, 8002fa6 <_raise_r+0x32>
 8002f92:	4628      	mov	r0, r5
 8002f94:	f000 f830 	bl	8002ff8 <_getpid_r>
 8002f98:	4622      	mov	r2, r4
 8002f9a:	4601      	mov	r1, r0
 8002f9c:	4628      	mov	r0, r5
 8002f9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002fa2:	f000 b817 	b.w	8002fd4 <_kill_r>
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d00a      	beq.n	8002fc0 <_raise_r+0x4c>
 8002faa:	1c59      	adds	r1, r3, #1
 8002fac:	d103      	bne.n	8002fb6 <_raise_r+0x42>
 8002fae:	2316      	movs	r3, #22
 8002fb0:	6003      	str	r3, [r0, #0]
 8002fb2:	2001      	movs	r0, #1
 8002fb4:	e7e7      	b.n	8002f86 <_raise_r+0x12>
 8002fb6:	2100      	movs	r1, #0
 8002fb8:	4620      	mov	r0, r4
 8002fba:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8002fbe:	4798      	blx	r3
 8002fc0:	2000      	movs	r0, #0
 8002fc2:	e7e0      	b.n	8002f86 <_raise_r+0x12>

08002fc4 <raise>:
 8002fc4:	4b02      	ldr	r3, [pc, #8]	@ (8002fd0 <raise+0xc>)
 8002fc6:	4601      	mov	r1, r0
 8002fc8:	6818      	ldr	r0, [r3, #0]
 8002fca:	f7ff bfd3 	b.w	8002f74 <_raise_r>
 8002fce:	bf00      	nop
 8002fd0:	20000018 	.word	0x20000018

08002fd4 <_kill_r>:
 8002fd4:	b538      	push	{r3, r4, r5, lr}
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	4d06      	ldr	r5, [pc, #24]	@ (8002ff4 <_kill_r+0x20>)
 8002fda:	4604      	mov	r4, r0
 8002fdc:	4608      	mov	r0, r1
 8002fde:	4611      	mov	r1, r2
 8002fe0:	602b      	str	r3, [r5, #0]
 8002fe2:	f7fd fc7b 	bl	80008dc <_kill>
 8002fe6:	1c43      	adds	r3, r0, #1
 8002fe8:	d102      	bne.n	8002ff0 <_kill_r+0x1c>
 8002fea:	682b      	ldr	r3, [r5, #0]
 8002fec:	b103      	cbz	r3, 8002ff0 <_kill_r+0x1c>
 8002fee:	6023      	str	r3, [r4, #0]
 8002ff0:	bd38      	pop	{r3, r4, r5, pc}
 8002ff2:	bf00      	nop
 8002ff4:	200002c4 	.word	0x200002c4

08002ff8 <_getpid_r>:
 8002ff8:	f7fd bc6e 	b.w	80008d8 <_getpid>

08002ffc <_malloc_usable_size_r>:
 8002ffc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003000:	1f18      	subs	r0, r3, #4
 8003002:	2b00      	cmp	r3, #0
 8003004:	bfbc      	itt	lt
 8003006:	580b      	ldrlt	r3, [r1, r0]
 8003008:	18c0      	addlt	r0, r0, r3
 800300a:	4770      	bx	lr

0800300c <__swhatbuf_r>:
 800300c:	b570      	push	{r4, r5, r6, lr}
 800300e:	460c      	mov	r4, r1
 8003010:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003014:	4615      	mov	r5, r2
 8003016:	2900      	cmp	r1, #0
 8003018:	461e      	mov	r6, r3
 800301a:	b096      	sub	sp, #88	@ 0x58
 800301c:	da0c      	bge.n	8003038 <__swhatbuf_r+0x2c>
 800301e:	89a3      	ldrh	r3, [r4, #12]
 8003020:	2100      	movs	r1, #0
 8003022:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003026:	bf14      	ite	ne
 8003028:	2340      	movne	r3, #64	@ 0x40
 800302a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800302e:	2000      	movs	r0, #0
 8003030:	6031      	str	r1, [r6, #0]
 8003032:	602b      	str	r3, [r5, #0]
 8003034:	b016      	add	sp, #88	@ 0x58
 8003036:	bd70      	pop	{r4, r5, r6, pc}
 8003038:	466a      	mov	r2, sp
 800303a:	f000 f849 	bl	80030d0 <_fstat_r>
 800303e:	2800      	cmp	r0, #0
 8003040:	dbed      	blt.n	800301e <__swhatbuf_r+0x12>
 8003042:	9901      	ldr	r1, [sp, #4]
 8003044:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003048:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800304c:	4259      	negs	r1, r3
 800304e:	4159      	adcs	r1, r3
 8003050:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003054:	e7eb      	b.n	800302e <__swhatbuf_r+0x22>

08003056 <__smakebuf_r>:
 8003056:	898b      	ldrh	r3, [r1, #12]
 8003058:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800305a:	079d      	lsls	r5, r3, #30
 800305c:	4606      	mov	r6, r0
 800305e:	460c      	mov	r4, r1
 8003060:	d507      	bpl.n	8003072 <__smakebuf_r+0x1c>
 8003062:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003066:	6023      	str	r3, [r4, #0]
 8003068:	6123      	str	r3, [r4, #16]
 800306a:	2301      	movs	r3, #1
 800306c:	6163      	str	r3, [r4, #20]
 800306e:	b003      	add	sp, #12
 8003070:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003072:	466a      	mov	r2, sp
 8003074:	ab01      	add	r3, sp, #4
 8003076:	f7ff ffc9 	bl	800300c <__swhatbuf_r>
 800307a:	9f00      	ldr	r7, [sp, #0]
 800307c:	4605      	mov	r5, r0
 800307e:	4639      	mov	r1, r7
 8003080:	4630      	mov	r0, r6
 8003082:	f7ff f8f9 	bl	8002278 <_malloc_r>
 8003086:	b948      	cbnz	r0, 800309c <__smakebuf_r+0x46>
 8003088:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800308c:	059a      	lsls	r2, r3, #22
 800308e:	d4ee      	bmi.n	800306e <__smakebuf_r+0x18>
 8003090:	f023 0303 	bic.w	r3, r3, #3
 8003094:	f043 0302 	orr.w	r3, r3, #2
 8003098:	81a3      	strh	r3, [r4, #12]
 800309a:	e7e2      	b.n	8003062 <__smakebuf_r+0xc>
 800309c:	89a3      	ldrh	r3, [r4, #12]
 800309e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80030a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80030a6:	81a3      	strh	r3, [r4, #12]
 80030a8:	9b01      	ldr	r3, [sp, #4]
 80030aa:	6020      	str	r0, [r4, #0]
 80030ac:	b15b      	cbz	r3, 80030c6 <__smakebuf_r+0x70>
 80030ae:	4630      	mov	r0, r6
 80030b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80030b4:	f000 f81e 	bl	80030f4 <_isatty_r>
 80030b8:	b128      	cbz	r0, 80030c6 <__smakebuf_r+0x70>
 80030ba:	89a3      	ldrh	r3, [r4, #12]
 80030bc:	f023 0303 	bic.w	r3, r3, #3
 80030c0:	f043 0301 	orr.w	r3, r3, #1
 80030c4:	81a3      	strh	r3, [r4, #12]
 80030c6:	89a3      	ldrh	r3, [r4, #12]
 80030c8:	431d      	orrs	r5, r3
 80030ca:	81a5      	strh	r5, [r4, #12]
 80030cc:	e7cf      	b.n	800306e <__smakebuf_r+0x18>
	...

080030d0 <_fstat_r>:
 80030d0:	b538      	push	{r3, r4, r5, lr}
 80030d2:	2300      	movs	r3, #0
 80030d4:	4d06      	ldr	r5, [pc, #24]	@ (80030f0 <_fstat_r+0x20>)
 80030d6:	4604      	mov	r4, r0
 80030d8:	4608      	mov	r0, r1
 80030da:	4611      	mov	r1, r2
 80030dc:	602b      	str	r3, [r5, #0]
 80030de:	f7fd fc2d 	bl	800093c <_fstat>
 80030e2:	1c43      	adds	r3, r0, #1
 80030e4:	d102      	bne.n	80030ec <_fstat_r+0x1c>
 80030e6:	682b      	ldr	r3, [r5, #0]
 80030e8:	b103      	cbz	r3, 80030ec <_fstat_r+0x1c>
 80030ea:	6023      	str	r3, [r4, #0]
 80030ec:	bd38      	pop	{r3, r4, r5, pc}
 80030ee:	bf00      	nop
 80030f0:	200002c4 	.word	0x200002c4

080030f4 <_isatty_r>:
 80030f4:	b538      	push	{r3, r4, r5, lr}
 80030f6:	2300      	movs	r3, #0
 80030f8:	4d05      	ldr	r5, [pc, #20]	@ (8003110 <_isatty_r+0x1c>)
 80030fa:	4604      	mov	r4, r0
 80030fc:	4608      	mov	r0, r1
 80030fe:	602b      	str	r3, [r5, #0]
 8003100:	f7fd fc22 	bl	8000948 <_isatty>
 8003104:	1c43      	adds	r3, r0, #1
 8003106:	d102      	bne.n	800310e <_isatty_r+0x1a>
 8003108:	682b      	ldr	r3, [r5, #0]
 800310a:	b103      	cbz	r3, 800310e <_isatty_r+0x1a>
 800310c:	6023      	str	r3, [r4, #0]
 800310e:	bd38      	pop	{r3, r4, r5, pc}
 8003110:	200002c4 	.word	0x200002c4

08003114 <_init>:
 8003114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003116:	bf00      	nop
 8003118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800311a:	bc08      	pop	{r3}
 800311c:	469e      	mov	lr, r3
 800311e:	4770      	bx	lr

08003120 <_fini>:
 8003120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003122:	bf00      	nop
 8003124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003126:	bc08      	pop	{r3}
 8003128:	469e      	mov	lr, r3
 800312a:	4770      	bx	lr
